,question,summary,link,answers
0,,,,
1,What does if __name__ == “__main__”: do?,"Given the following code, what does the if __name__ == ""__main__"": do?

# Threading example
import time, thread

def myfunction(string, sleeptime, lock, *args):
    while True:
        lock.acquire()
 ...",https://stackoverflow.com/questions/419163/what-does-if-name-main-do,"['Given the following code, what does the if __name__ == ""__main__"": do?', 'Whenever the Python interpreter reads a source file, it does two things:', 'When your script is run by passing it as a command to the Python interpreter,', 'The simplest explanation for the __name__ variable (imho) is the following:', 'To outline the basics:', 'if __name__ == ""__main__"" is the part that runs when the script is run from (say) the command line using a command like python myscript.py.', ""__name__ is a global variable (in Python, global actually means on the module level) that exists in all namespaces. It is typically the module's name (as a str type)."", 'There are lots of different takes here on the mechanics of the code in question, the ""How"", but for me none of it made sense until I understood the ""Why"". This should be especially helpful for new programmers.', ""When there are certain statements in our module (M.py) we want to be executed when it'll be running as main (not imported), we can place those statements (test-cases, print statements) under this if block."", 'Put simply, __name__ is a variable defined for each script that defines whether the script is being run as the main module or it is being run as an imported module.', ""Let's look at the answer in a more abstract way:"", 'When you run Python interactively the local __name__ variable is assigned a value of __main__. Likewise, when you execute a Python module from the command line, rather than importing it into another module, its __name__ attribute is assigned a value of __main__, rather than the actual name of the module. In this way, modules can look at their own __name__ value to determine for themselves how they are being used, whether as support for another program or as the main application executed from the command line. Thus, the following idiom is quite common in Python modules:', 'Consider:', ""Before explaining anything about if __name__ == '__main__' it is important to understand what __name__ is and what it does."", ""I think it's best to break the answer in depth and in simple words:"", ""I've been reading so much throughout the answers on this page. I would say, if you know the thing, for sure you will understand those answers, otherwise, you are still confused."", 'It is a special for when a Python file is called from the command line. This is typically used to call a ""main()"" function or execute other appropriate startup code, like commandline arguments handling for instance.', 'There are a number of variables that the system (Python interpreter) provides for source files (modules).  You can get their values anytime you want, so, let us focus on the __name__ variable/attribute:', 'if __name__ == ""__main__"": is basically the top-level script environment, and it specifies the interpreter that (\'I have the highest priority to be executed first\').', 'You can make the file usable as a script as well as an importable module.', 'Consider:', 'The reason for', ""The code under if __name__ == '__main__': will be executed only if the module is invoked as a script."", 'Every module in python has a attribute called __name__. The value of __name__  attribute is  __main__  when the module is run directly, like python my_module.py. Otherwise (like when you say import my_module) the value of __name__  is the name of the module.', 'This answer is for Java programmers learning Python.\nEvery Java file typically contains one public class. You can use that class in two ways:', 'If this .py file are imported by other .py files, the code under ""the if statement"" will not be executed.', 'If the python interpreter is running\xa0a particular module then __name__ global  variable will have value ""__main__""', ""We see if __name__ == '__main__': quite often."", 'All the answers have pretty much explained the functionality. But I will provide one example of its usage which might help clearing out the concept further.', 'Create a file, a.py:', ""Every module in Python has a special attribute called name. The value of name  attribute is set to 'main'  when the module is executed as  the main program (e.g. running python foo.py). Otherwise, the value of name  is set to the name of the module that it was called from.""]"
2,Does Python have a ternary conditional operator?,"If Python does not have a ternary conditional operator, is it possible to simulate one using other language constructs?",https://stackoverflow.com/questions/394809/does-python-have-a-ternary-conditional-operator,"['If Python does not have a ternary conditional operator, is it possible to simulate one using other language constructs?', 'Yes, it was added in version 2.5. The expression syntax is:', 'You can index into a tuple:', ""For versions prior to 2.5, there's the trick:"", '<expression 1> if <condition> else <expression 2>', 'From the documentation:', ""An operator for a conditional expression in Python was added in 2006 as part of Python Enhancement Proposal 308. Its form differ from common ?: operator and it's:"", 'Unfortunately, the', 'Here I just try to show some important difference in ternary operator between a couple of programming languages.', 'For Python 2.5 and newer there is a specific syntax:', 'You might often find', 'Yes. From the grammar file:', 'Simulating the python ternary operator.', 'Ternary conditional operator simply allows testing a condition in a single line replacing the multiline if-else making the code compact.', 'Just memorize this pyramid if you have trouble remembering:', 'you can do this :-', ""More a tip than an answer (don't need to repeat the obvious for the hundreth time), but I sometimes use it as a oneliner shortcut in such constructs:"", ""One of the alternatives to Python's conditional expression"", 'As already answered, yes there is a ternary operator in python:', 'Many programming languages derived from C usually have the following syntax of ternary conditional operator:', 'YES, python have a ternary operator, here is the syntax and an example code to demonstrate the same :)', 'Other answers correctly talk about the Python ternary operator. I would like to complement by mentioning a scenario for which the ternary operator is often used but for which there is a better idiom. This is the scenario of using a default value.', 'Python has a ternary form for assignments; however there may be even a shorter form that people should be aware of.', 'I find cumbersome the default python syntax val = a if cond else b, so sometimes I do this:', 'if variable is defined and you want to check if it has value you can just a or b', 'A neat way to chain multiple operators:', '**']"
3,What are metaclasses in Python?,"In Python, what are metaclasses and what do we use them for?",https://stackoverflow.com/questions/100003/what-are-metaclasses-in-python,"['In Python, what are metaclasses and what do we use them for?', 'A metaclass is the class of a class. A class defines how an instance of the class (i.e. an object) behaves while a metaclass defines how a class behaves. A class is an instance of a metaclass.', 'Before understanding metaclasses, you need to master classes in Python. And Python has a very peculiar idea of what classes are, borrowed from the Smalltalk language.', 'Note, this answer is for Python 2.x as it was written in 2008, metaclasses are slightly different in 3.x.', ""Others have explained how metaclasses work and how they fit into the Python type system. Here's an example of what they can be used for. In a testing framework I wrote, I wanted to keep track of the order in which classes were defined, so that I could later instantiate them in this order. I found it easiest to do this using a metaclass."", 'One use for metaclasses is adding new properties and methods to an instance automatically.', 'I think the ONLamp introduction to metaclass programming is well written and gives a really good introduction to the topic despite being several years old already.', 'TLDR: A metaclass instantiates and defines behavior for a class just like a class instantiates and defines behavior for an instance.', 'Python 3 update', ""If you've done Python programming for more than a few months you'll eventually stumble upon code that looks like this:"", 'A metaclass is a class that tells how (some) other class should be created.', 'The type(obj) function gets you the type of an object.', 'type is actually a metaclass -- a class that creates another classes.\nMost metaclass are the subclasses of type. The metaclass receives the new class as its first argument and provide access to class object with details as mentioned below:', 'Python classes are themselves objects - as in instance - of their meta-class.', 'The type() function can return the type of an object or create a new type,', ""In addition to the published answers I can say that a metaclass defines the behaviour for a class. So, you can explicitly set your metaclass. Whenever Python gets a keyword class then it starts searching for the metaclass. If it's not found – the default metaclass type is used to create the class's object. Using the __metaclass__ attribute, you can set metaclass of your class:"", 'In object-oriented programming, a metaclass is a class whose instances are classes. Just as an ordinary class defines the behavior of certain objects, a metaclass defines the behavior of certain class and their instances\nThe term metaclass simply means something used to create classes. In other words, it is the class of a class. The metaclass is used to create the class so like the object being an instance of a class, a class is an instance of a metaclass. In python classes are also considered objects.', ""Here's another example of what it can be used for:"", 'Note that in python 3.6 a new dunder method __init_subclass__(cls, **kwargs) was introduced to replace a lot of common use cases for metaclasses. Is is called when a subclass of the defining class is created. See python docs.', 'A class, in Python, is an object, and just like any other object, it is an instance of ""something"". This ""something"" is what is termed as a Metaclass. This metaclass is a special type of class that creates other class\'s objects. Hence, metaclass is responsible for making new classes. This allows the programmer to customize the way classes are generated.', 'Defination:\nA metaclass is a class whose instances are classes. Like an ""ordinary"" class defines the behavior of the instances of the class, a metaclass defines the behavior of classes and their instances.', 'A metaclass in Python is a class of a class that defines how a class behaves. A class is itself an instance of a metaclass. A class in Python defines how the instance of the class will behave. We can customize the class creation process by passing the metaclass keyword in the class definition. This can also be done by inheriting a class that has already passed in this keyword.', 'Metaclass is a kind of class which defines how the class will behave like or we can say that A class is itself an instance of a metaclass.']"
4,How do I check whether a file exists without exceptions?,"How do I check if a file exists or not, without using the try statement?",https://stackoverflow.com/questions/82831/how-do-i-check-whether-a-file-exists-without-exceptions,"['How do I check if a file exists or not, without using the try statement?', ""If the reason you're checking is so you can do something like if file_exists: open_it(), it's safer to use a try around the attempt to open it. Checking and then opening risks the file being deleted or moved or something between when you check and when you try to open it."", 'You have the os.path.exists function:', ""Unlike isfile(), exists() will return True for directories. So depending on if you want only plain files or also directories, you'll use isfile() or exists(). Here is some simple REPL output:"", 'Use os.path.isfile() with os.access():', ""Although almost every possible way has been listed in (at least one of) the existing answers (e.g. Python 3.4 specific stuff was added), I'll try to group everything together."", 'Python 3.4+ has an object-oriented path module: pathlib.  Using this new module, you can check whether a file exists like this:', ""This is the simplest way to check if a file exists. Just because the file existed when you checked doesn't guarantee that it will be there when you need to open it."", ""Prefer the try statement. It's considered better style and avoids race conditions."", 'Now available since Python 3.4, import and instantiate a Path object with the file name, and check the is_file method (note that this returns True for symlinks pointing to regular files as well):', 'Importing os makes it easier to navigate and perform standard actions with your operating system.', 'Testing for files and folders with os.path.isfile(), os.path.isdir() and os.path.exists()', 'In 2016 the best way is still using os.path.isfile:', ""It doesn't seem like there's a meaningful functional difference between try/except and isfile(), so you should use which one makes sense."", 'You could try this (safer):', 'Although I always recommend using try and except statements, here are a few possibilities for you (my personal favourite is using os.access):', 'Date:2017-12-04', 'If the file is for opening you could use one of the following techniques:', 'Additionally, os.access():', 'Raising exceptions is considered to be an acceptable, and Pythonic,\n  approach for flow control in your program. Consider handling missing\n  files with IOErrors. In this situation, an IOError exception will be\n  raised if the file exists but the user does not have read permissions.', 'If you imported NumPy already for other purposes then there is no need to import other libraries like pathlib, os, paths, etc.', ""You can write Brian's suggestion without the try:."", 'You can follow these three ways:', ""Adding one more slight variation which isn't exactly reflected in the other answers."", ""I'm the author of a package that's been around for about 10 years, and it has a function that addresses this question directly. Basically, if you are on a non-Windows system, it uses Popen to access find.  However, if you are on Windows, it replicates find with an efficient filesystem walker."", ""Here's a 1 line Python command for the Linux command line environment. I find this VERY HANDY since I'm not such a hot Bash guy."", 'You can use the ""OS"" library of Python:', 'How do I check whether a file exists, without using the try statement?']"
5,How do I merge two dictionaries in a single expression in Python (taking union of dictionaries)?,"I have two Python dictionaries, and I want to write a single expression that returns these two dictionaries, merged (i.e. taking the union).  The update() method would be what I need, if it returned ...",https://stackoverflow.com/questions/38987/how-do-i-merge-two-dictionaries-in-a-single-expression-in-python-taking-union-o,"['I have two Python dictionaries, and I want to write a single expression that returns these two dictionaries, merged (i.e. taking the union).  The update() method would be what I need, if it returned its result instead of modifying a dictionary in-place.', 'For dictionaries x and y, z becomes a shallowly merged dictionary with values from y replacing those from x.', 'In your case, what you can do is:', 'An alternative:', 'Another, more concise, option:', ""This probably won't be a popular answer, but you almost certainly do not want to do this.  If you want a copy that's a merge, then use copy (or deepcopy, depending on what you want) and then update.  The two lines of code are much more readable - more Pythonic - than the single line creation with .items() + .items().  Explicit is better than implicit."", 'In a follow-up answer, you asked about the relative performance of these two alternatives:', 'In Python 3.0 and later, you can use collections.ChainMap which groups multiple dicts or other mappings together to create a single, updateable view:', 'I wanted something similar, but with the ability to specify how the values on duplicate keys were merged, so I hacked this out (but did not heavily test it).  Obviously this is not a single expression, but it is a single function call.', 'Demonstration:', 'The best version I could think while not using copy would be:', 'Python 3.5 (PEP 448) allows a nicer syntax option:', ""For items with keys in both dictionaries ('b'), you can control which one ends up in the output by putting that one last."", 'While the question has already been answered several times,\nthis simple solution to the problem has not been listed yet.', 'Among such shady and dubious answers, this shining example is the one and only good way to merge dicts in Python, endorsed by dictator for life Guido van Rossum himself!  Someone else suggested half of this, but did not put it in a function.', 'If you think lambdas are evil then read no further.\nAs requested, you can write the fast and memory-efficient solution with one expression:', 'Be pythonic. Use a comprehension:', ""In python3, the items method no longer returns a list, but rather a view, which acts like a set. In this case you'll need to take the set union since concatenating with + won't work:"", 'Simple solution using itertools that preserves order (latter dicts have precedence)', 'Two dictionaries', ""Abuse leading to a one-expression solution for Matthew's answer:"", 'Even though the answers were good for this shallow dictionary, none of the methods defined here actually do a deep dictionary merge.', ""If you don't mind mutating x,"", '(For Python2.7* only; there are simpler solutions for Python3*.)', ""Drawing on ideas here and elsewhere I've comprehended a function:"", 'The problem I have with solutions listed to date is that, in the merged dictionary, the value for key ""b"" is 10 but, to my way of thinking, it should be 12.\nIn that light, I present the following:', ""It's so silly that .update returns nothing.\nI just use a simple helper function to solve the problem:"", 'This should solve your problem.', 'There will be a new option when Python 3.8 releases (scheduled for 20 October, 2019), thanks to PEP 572: Assignment Expressions. The new assignment expression operator := allows you to assign the result of the copy and still use it to call update, leaving the combined code a single expression, rather than two statements, changing:', 'This can be done with a single dict comprehension:']"
6,How to call an external command?,How do you call an external command (as if I'd typed it at the Unix shell or Windows command prompt) from within a Python script?,https://stackoverflow.com/questions/89228/how-to-call-an-external-command,"[""How do you call an external command (as if I'd typed it at the Unix shell or Windows command prompt) from within a Python script?"", 'Look at the subprocess module in the standard library:', ""Here's a summary of the ways to call external programs and the advantages and disadvantages of each:"", 'Typical implementation:', 'Some hints on detaching the child process from the calling one (starting the child process in background).', ""Note that this is dangerous, since the command isn't cleaned. I leave it up to you to google for the relevant documentation on the 'os' and 'sys' modules. There are a bunch of functions (exec* and spawn*) that will do similar things."", ""I'd recommend using the subprocess module instead of os.system because it does shell escaping for you and is therefore much safer."", 'If you want to return the results of the command, you can use os.popen. However, this is deprecated since version 2.6 in favor of the subprocess module, which other answers have covered well.', ""There are lots of different libraries which allow you to call external commands with Python. For each library I've given a description and shown an example of calling an external command. The command I used as the example is ls -l (list all files). If you want to find out more about any of the libraries I've listed and linked the documentation for each of them."", 'I always use fabric for this things like:', 'Use the subprocess module (Python 3):', 'Check the ""pexpect"" Python library, too.', 'If you need the output from the command you are calling,\nthen you can use subprocess.check_output (Python 2.7+).', 'This is how I run my commands. This code has everything you need pretty much', ""subprocess.run is the recommended approach as of Python 3.5 if your code does not need to maintain compatibility with earlier Python versions. It's more consistent and offers similar ease-of-use as Envoy. (Piping isn't as straightforward though. See this question for how.)"", 'Use subprocess.', 'Simple, use subprocess.run, which returns a CompletedProcess object:', ""os.system is OK, but kind of dated.  It's also not very secure.  Instead, try subprocess.  subprocess does not call sh directly and is therefore more secure than os.system."", 'There is also Plumbum', 'It can be this simple:', 'Use:', ""I quite like shell_command for its simplicity.  It's built on top of the subprocess module."", 'There is another difference here which is not mentioned previously.', 'os.system does not allow you to store results, so if you want to store results in some list or something, a subprocess.call works.', ""subprocess.check_call is convenient if you don't want to test return values. It throws an exception on any error."", 'I tend to use subprocess together with shlex (to handle escaping of quoted strings):', 'Shameless plug, I wrote a library for this :P\nhttps://github.com/houqp/shell.py', 'In Windows you can just import the subprocess module and run external commands by calling subprocess.Popen(), subprocess.Popen().communicate() and subprocess.Popen().wait() as below:', ""You can use Popen, and then you can check the procedure's status:"", 'To fetch the network id from the OpenStack Neutron:', 'Under Linux, in case you would like to call an external command that will execute independently (will keep running after the python script terminates), you can use a simple queue as task spooler or the at command']"
7,How can I safely create a nested directory?,"What is the most elegant way to check if the directory a file is going to be written to exists, and if not, create the directory using Python? Here is what I tried:

import os

file_path = ""/my/...",https://stackoverflow.com/questions/273192/how-can-i-safely-create-a-nested-directory,"['What is the most elegant way to check if the directory a file is going to be written to exists, and if not, create the directory using Python? Here is what I tried:', 'On Python ≥ 3.5, use pathlib.Path.mkdir:', ""pathlib.Path.mkdir as used above recursively creates the directory and does not raise an exception if the directory already exists. If you don't need or want the parents to be created, skip the parents argument."", 'Using try except and the right error code from errno module gets rid of the race condition and is cross-platform:', 'I would personally recommend that you use os.path.isdir() to test instead of os.path.exists().', 'Check os.makedirs:  (It makes sure the complete path exists.)\n To handle the fact the directory might exist, catch OSError.\n(If exist_ok is False (the default), an OSError is raised if the target directory already exists.)', 'Starting from Python 3.5, pathlib.Path.mkdir has an exist_ok flag:', 'You give a particular file at a certain path and you pull the directory from the file path. Then after making sure you have the directory, you attempt to open a file for reading. To comment on this code:', 'Try the os.path.exists function', ""I have put the following down. It's not totally foolproof though."", 'Check if a directory exists and create it if necessary?', 'In Python 3.4 you can also use the brand new pathlib module:', 'In Python3, os.makedirs supports setting exist_ok. The default setting is False, which means an OSError will be raised if the target directory already exists. By setting exist_ok to True, OSError (directory exists) will be ignored and the directory will not be created.', 'The relevant Python documentation suggests the use of the EAFP coding style (Easier to Ask for Forgiveness than Permission). This means that the code', 'For a one-liner solution, you can use IPython.utils.path.ensure_dir_exists():', 'You can use mkpath', 'I use os.path.exists(), here is a Python 3 script that can be used to check if a directory exists, create one if it does not exist, and delete it if it does exist (if desired).', 'Use this command check and create dir', 'Why not use subprocess module if running on a machine that supports command \nmkdir with -p option ? \nWorks on python 2.7 and python 3.6', 'I found this Q/A and I was initially puzzled by some of the failures and errors I was getting. I am working in Python 3 (v.3.5 in an Anaconda virtual environment on an Arch Linux x86_64 system).', ""I saw Heikki Toivonen and A-B-B's answers and thought of this variation."", 'You can use os.listdir for this:', 'Call the function create_dir() at the entry point of your program/project.', 'If you consider the following:', 'You have to set the full path before creating the directory:', 'Where your code here is use the (touch) command', 'Under Linux you can create directory in one line:', 'You can both create a file, and all its parent directories in 1 command with fastcore extension to pathlib: path.mk_write(data)']"
8,Accessing the index in 'for' loops?,"How do I access the index in a for loop like the following?

ints = [8, 23, 45, 12, 78]
for i in ints:
    print('item #{} = {}'.format(???, i))
I want to get this output:

item #1 = 8
item #2 = 23
...",https://stackoverflow.com/questions/522563/accessing-the-index-in-for-loops,"['How do I access the index in a for loop like the following?', 'Using an additional state variable, such as an index variable (which you would normally use in languages such as C or PHP), is considered non-pythonic.', 'Use enumerate to get the index with the element as you iterate:', ""It's pretty simple to start it from 1 other than 0:"", 'As is the norm in Python there are several ways to do this. In all examples assume: lst = [1, 2, 3, 4, 5]', 'Old fashioned way:', 'The fastest way to access indexes of list within loop in Python 3.7 is to use the enumerate method for small, medium and huge lists.', ""First of all, the indexes will be from 0 to 4. Programming languages start counting from 0; don't forget that or you will come across an index out of bounds exception. All you need in the for loop is a variable counting from 0 to 4 like so:"", 'for i in enumerate(items): print(i)', 'According to this discussion: http://bytes.com/topic/python/answers/464012-objects-list-index', 'You can do it with this code:', 'Best solution for this problem is use enumerate in-build python function. \nenumerate return tuple \nfirst value is index \nsecond value is element of array at that index', 'If I were to iterate nums = [1, 2, 3, 4, 5] I would do', 'In your question, you write ""how do I access the loop index, from 1 to 5 in this case?""', 'If there is no duplicate value in the list:', 'You can also try this:', 'You can use the index method', 'Simple answer using While Loop:', 'To print tuple of (index, value) in list comprehension using a for loop:', 'This serves the purpose well enough:']"
9,Difference between staticmethod and classmethod,What is the difference between a function decorated with @staticmethod and one decorated with @classmethod?,https://stackoverflow.com/questions/136097/difference-between-staticmethod-and-classmethod,"['What is the difference between a function decorated with @staticmethod and one decorated with @classmethod?', 'Maybe a bit of example code will help: Notice the difference in the call signatures of foo, class_foo and static_foo:', 'A staticmethod is a method that knows nothing about the class or instance it was called on. It just gets the arguments that were passed, no implicit first argument. It is basically useless in Python -- you can just use a module function instead of a staticmethod.', ""Basically @classmethod makes a method whose first argument is the class it's called from (rather than the class instance), @staticmethod does not have any implicit arguments."", 'Official python docs:', 'Here is a short article on this question', 'To decide whether to use @staticmethod or @classmethod you have to look inside your method. If your method accesses other variables/methods in your class then use @classmethod. On the other hand, if your method does not touches any other parts of the class then use @staticmethod.', 'You may have seen Python code like this pseudocode, which demonstrates the signatures of the various method types and provides a docstring to explain each:', 'I started learning programming language with C++ and then Java and then Python and so this question bothered me a lot as well, until I understood the simple usage of each.', 'I think a better question is ""When would you use @classmethod vs @staticmethod?""', ""@decorators were added in python 2.4 If you're using python < 2.4 you can use the classmethod() and staticmethod() function."", 'Static Methods:', '@staticmethod just disables the default function as method descriptor.  classmethod wraps your function in a container callable that passes a reference to the owning class as first argument:', 'Let me tell the similarity between a method decorated with @classmethod vs @staticmethod first.', 'Only the first argument differs:', 'The definitive guide on how to use static, class or abstract methods in Python is one good link for this topic, and summary it as following.', 'Another consideration with respect to staticmethod vs classmethod comes up with inheritance.  Say you have the following class:', 'I will try to explain the basic difference using an example.', '@classmethod : can be used to create a shared global access to all the instances created of that class..... like updating a record by multiple users....\nI particulary found it use ful when creating singletons as well..:)', 'A class method receives the class as implicit first argument, just like an instance method receives the instance. It is a method which is bound to the class and not the object of the class.It has access to the state of the class as it takes a class parameter that points to the class and not the object instance. It can modify a class state that would apply across all the instances of the class. For example it can modify a class variable that will be applicable to all the instances.', 'You might want to consider the difference between:', 'My contribution demonstrates the difference amongst @classmethod, @staticmethod, and instance methods, including how an instance can indirectly call a @staticmethod. But instead of indirectly calling a @staticmethod from an instance, making it private may be more ""pythonic."" Getting something from a private method isn\'t demonstrated here but it\'s basically the same concept.', 'Analyze @staticmethod literally providing different insights.', 'I think giving a purely Python version of staticmethod and classmethod would help to understand the difference between them at language level.', ""Class methods, as the name suggests, are used to make changes to classes and not the objects. To make changes to classes, they will modify the class attributes(not object attributes), since that is how you update classes.\nThis is the reason that class methods take the class(conventionally denoted by 'cls') as the first argument."", 'staticmethod has no access to attibutes of the object, of the class, or of parent classes in the inheritance hierarchy.\nIt can be called at the class directly (without creating an object).', ""One pretty important practical difference occurs when subclassing. If you don't mind, I'll hijack @unutbu's example:"", 'A quick hack-up ofotherwise identical methods in iPython reveals that @staticmethod yields marginal performance gains (in the nanoseconds), but otherwise it seems to serve no function. Also, any performance gains will probably be wiped out by the additional work of processing the method through staticmethod() during compilation (which happens prior to any code execution when you run a script).']"
10,How to make a flat list out of list of lists?,"I wonder whether there is a shortcut to make a simple list out of list of lists in Python.

I can do that in a for loop, but maybe there is some cool ""one-liner""? I tried it with reduce(), but I get ...",https://stackoverflow.com/questions/952914/how-to-make-a-flat-list-out-of-list-of-lists,"['I wonder whether there is a shortcut to make a simple list out of list of lists in Python.', 'Given a list of lists t,', 'You can use itertools.chain():', ""Note from the author: This is inefficient. But fun, because monoids are awesome. It's not appropriate for production Python code."", 'I tested most suggested solutions with perfplot (a pet project of mine, essentially a wrapper around timeit), and found', 'The extend() method in your example modifies x instead of returning a useful value (which reduce() expects).', '...Pandas:', 'Here is a general approach that applies to numbers, strings, nested lists and mixed containers.', ""If you want to flatten a data-structure where you don't know how deep it's nested you could use iteration_utilities.deepflatten1"", 'I take my statement back. sum is not the winner. Although it is faster when the list is small. But the performance degrades significantly with larger lists.', 'There seems to be a confusion with operator.add! When you add two lists together, the correct term for that is concat, not add. operator.concat is what you need to use.', 'Why do you use extend?', 'Consider installing the more_itertools package.', ""The reason your function didn't work is because the extend extends an array in-place and doesn't return it. You can still return x from lambda, using something like this:"", 'Recursive version', ""A bad feature of Anil's function above is that it requires the user to always manually specify the second argument to be an empty list []. This should instead be a default. Due to the way Python objects work, these should be set inside the function, not in the arguments."", 'matplotlib.cbook.flatten() will work for nested lists even if they nest more deeply than the example.', 'The accepted answer did not work for me when dealing with text-based lists of variable lengths. Here is an alternate approach that did work for me.', 'Following seem simplest to me:', ""One can also use NumPy's flat:"", 'You can use numpy :\nflat_list = list(np.concatenate(list_of_list))', 'The advantage of this solution over most others here is that if you have a list like:', 'If you are willing to give up a tiny amount of speed for a cleaner look, then you could use numpy.concatenate().tolist() or numpy.concatenate().ravel().tolist():', 'Fastest solution I have found (for large list anyway):', 'Simple code for underscore.py package fan', 'This may not be the most efficient way but I thought to put a one-liner (actually a two-liner). Both versions will work on arbitrary hierarchy nested lists, and exploits language features (Python3.5) and recursion.', 'Note: Below applies to Python 3.3+ because it uses yield_from.  six is also a third-party package, though it is stable.  Alternately, you could use sys.version.', 'This Code also works fine as it just extend the list all the way. Although it is much similar but only have one for loop. So It have less complexity than adding 2 for loops.', 'you can use list extend method, it shows to be the fastest:']"
11,Does Python have a string 'contains' substring method?,"I'm looking for a string.contains or string.indexof method in Python.

I want to do:

if not somestring.contains(""blah""):
   continue",https://stackoverflow.com/questions/3437059/does-python-have-a-string-contains-substring-method,"[""I'm looking for a string.contains or string.indexof method in Python."", 'You can use the in operator:', 'If it\'s just a substring search you can use string.find(""substring"").', '99% of use cases will be covered using the keyword, in, which returns True or False:', 'if needle in haystack: is the normal use, as @Michael says -- it relies on the in operator, more readable and faster than a method call.', 'Here are a few useful examples that speak for themselves concerning the in method:', 'If you are happy with ""blah"" in somestring but want it to be a function/method call, you can probably do this', 'So apparently there is nothing similar for vector-wise comparison. An obvious Python way to do so would be:', 'You can use y.count().', 'Here is your answer:', 'You can use regular expressions to get the occurrences:']"
12,Understanding slice notation,"I need a good explanation (references are a plus) on Python's slice notation. 

To me, this notation needs a bit of picking up. 

It looks extremely powerful, but I haven't quite got my head around it....",https://stackoverflow.com/questions/509211/understanding-slice-notation,"[""I need a good explanation (references are a plus) on Python's slice notation."", ""It's pretty simple really:"", 'The Python tutorial talks about it (scroll down a bit until you get to the part about slicing).', 'Enumerating the possibilities allowed by the grammar:', ""The answers above don't discuss slice assignment. To understand slice assignment, it's helpful to add another concept to the ASCII art:"", 'In short, the colons (:) in subscript notation (subscriptable[subscriptarg]) make slice notation - which has the optional arguments, start, stop, step:', ""And a couple of things that weren't immediately obvious to me when I first saw the slicing syntax:"", 'In Python 2.7', 'Found this great table at http://wiki.python.org/moin/MovingToPythonFromOtherLanguages', 'After using it a bit I realise that the simplest description is that it is exactly the same as the arguments in a for loop...', 'I find it easier to remember how it works, and then I can figure out any specific start/stop/step combination.', 'I use the ""an index points between elements"" method of thinking about it myself, but one way of describing it which sometimes helps others get it is this:', 'I hope this will help you to model the list in Python.', 'Python slicing notation:', 'This is how I teach slices to newbies:', 'You can also use slice assignment to remove one or more elements from a list:', 'This is just for some extra info...\nConsider the list below', 'As a general rule, writing code with a lot of hardcoded index values leads to a readability\nand maintenance mess. For example, if you come back to the code a year later, you’ll\nlook at it and wonder what you were thinking when you wrote it. The solution shown\nis simply a way of more clearly stating what your code is actually doing.\nIn general, the built-in slice() creates a slice object that can be used anywhere a slice\nis allowed. For example:', 'To make it simple, remember slice has only one form：', ""The previous answers don't discuss multi-dimensional array slicing which is possible using the famous NumPy package:"", 'You can run this script and experiment with it, below is some samples that I got from the script.', ""My brain seems happy to accept that lst[start:end] contains the start-th item. I might even say that it is a 'natural assumption'."", 'I personally think about it like a for loop:', 'In my opinion, you will understand and memorize better the Python string slicing notation if you look at it the following way (read on).', 'Most of the previous answers clears up questions about slice notation.', 'In Python, the most basic form for slicing is the following:', 'I want to add one Hello, World! example that explains the basics of slices for the very beginners. It helped me a lot.', 'The below is the example of an index of a string:', ""If you feel negative indices in slicing is confusing, here's a very easy way to think about it: just replace the negative index with len - index. So for example, replace -3 with len(list) - 3."", 'The basic slicing technique is to define the starting point, the stopping point, and the step size - also known as stride.', ""I don't think that the Python tutorial diagram (cited in various other answers) is good as this suggestion works for positive stride, but does not for a negative stride.""]"
13,How do I list all files of a directory?,How can I list all files of a directory in Python and add them to a list?,https://stackoverflow.com/questions/3207219/how-do-i-list-all-files-of-a-directory,"['How can I list all files of a directory in Python and add them to a list?', ""os.listdir() will get you everything that's in a directory - files and directories."", 'I prefer using the glob module, as it does pattern matching and expansion.', 'With listdir in os module you get the files and the folders in the current dir', 'will return a list of all files and directories in ""somedirectory"".', 'A one-line solution to get only list of files (no subdirectories):', 'Getting Full File Paths From a Directory and All Its Subdirectories', 'Since version 3.4 there are builtin iterators for this which are a lot more efficient than os.listdir():', 'When the question was asked, I imagine that Python 2, was the LTS version, however the code samples will be run by Python 3(.5) (I\'ll keep them as Python 2 compliant as possible; also, any code belonging to Python that I\'m going to post, is from v3.5.4 - unless otherwise specified). That has consequences related to another keyword in the question: ""add them into a list"":', ""I really liked adamk's answer, suggesting that you use glob(), from the module of the same name. This allows you to have pattern matching with *s."", 'If you are looking for a Python implementation of find, this is a recipe I use rather frequently:', 'For greater results, you can use listdir() method of the os module along with a generator (a generator is a powerful iterator that keeps its state, remember?). The following code works fine with both versions: Python 2 and Python 3.', 'Returning a list of absolute filepaths, does not recurse into subdirectories', 'Here I use a recursive structure.', 'A wise teacher told me once that:', 'Using generators', 'Another very readable variant for Python 3.4+ is using pathlib.Path.glob:', 'For python2:', ""Here's my general-purpose function for this.  It returns a list of file paths rather than filenames since I found that to be more useful.  It has a few optional arguments that make it versatile.  For instance, I often use it with arguments like pattern='*.txt' or subfolders=True."", 'I will provide a sample one liner where sourcepath and file type can be provided as input. The code returns a list of filenames with csv extension. Use . in case all files needs to be returned. This will also recursively scans the subdirectories.', 'dircache is  ""Deprecated since version 2.6: The dircache module has been removed in Python 3.0.""']"
14,How do I sort a dictionary by value?,"I have a dictionary of values read from two fields in a database: a string field and a numeric field. The string field is unique, so that is the key of the dictionary.

I can sort on the keys, but how ...",https://stackoverflow.com/questions/613183/how-do-i-sort-a-dictionary-by-value,"['I have a dictionary of values read from two fields in a database: a string field and a numeric field. The string field is unique, so that is the key of the dictionary.', 'It is not possible to sort a dictionary, only to get a representation of a dictionary that is sorted. Dictionaries are inherently orderless, but other types, such as lists and tuples, are not. So you need an ordered data type to represent sorted values, which will be a list—probably a list of tuples.', 'Well, it is actually possible to do a ""sort by dictionary values"". Recently I had to do that in a Code Golf (Stack Overflow question Code golf: Word frequency chart). Abridged, the problem was of the kind: given a text, count how often each word is encountered and display a list of the top words, sorted by decreasing frequency.', 'You could use:', ""Dicts can't be sorted, but you can build a sorted list from them."", 'In recent Python 2.7, we have the new OrderedDict type, which remembers the order in which the items were added.', 'UPDATE: 5 DECEMBER 2015 using Python 3.5', ""Pretty much the same as Hank Gay's answer:"", ""It can often be very handy to use namedtuple. For example, you have a dictionary of 'name' as keys and 'score' as values and you want to sort on 'score':"", ""Good news, so the OP's original use case of mapping pairs retrieved from a database with unique string ids as keys and numeric values as values into a built-in Python v3.6+ dict, should now respect the insert order."", 'I had the same problem, and I solved it like this:', 'If values are numeric you may also use Counter from collections.', 'In Python 2.7, simply do:', 'This is the code:', 'Try the following approach. Let us define a dictionary called mydict with the following data:', ""Starting from Python 3.6, dict objects are now ordered by insertion order. It's officially in the specs of Python 3.7."", 'You can create an ""inverted index"", also', 'You can use the collections.Counter. Note, this will work for both numeric and non-numeric values.', ""You can use a skip dict which is a dictionary that's permanently sorted by value."", 'You can also use custom function that can be passed to key.', ""As pointed out by Dilettant, Python 3.6 will now keep the order! I thought I'd share a function I wrote that eases the sorting of an iterable (tuple, list, dict). In the latter case, you can sort either on keys or values, and it can take numeric comparison into account. Only for >= 3.6!"", ""Of course, remember, you need to use OrderedDict because regular Python dictionaries don't keep the original order."", 'Here is a solution using zip on d.values() and d.keys().  A few lines down this link (on Dictionary view objects) is:', 'Use ValueSortedDict from dicts:', 'Iterate through a dict and sort it by its values in descending order:', 'This works in 3.1.x:', 'Just learned relevant skill from Python for Everybody.', 'If your values are integers, and you use Python 2.7 or newer, you can use collections.Counter instead of dict. The most_common method will give you all items, sorted by the value.', 'For the sake of completeness, I am posting a solution using heapq. Note, this method will work for both numeric and non-numeric values']"
15,Finding the index of an item in a list,"Given a list [""foo"", ""bar"", ""baz""] and an item in the list ""bar"", how do I get its index (1) in Python?",https://stackoverflow.com/questions/176918/finding-the-index-of-an-item-in-a-list,"['Given a list [""foo"", ""bar"", ""baz""] and an item in the list ""bar"", how do I get its index (1) in Python?', 'Reference: Data Structures > More on Lists', 'One thing that is really helpful in learning Python is to use the interactive help function:', 'The majority of answers explain how to find a single index, but their methods do not return multiple indexes if the item is in the list multiple times. Use enumerate():', 'To get all indexes:', 'index() returns the first index of value!', 'A problem will arise if the element is not in the list. This function handles the issue:', ""You have to set a condition to check if the element you're searching is in the list"", ""All of the proposed functions here reproduce inherent language behavior but obscure what's going on."", 'If you want all indexes, then you can use NumPy:', 'For a list [""foo"", ""bar"", ""baz""] and an item in the list ""bar"", what\'s the cleanest way to get its index (1) in Python?', 'All indexes with the zip function:', 'With enumerate(alist) you can store the first element (n) that is the index of the list when the element x is equal to what you look for.', 'Simply you can go with', 'Another option', '... like confirming the existence of the item before getting the index.  The nice thing about this approach is the function always returns a list of indices -- even if it is an empty list.  It works with strings as well.', 'A variant on the answer from FMc and user7177 will give a dict that can return all indices for any entry:', ""This solution is not as powerful as others, but if you're a beginner and only know about forloops it's still possible to find the first index of an item while avoiding the ValueError:"", 'Finding index of item x in list L:', ""This accounts for if the string is not in the list too, if it isn't in the list then location = -1"", 'Since Python lists are zero-based, we can use the zip built-in function as follows:', 'Python index() method throws an error if the item was not found. So instead you can make it similar to the indexOf() function of JavaScript which returns -1 if the item was not found:', 'There is a more functional answer to this.', ""For those coming from another language like me, maybe with a simple loop it's easier to understand and use it:"", 'Let’s give the name lst to the list that you have. One can convert the list lst to a numpy array. And, then use numpy.where to get the index of the chosen item in the list. Following is the way in which you will implement it.', 'It is mentioned in numerous answers that the built-in method of list.index(item) method is an O(n) algorithm. It is fine if you need to perform this once. But if you need to access the indices of elements a number of times, it makes more sense to first create a dictionary (O(n)) of item-index pairs, and then access the index at O(1) every time you need it.', 'If you are going to find an index once then using ""index"" method is fine. However, if you are going to search your data more than once then I recommend using bisect module. Keep in mind that using bisect module data must be sorted. So you sort data once and then you can use bisect.\nUsing bisect module on my machine is about 20 times faster than using index method.', 'There is a chance that that value may not be present so to avoid this ValueError, we can check if that actually exists in the list .', 'As indicated by @TerryA, many answers discuss how to find one index.', 'using dictionary , where process the list first and then add the index to it']"
16,Iterating over dictionaries using 'for' loops,"I am a bit puzzled by the following code:

d = {'x': 1, 'y': 2, 'z': 3} 
for key in d:
    print key, 'corresponds to', d[key]
What I don't understand is the key portion. How does Python recognize ...",https://stackoverflow.com/questions/3294889/iterating-over-dictionaries-using-for-loops,"['I am a bit puzzled by the following code:', 'key is just a variable name.', ""It's not that key is a special word, but that dictionaries implement the iterator protocol.  You could do this in your class, e.g. see this question for how to build class iterators."", 'Iterating over a dict iterates through its keys in no particular order, as you can see here:', 'key is simply a variable.', 'When you iterate through dictionaries using the for .. in ..-syntax, it always iterates over the keys (the values are accessible using dictionary[key]).', ""This is a very common looping idiom. in is an operator. For when to use for key in dict and when it must be for key in dict.keys() see David Goodger's Idiomatic Python article (archived copy)."", 'How does Python recognize that it needs only to read the key from the\n  dictionary? Is key a special word in Python? Or is it simply a\n  variable?', 'I have a use case where I have to iterate through the dict to get the key, value pair, also the index indicating where I am. This is how I do it:', ""You can check the implementation of CPython's dicttype on GitHub. This is the signature of method that implements the dict iterator:"", 'To iterate over keys, it is slower but better to use my_dict.keys(). If you tried to do something like this:', 'This will print the output in Sorted order by Values in ascending order.', 'If you are looking for a clear and visual example:']"
17,Using global variables in a function,"How can I create or use a global variable in a function?

If I create a global variable in one function, how can I use that global variable in another function? Do I need to store the global variable ...",https://stackoverflow.com/questions/423379/using-global-variables-in-a-function,"['How can I create or use a global variable in a function?', 'You can use a global variable within other functions by declaring it as global within each function that assigns a value to it:', ""If I'm understanding your situation correctly, what you're seeing is the result of how Python handles local (function) and global (module) namespaces."", 'You may want to explore the notion of namespaces. In Python, the module is the natural place for global data:', 'Python uses a simple heuristic to decide which scope it should load a variable from, between local and global.  If a variable name appears on the left hand side of an assignment, but is not declared global, it is assumed to be local.  If it does not appear on the left hand side of an assignment, it is assumed to be global.', ""If you want to refer to a global variable in a function, you can use the global keyword to declare which variables are global. You don't have to use it in all cases (as someone here incorrectly claims) - if the name referenced in an expression cannot be found in local scope or scopes in the functions in which this function is defined, it is looked up among global variables."", 'We can create a global with the following function:', 'In addition to already existing answers and to make this more confusing:', ""With parallel execution, global variables can cause unexpected results if you don't understand what is happening. Here is an example of using a global variable within multiprocessing. We can clearly see that each process works with its own copy of the variable:"", 'What you are saying is to use the method like this:', 'As it turns out the answer is always simple.', 'You need to reference the global variable in every function you want to use.', ""You're not actually storing the global in a local variable, just creating a local reference to the same object that your original global reference refers to. Remember that pretty much everything in Python is a name referring to an object, and nothing gets copied in usual operation."", 'Try this:', 'In case you have a local variable with the same name, you might want to use the globals() function.', 'Following on and as an add on, use a file to contain all global variables all declared locally and then import as:', 'Writing to explicit elements of a global array does not apparently need the global declaration, though writing to it ""wholesale"" does have that requirement:', 'Reference the class namespace where you want the change to show up.', 'I\'m adding this as I haven\'t seen it in any of the other answers and it might be useful for someone struggling with something similar. The globals() function returns a mutable global symbol dictionary where you can ""magically"" make data available for the rest of your code. \nFor example:', 'Globals in connection with multiprocessing on different platforms/envrionments \nas Windows/Mac OS on the one side and Linux on the other are troublesome.', 'There are 2 ways to declare a variable as global:']"
18,How do I check if a list is empty?,"For example, if passed the following:

a = []
How do I check to see if a is empty?",https://stackoverflow.com/questions/53513/how-do-i-check-if-a-list-is-empty,"['For example, if passed the following:', 'Using the implicit booleanness of the empty list is quite pythonic.', 'The pythonic way to do it is from the PEP 8 style guide (where Yes means “recommended” and No means “not recommended”):', 'I prefer it explicitly:', 'This is the first google hit for ""python test empty array"" and similar queries, plus other people seem to be generalizing the question beyond just lists, so I thought I\'d add a caveat for a different type of sequence that a lot of people might use.', 'For example, if passed the following:', 'An empty list is itself considered false in true value testing (see python documentation):', ""Patrick's (accepted) answer is right: if not a: is the right way to do it. Harley Holcombe's answer is right that this is in the PEP 8 style guide. But what none of the answers explain is why it's a good idea to follow the idiom—even if you personally find it's not explicit enough or confusing to Ruby users or whatever."", 'No one seems to have addressed questioning your need to test the list in the first place.  Because you provided no additional context, I can imagine that you may not need to do this check in the first place, but are unfamiliar with list processing in Python.', 'len() is an O(1) operation for Python lists, strings, dicts, and sets. Python internally keeps track of the number of elements in these containers.', 'I had written:', 'From documentation on truth value testing:', 'I prefer the following:', 'Here are a few ways you can check if a list is empty:', 'Method 1 (Preferred):', 'It is sometimes good to test for None and for emptiness separately as those are two different states. The code above produces the following output:', 'Many answers have been given, and a lot of them are pretty good. I just wanted to add that the check', 'If you want to check if a list is empty:', ""Being inspired by @dubiousjim's solution, I propose to use an additional general check of whether is it something iterable"", 'we could use a simple if else:', 'a little more practical:', ""You can even try using bool() like this. Although it is less readable surely it's a concise way to perform this."", 'Simply use is_empty() or make function like:-', 'Simple way is checking the length is equal zero.', 'From python3 onwards you can use', ""To check whether a list is empty or not you can use two following ways. But remember, we should avoid the way of explicitly checking for a type of sequence (it's a less pythonic way):"", 'The truth value of an empty list is False whereas for a non-empty list it is True.', 'What brought me here is a special use-case: I actually wanted a function to tell me if a list is empty or not. I wanted to avoid writing my own function or using a lambda-expression here (because it seemed like it should be simple enough):']"
19,What is the difference between Python's list methods append and extend?,What's the difference between the list methods append() and extend()?,https://stackoverflow.com/questions/252703/what-is-the-difference-between-pythons-list-methods-append-and-extend,"[""What's the difference between the list methods append() and extend()?"", 'append: Appends object at the end.', 'append adds an element to a list, and extend concatenates the first list with another list (or another iterable, not necessarily a list.)', 'The list.append method appends an object to the end of the list.', 'append appends a single element. extend appends a list of elements.', 'With append you can append a single element that will extend the list:', 'The following two snippets are semantically equivalent:', 'The append() method adds a single item to the end of the list.', 'You can use ""+"" for returning extend, instead of extending in place.', 'append(object) - Updates the list by adding an object to the list.', 'extend() can be used with an iterator argument. Here is an example. You wish to make a list out of a list of lists this way:', 'This is the equivalent of append and extend using the + operator:', 'append(): It is basically used in Python to add one element.', 'An interesting point that has been hinted, but not explained, is that extend is faster than append. For any loop that has append inside should be considered to be replaced by list.extend(processed_elements).', 'Append adds the entire data at once. The whole data will be added to the newly created index. On the other hand, extend, as it name suggests, extends the current array.', 'An English dictionary defines the words append and extend as:', 'I hope I can make a useful supplement to this question. If your list stores a specific type object, for example Info, here is a situation that extend method is not suitable: In a for loop and and generating an Info object every time and using extend to store it into your list, it will fail. The exception is like below:', 'To distinguish them intuitively', 'extend(L) extends the list by appending all the items in the given list L.', 'append ""extends"" the list (in place) by only one item, the single object passed (as argument).', 'Append and extend are one of the extensibility mechanisms in python.']"
20,How to get the current time in Python,What is the module/method used to get the current time?,https://stackoverflow.com/questions/415511/how-to-get-the-current-time-in-python,"['What is the module/method used to get the current time?', 'Use:', 'You can use time.strftime():', ""For this example, the output will be like this: '2013-09-18 11:16:32'"", ""Similar to Harley's answer, but use the str() function for a quick-n-dirty, slightly more human readable format:"", 'The time module provides functions that tells us the time in ""seconds since the epoch"" as well as other utilities.', 'Do', 'That outputs the current GMT in the specified format. There is also a localtime() method.', 'The previous answers are all good suggestions, but I find it easiest to use ctime():', 'The quickest way is:', 'If you need current time as a time object:', "".isoformat() is in the documentation, but not yet here\n(this is mighty similar to @Ray Vega's answer):"", 'Why not ask the U.S. Naval Observatory, the official timekeeper of the United States Navy?', 'Using pandas to get the current time, kind of overkilling the problem at hand:', 'This is what I ended up going with:', 'if you are using numpy already then directly you can use numpy.datetime64() \nfunction.', 'You can use the time module:', 'datetime.now() returns the current time as a naive datetime object that represents time in the local timezone. That value may be ambiguous e.g., during DST transitions (""fall back""). To avoid ambiguity either UTC timezone should be used:', 'Do dir(date) or any variables including the package. You can get all the attributes and methods associated with the variable.', 'By default, now() function returns output in the YYYY-MM-DD HH:MM:SS:MS format. Use the below sample script to get the current date and time in a Python script and print results on the screen. Create file getDateTime1.py with the below content.', ""This question doesn't need a new answer just for the sake of it ... a shiny new-ish toy/module, however, is enough justification.  That being the Pendulum library, which appears to do the sort of things which arrow attempted, except without the inherent flaws and bugs which beset arrow."", 'Current time of a timezone', 'Try the arrow module from http://crsmithdev.com/arrow/:', 'I want to get the time with milliseconds. A simple way to get them:', 'If you just want the current timestamp in ms (for example, to measure execution time), you can also use the ""timeit"" module:', ""You can use this function to get the time (unfortunately it doesn't say AM or PM):"", ""Because no one has mentioned it yet, and this is something I ran into recently... a pytz timezone's fromutc() method combined with datetime's utcnow() is the best way I've found to get a useful current time (and date) in any timezone."", ""This question is for Python but since Django is one of the most widely used frameworks for Python, its important to note that if you are using Django you can always use timezone.now() instead of datetime.datetime.now(). The former is timezone 'aware' while the latter is not."", 'You can do so using ctime():']"
21,Catch multiple exceptions in one line (except block),"I know that I can do:

try:
    # do something that may fail
except:
    # do this if ANYTHING goes wrong
I can also do this:

try:
    # do something that may fail
except IDontLikeYouException:
    #...",https://stackoverflow.com/questions/6470428/catch-multiple-exceptions-in-one-line-except-block,"['I know that I can do:', 'From Python Documentation:', 'Do this:', 'From Python documentation -> 8.3 Handling Exceptions:', ""If you frequently use a large number of exceptions, you can pre-define a tuple, so you don't have to re-type them many times."", 'One of the way to do this is..']"
22,Difference between __str__ and __repr__?,What is the difference between __str__ and __repr__ in Python?,https://stackoverflow.com/questions/1436703/difference-between-str-and-repr,"['What is the difference between __str__ and __repr__ in Python?', 'Alex summarized well but, surprisingly, was too succinct.', 'My rule of thumb:  __repr__ is for developers, __str__ is for customers.', ""Unless you specifically act to ensure otherwise, most classes don't have helpful results for either:"", '__repr__: representation of python object usually eval will convert it back to that object', 'In short, the goal of __repr__ is to be unambiguous and __str__ is to be\n  readable.', '__str__ (read as ""dunder (double-underscore) string"") and __repr__ (read as ""dunder-repper"" (for ""representation"")) are both special methods that return strings based on the state of the object.', 'On page 358 of the book Python scripting for computational science by Hans Petter Langtangen, it clearly states that', 'Apart from all the answers given, I would like to add few points :-', 'To put it simply:', 'In all honesty, eval(repr(obj)) is never used. If you find yourself using it, you should stop, because eval is dangerous, and strings are a very inefficient way to serialize your objects (use pickle instead).', 'From an (An Unofficial) Python Reference Wiki (archive copy) by effbot:', 'str - Creates a new string object from the given object.', ""One aspect that is missing in other answers. It's true that in general the pattern is:"", 'From the book Fluent Python:', 'Excellent answers already cover the difference between __str__ and __repr__, which for me boils down to the former being readable even by an end user, and the latter being as useful as possible to developers. Given that, I find that the default implementation of __repr__ often fails to achieve this goal because it omits information useful to developers.', ""One important thing to keep in mind is that container's __str__ uses contained objects' __repr__."", 'In a nutshell:', 'When print() is called on the result of decimal.Decimal(23) / decimal.Decimal(""1.05"") the raw number is printed; this output is in string form which can be achieved with __str__(). If we simply enter the expression we get a decimal.Decimal output — this output is in representational form which can be achieved with __repr__(). All Python objects have two output forms. String form is designed to be human-readable. The representational form is designed to produce output that if fed to a Python interpreter would (when possible) reproduce the represented object.', '__str__ can be invoked on an object by calling str(obj) and should return a human readable string.', 'Understand __str__ and __repr__ intuitively and permanently distinguish them at all.', 'Source: https://www.journaldev.com/22460/python-str-repr-functions', '__repr__ is used everywhere, except by print and str methods (when a __str__is defined !)', ""Q: What's the difference between __str__() and __repr__()?""]"
23,How can I make a time delay in Python? [duplicate],I would like to know how to put a time delay in a Python script.,https://stackoverflow.com/questions/510348/how-can-i-make-a-time-delay-in-python,"['I would like to know how to put a time delay in a Python script.', 'Here is another example where something is run approximately once a minute:', 'You can use the sleep() function in the time module. It can take a float argument for sub-second resolution.', 'In a single thread I suggest the sleep function:', 'Delays can be also implemented by using the following methods.', 'A bit of fun with a sleepy generator.', 'The Tkinter library in the Python standard library is an interactive tool which you can import. Basically, you can create buttons and boxes and popups and stuff that appear as windows which you manipulate with code.', 'Delays are done with the time library, specifically the time.sleep() function.', ""There are five methods which I know: time.sleep(), pygame.time.wait(), matplotlib's pyplot.pause(), .after(), and driver.implicitly_wait()."", ""Notice in recent Python versions (Python\xa03.4 or higher) you can use asyncio.sleep. It's related to asynchronous programming and asyncio. Check out next example:"", 'Use time.sleep or Event().wait like this:', ""While everyone else has suggested the de facto time module, I thought I'd share a different method using matplotlib's pyplot function, pause."", 'This is an easy example of a time delay:', 'You also can try this:']"
24,How to make a chain of function decorators?,"How can I make two decorators in Python that would do the following?

@makebold
@makeitalic
def say():
   return ""Hello""
...which should return:

""<b><i>Hello</i></b>""
I'm ...",https://stackoverflow.com/questions/739654/how-to-make-a-chain-of-function-decorators,"['How can I make two decorators in Python that would do the following?', 'Check out the documentation to see how decorators work. Here is what you asked for:', 'If you are not into long explanations, see Paolo Bergantino’s answer.', 'Alternatively, you could write a factory function which return a decorator which wraps the return value of the decorated function in a tag passed to the factory function. For example:', 'It looks like the other people have already told you how to solve the problem. I hope this will help you understand what decorators are.', 'And of course you can return lambdas as well from a decorator function:', 'Python decorators add extra functionality to another function', ""You could make two separate decorators that do what you want as illustrated directly below. Note the use of *args, **kwargs in the declaration of the wrapped() function which supports the decorated function having multiple arguments (which isn't really necessary for the example say() function, but is included for generality)."", 'Another way of doing the same thing:', 'You want the following function, when called:', 'To explain the decorator in a simple way:', 'A decorator takes the function definition and creates a new function that executes this function and transforms the result.', 'You can also write decorator in Class', 'This answer has long been answered, but I thought I would share my Decorator class which makes writing new decorators easy and compact.', 'Here is a simple example of chaining decorators.  Note the last line - it shows what is going on under the covers.', 'Speaking of the counter example - as given above, the counter will be shared between all functions that use the decorator:', 'Result:', ""Paolo Bergantino's answer has the great advantage of only using the stdlib, and works for this simple example where there are no decorator arguments nor decorated function arguments.""]"
25,How can I add new keys to a dictionary?,"Is it possible to add a key to a Python dictionary after it has been created?

It doesn't seem to have an .add() method.",https://stackoverflow.com/questions/1024847/how-can-i-add-new-keys-to-a-dictionary,"['Is it possible to add a key to a Python dictionary after it has been created?', ""you create a new key\\value pair on a dictionary by assigning a value\n  to that key. If the key doesn't exist, it's added and points to that\n  value. If it exists, the current value it points to is overwritten.\n  —R. Navega"", 'To add multiple keys simultaneously, use dict.update():', 'I feel like consolidating info about Python dictionaries:', ""Yes it is possible, and it does have a method that implements this, but you don't want to use it directly."", 'If you want to add a dictionary within a dictionary you can do it this way.', 'The conventional syntax is d[key] = value, but if your keyboard is missing the square bracket keys you could also do:', 'You can create one:', 'This popular question addresses functional methods of merging dictionaries a and b.', ""Let's pretend you want to live in the immutable world and do NOT want to modify the original but want to create a new dict that is the result of adding a new key to the original."", 'So many answers and still everybody forgot about the strangely named, oddly behaved, and yet still handy dict.setdefault()', ""If you're not joining two dictionaries, but adding new key-value pairs to a dictionary, then using the subscript notation seems like the best way."", ""Here's another way that I didn't see here:"", ""I think it would also be useful to point out Python's collections module that consists of many useful dictionary subclasses and wrappers that simplify the addition and modification of data types in a dictionary, specifically defaultdict:"", 'first to check whether the key already exists', 'add dictionary key, value class.']"
26,How do I pass a variable by reference?,"The Python documentation seems unclear about whether parameters are passed by reference or value, and the following code produces the unchanged value 'Original'

class PassByReference:
    def ...",https://stackoverflow.com/questions/986006/how-do-i-pass-a-variable-by-reference,"[""The Python documentation seems unclear about whether parameters are passed by reference or value, and the following code produces the unchanged value 'Original'"", 'Arguments are passed by assignment. The rationale behind this is twofold:', ""The problem comes from a misunderstanding of what variables are in Python. If you're used to most traditional languages, you have a mental model of what happens in the following sequence:"", 'I found the other answers rather long and complicated, so I created this simple diagram to explain the way Python treats variables and parameters.', 'It is neither pass-by-value or pass-by-reference - it is call-by-object. See this, by Fredrik Lundh:', 'Think of stuff being passed by assignment instead of by reference/by value. That way, it is always clear, what is happening as long as you understand what happens during the normal assignment.', ""Effbot (aka Fredrik Lundh) has described Python's variable passing style as call-by-object:  http://effbot.org/zone/call-by-object.htm"", 'The key to understanding parameter passing is to stop thinking about ""variables"". There are names and objects in Python and together they\nappear like variables, but it is useful to always distinguish the three.', 'Technically, Python always uses pass by reference values. I am going to repeat my other answer to support my statement.', 'A simple trick I normally use is to just wrap it in a list:', '(edit - Blair has updated his enormously popular answer so that it is now accurate)', 'You got some really good answers here.', 'Python’s pass-by-assignment scheme isn’t quite the same as C++’s reference parameters option, but it turns out to be very similar to the argument-passing model of the C language (and others) in practice:', ""In this case the variable titled var in the method Change is assigned a reference to self.variable, and you immediately assign a string to var. It's no longer pointing to self.variable. The following code snippet shows what would happen if you modify the data structure pointed to by var and self.variable, in this case a list:"", 'As you can state you need to have a mutable object, but let me suggest you to check over the global variables as they can help you or even solve this kind of issue!', 'A lot of insights in answers here, but i think an additional point is not clearly mentioned here explicitly.   Quoting from python documentation https://docs.python.org/2/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python', ""Here is the simple (I hope) explanation of the concept pass by object used in Python.\nWhenever you pass an object to the function, the object itself is passed (object in Python is actually what you'd call a value in other programming languages) not the reference to this object. In other words, when you call:"", ""Aside from all the great explanations on how this stuff works in Python, I don't see a simple suggestion for the problem. As you seem to do create objects and instances, the pythonic way of handling instance variables and changing them is the following:"", ""There is a little trick to pass an object by reference, even though the language doesn't make it possible. It works in Java too, it's the list with one item. ;-)"", ""I used the following method to quickly convert a couple of Fortran codes to Python.  True, it's not pass by reference as the original question was posed, but is a simple work around in some cases."", 'given the way python handles values and references to them, the only way you can reference an arbitrary instance attribute is by name:', 'Since dictionaries are passed by reference, you can use a dict variable to store any referenced values inside it.', 'Since it seems to be nowhere mentioned an approach to simulate references as known from e.g. C++ is to use an ""update"" function and pass that instead of the actual variable (or rather, ""name""):', 'Pass-By-Reference in Python is quite different from the concept of pass by reference in C++/Java.', 'While pass by reference is nothing that fits well into python and should be rarely used there are some workarounds that actually can work to get the object currently assigned to a local variable or even reassign a local variable from inside of a called function.', 'Since your example happens to be object-oriented, you could make the following change to achieve a similar result:', 'You can merely use an empty class as an instance to store reference objects because internally object attributes are stored in an instance dictionary. See the example.', 'I am new to Python, started yesterday (though I have been programming for 45 years).']"
27,How do I concatenate two lists in Python?,"How do I concatenate two lists in Python?

Example:

listone = [1, 2, 3]
listtwo = [4, 5, 6]
Expected outcome:

>>> joinedlist
[1, 2, 3, 4, 5, 6]",https://stackoverflow.com/questions/1720421/how-do-i-concatenate-two-lists-in-python,"['How do I concatenate two lists in Python?', 'You can use the + operator to combine them:', ""It's also possible to create a generator that simply iterates over the items in both lists using itertools.chain(). This allows you to chain lists (or any iterable) together for processing without copying the items to a new list:"", 'Python >= 3.5 alternative: [*l1, *l2]', 'You can use sets to obtain merged list of unique values', 'You could also use the list.extend() method in order to add a list to the end of another one:', 'As of 3.9, these are the most popular stdlib methods for concatenating two (or more) lists in python.', 'This is quite simple, and I think it was even shown in the tutorial:', ""This question directly asks about joining two lists. However it's pretty high in search even when you are looking for a way of joining many lists (including the case when you joining zero lists)."", 'You could simply use the + or += operator as follows:', ""It's worth noting that the itertools.chain function accepts variable number of arguments:"", 'With Python 3.3+ you can use yield from:', 'If you want to merge the two lists in sorted form, you can use the merge function from the heapq library.', ""If you can't use the plus operator (+),  you can use the operator import:"", 'For cases with a low number of lists you can simply add the lists together or use in-place unpacking (available in Python-3.5+):', 'If you need to merge two ordered lists with complicated sorting rules, you might have to roll it yourself like in the following code (using a simple sorting rule for readability :-) ).', 'You could use the append() method defined on list objects:', 'The above code, does not preserve order, removes duplicate from each list (but not from the concatenated list)', 'As already pointed out by many, itertools.chain() is the way to go if one needs to apply exactly the same treatment to both lists. In my case, I had a label and a flag which were different from one list to the other, so I needed something slightly more complex. As it turns out, behind the scenes itertools.chain() simply does the following:', 'Use a simple list comprehension:', 'A really concise way to combine a list of lists is', 'If you are using NumPy, you can concatenate two arrays of compatible dimensions with this command:', 'So there are two easy ways.', 'OUTPUT:', 'Output:']"
28,“Least Astonishment” and the Mutable Default Argument,"Anyone tinkering with Python long enough has been bitten (or torn to pieces) by the following issue:

def foo(a=[]):
    a.append(5)
    return a
Python novices would expect this function to always ...",https://stackoverflow.com/questions/1132941/least-astonishment-and-the-mutable-default-argument,"['Anyone tinkering with Python long enough has been bitten (or torn to pieces) by the following issue:', 'Actually, this is not a design flaw, and it is not because of internals, or performance.\nIt comes simply from the fact that functions in Python are first-class objects, and not only a piece of code.', 'Suppose you have the following code', 'The relevant part of the documentation:', ""I know nothing about the Python interpreter inner workings (and I'm not an expert in compilers and interpreters either) so don't blame me if I propose anything unsensible or impossible."", 'Well, the reason is quite simply that bindings are done when code is executed, and the function definition is executed, well... when the functions is defined.', ""I'm really surprised no one has performed the insightful introspection offered by Python (2 and 3 apply) on callables."", ""I used to think that creating the objects at runtime would be the better approach.  I'm less certain now, since you do lose some useful features, though it may be worth it regardless simply to prevent newbie confusion.  The disadvantages of doing so are:"", 'Simplicity: The behavior is simple in the following sense:\nMost people fall into this trap only once, not several times.', 'This behavior is easy explained by:', ""What you're asking is why this:"", '1)  The so-called problem of ""Mutable Default Argument"" is in general a special example demonstrating that:\n""All functions with this problem suffer also from similar side effect problem on the actual parameter,""\nThat is against the rules of functional programming, usually undesiderable and should be fixed both together.', 'This actually has nothing to do with default values, other than that it often comes up as an unexpected behaviour when you write functions with mutable default values.', ""Already busy topic, but from what I read here, the following helped me realizing how it's working internally:"", ""It's a performance optimization.  As a result of this functionality, which of these two function calls do you think is faster?"", 'Default arguments get evaluated at the time the function is compiled into a function object. When used by the function, multiple times by that function, they are and remain the same object.', 'The shortest answer would probably be ""definition is execution"", therefore the whole argument makes no strict sense. As a more contrived example, you may cite this:', 'A simple workaround using None', 'This behavior is not surprising if you take the following into consideration:', 'I am going to demonstrate an alternative structure to pass a default list value to a function (it works equally well with dictionaries).', 'The solutions here are:', 'You can get round this by replacing the object (and therefore the tie with the scope):', 'When we do this:', 'I sometimes exploit this behavior as an alternative to the following pattern:', 'It may be true that:', 'This is not a design flaw. Anyone who trips over this is doing something wrong.', 'This ""bug"" gave me a lot of overtime work hours! But I\'m beginning to see a potential use of it (but I would have liked it to be at the execution time, still)', 'Just change the function to be:', 'I think the answer to this question lies in how python pass data to parameter (pass by value or by reference), not mutability or how python handle the ""def"" statement.', 'TLDR: Define-time defaults are consistent and strictly more expressive.', ""Every other answer explains why this is actually a nice and desired behavior, or why you shouldn't be needing this anyway. Mine is for those stubborn ones who want to exercise their right to bend the language to their will, not the other way around.""]"
29,List changes unexpectedly after assignment. How do I clone or copy it to prevent this?,"While using new_list = my_list, any modifications to new_list changes my_list everytime. Why is this, and how can I clone or copy the list to prevent it?",https://stackoverflow.com/questions/2612802/list-changes-unexpectedly-after-assignment-how-do-i-clone-or-copy-it-to-prevent,"['While using new_list = my_list, any modifications to new_list changes my_list everytime. Why is this, and how can I clone or copy the list to prevent it?', ""With new_list = my_list, you don't actually have two lists. The assignment just copies the reference to the list, not the actual list, so both new_list and my_list refer to the same list after the assignment."", ""Felix already provided an excellent answer, but I thought I'd do a speed comparison of the various methods:"", ""I've been told that Python 3.3+ adds list.copy() method, which should be as fast as slicing:"", 'In Python 3, a shallow copy can be made with:', ""There are many answers already that tell you how to make a proper copy, but none of them say why your original 'copy' failed."", ""Let's start from the beginning and explore this question."", 'Use thing[:]', 'Here are the timing results using Python 3.6.8. Keep in mind these times are relative to one another, not absolute.', ""Python's idiom for doing this is newList = oldList[:]"", 'All of the other contributors gave great answers, which work when you have a single dimension (leveled) list, however of the methods mentioned so far, only copy.deepcopy() works to clone/copy a list and not have it point to the nested list objects when you are working with multidimensional, nested lists (list of lists). While Felix Kling refers to it in his answer, there is a little bit more to the issue and possibly a workaround using built-ins that might prove a faster alternative to deepcopy.', ""It surprises me that this hasn't been mentioned yet, so for the sake of completeness..."", 'A very simple approach independent of python version was missing in already given answers which you can use most of the time (at least I do):', 'Note that there are some cases where if you have defined your own custom class and you want to keep the attributes then you should use copy.copy() or copy.deepcopy() rather than the alternatives, for example in Python 3:', ""new_list = my_list\nTry to understand this. Let's say that my_list is in the heap memory at location X i.e. my_list is pointing to the X. Now by assigning new_list = my_list you're Letting new_list pointing to the X. This is known as shallow Copy."", ""I wanted to post something a bit different then some of the other answers. Even though this is most likely not the most understandable, or fastest option, it provides a bit of an inside view of how deep copy works, as well as being another alternative option for deep copying. It doesn't really matter if my function has bugs, since the point of this is to show a way to copy objects like the question answers, but also to use this as a point to explain how deepcopy works at its core."", 'A slight practical perspective to look into memory through id and gc.', 'Remember that in Python when you do:', 'This is because, the line new_list = my_list assigns a new reference to the variable my_list which is new_list\nThis is similar to the C code given below,', 'The deepcopy option is the only method that works for me:', 'There is a simple technique to handle this.', 'There is another way of copying a list that was not listed until now : adding an empty list : l2 = l + [].\nI tested it with Python 3.8 :', 'Python lists are mutable objects.']"
30,How do I copy a file in Python?,"How do I copy a file in Python?

I couldn't find anything under os.",https://stackoverflow.com/questions/123198/how-do-i-copy-a-file-in-python,"['How do I copy a file in Python?', 'shutil has many methods you can use. One of which is:', 'copy2(src,dst) is often more useful than copyfile(src,dst) because:', 'You can use one of the copy functions from the shutil package:', 'In Python, you can copy the files using', 'Copying a file is a relatively straightforward operation as shown by the examples below, but you should instead use the shutil stdlib module for that.', 'Use the shutil module.', ""Directory and File copy example - From Tim Golden's Python Stuff:"", 'Firstly, I made an exhaustive cheatsheet of shutil methods for your reference.', 'For small files and using only python built-ins, you can use the following one-liner:', ""You could use os.system('cp nameoffilegeneratedbyprogram /otherdirectory/')"", 'For large files, what I did was read the file line by line and read each line into an array. Then, once the array reached a certain size, append it to a new file.', 'As of Python 3.5 you can do the following for small files (ie: text files, small jpegs):', 'Open the source file in read mode, and write to destination file in write mode.', 'Python provides in-built functions for easily copying files using the Operating System Shell utilities.']"
31,Check if a given key already exists in a dictionary,"I wanted to test if a key exists in a dictionary before updating the value for the key.
I wrote the following code:

if 'key1' in dict.keys():
  print ""blah""
else:
  print ""boo""
I think this is not ...",https://stackoverflow.com/questions/1602934/check-if-a-given-key-already-exists-in-a-dictionary,"['I wanted to test if a key exists in a dictionary before updating the value for the key.\nI wrote the following code:', 'in is the intended way to test for the existence of a key in a dict.', ""You don't have to call keys:"", 'You can test for the presence of a key in a dictionary, using the in keyword:', 'You can shorten this:', ""For additional info on speed execution of the accepted answer's proposed methods (10m loops):"", 'I would recommend using the setdefault method instead.  It sounds like it will do everything you want.', ""Dictionary in python has a get('key', default) method. So you can just set a default value in case there is no key."", 'What about using EAFP (easier to ask forgiveness than permission):', 'Using ternary operator:', 'The ways in which you can get the results are:', 'you can use the has_key() method:', 'Just an FYI adding to Chris. B (best answer):', 'To get the idea how to do that we first inspect what methods we can call on dictionary. \nHere are the methods:', 'Python dictionary has the method called __contains__. This method will return True if the dictionary has the key else returns False.', 'Sharing one more way of checking if a key exists using boolean operators.', 'You can use for loop to iterate over the dictionary and get the name of key you want to find in the dictionary, after that check if it exist or not using if condition:']"
32,Understanding Python super() with __init__() methods [duplicate],"I'm trying to understand the use of super(). From the looks of it, both child classes can be created, just fine. 

I'm curious to know about the actual difference between the following 2 child classes....",https://stackoverflow.com/questions/576169/understanding-python-super-with-init-methods,"[""I'm trying to understand the use of super(). From the looks of it, both child classes can be created, just fine."", ""super() lets you avoid referring to the base class explicitly, which can be nice. But the main advantage comes with multiple inheritance, where all sorts of fun stuff can happen. See the standard docs on super if you haven't already."", 'The reason we use super is so that child classes that may be using cooperative multiple inheritance will call the correct next parent class function in the Method Resolution Order (MRO).', ""It's been noted that in Python 3.0+ you can use"", 'Super has no side effects', 'Just a heads up... with Python 2.7, and I believe ever since super() was introduced in version 2.2, you can only call super() if one of the parents inherit from a class that eventually inherits object (new-style classes).', ""There isn't, really. super() looks at the next class in the MRO (method resolution order, accessed with cls.__mro__) to call the methods. Just calling the base __init__ calls the base __init__. As it happens, the MRO has exactly one item-- the base. So you're really doing the exact same thing, but in a nicer way with super() (particularly if you get into multiple inheritance later)."", ""The main difference is that ChildA.__init__ will unconditionally call Base.__init__ whereas ChildB.__init__ will call __init__ in whatever class happens to be ChildB ancestor in self's line of ancestors\n(which may differ from what you expect).""]"
33,How can I install pip on Windows?,pip is a replacement for easy_install. But should I install pip using easy_install on Windows? Is there a better way?,https://stackoverflow.com/questions/4750806/how-can-i-install-pip-on-windows,"['pip is a replacement for easy_install. But should I install pip using easy_install on Windows? Is there a better way?', ""Good news! Python 3.4 (released March 2014) and Python 2.7.9 (released December 2014) ship with Pip. This is the best feature of any Python release. It makes the community's wealth of libraries accessible to everyone. Newbies are no longer excluded from using community libraries by the prohibitive difficulty of setup. In shipping with a package manager, Python joins Ruby, Node.js, Haskell, Perl, Go—almost every other contemporary language with a majority open-source community. Thank you, Python."", '-- Outdated -- use distribute, not setuptools as described here. --\n-- Outdated #2 -- use setuptools as distribute is deprecated.', '2014 UPDATE:', '2016+ Update:', 'Python 3.4, which  was released in March 2014, comes with pip included:\nhttp://docs.python.org/3.4/whatsnew/3.4.html\nSo, since the release of Python 3.4, the up-to-date way to install pip on Windows is to just install Python.', 'When I have to use Windows, I use ActivePython, which automatically adds everything to your PATH and includes a package manager called PyPM which provides binary package management making it faster and simpler to install packages.', ""The up-to-date way is to use Windows' package manager Chocolatey."", 'Update March 2015', ""I've built Windows installers for both distribute and pip here (the goal being to use pip without having to either bootstrap with easy_install or save and run Python scripts):"", 'The following works for Python 2.7. Save this script and launch it:  \nhttps://raw.github.com/pypa/pip/master/contrib/get-pip.py  \nPip is installed, then add the path to your environment :', ""For the latest Python download - I have Python 3.6 on Windows. You don't have to wonder. Everything you need is there. Take a breath, and I will show you how to do it."", 'To install pip globally on Python 2.x, easy_install appears to be the best solution as Adrián states.', 'To use pip, it is not mandatory that you need to install pip in the system directly. You can use it through virtualenv. What you can do is follow these steps:', 'I just wanted to add one more solution for those having issues installing setuptools from Windows 64-bit. The issue is discussed in this bug on python.org and is still unresolved as of the date of this comment. A simple workaround is mentioned and it works flawlessly. One registry change did the trick for me.', 'Updated at 2016 : Pip should already be included in Python 2.7.9+ or 3.4+, but if for whatever reason it is not there, you can use the following one-liner.', 'The best way I found so far, is just two lines of code:', 'Here how to install pip the easy way.', 'PythonXY comes with pip included, among others.', 'I use the cross-platform Anaconda package manager from continuum.io on Windows and it is reliable.  It has virtual environment management and a fully featured shell with common utilities (e.g. conda, pip).', ""I had some issues installing in different ways when I followed instructions here. I think it's very tricky to install in every Windows environment in the same way. In my case I need Python 2.6, 2.7 and 3.3 in the same machine for different purposes so that's why I think there're more problems.\nBut the following instructions worked perfectly for me, so might be depending on your environment you should try this one:"", 'Guide link: http://www.pip-installer.org/en/latest/installing.html#install-pip', ""It's very simple:"", 'Working as of Feb 04 2014 :):', ""pip is already installed if you're using Python 2 >= 2.7.9 or Python 3 >= 3.4 binaries downloaded from python.org, but you'll need to upgrade pip."", 'Use CURL to download get-pip.py:', 'If you even have other problems with the pip version, you can try this:', 'Old answer (still valid)', 'Just download setuptools-15.2.zip (md5), from here https://pypi.python.org/pypi/setuptools#windows-simplified , and run ez_setup.py.', 'Alternatively, you can get pip-Win which is an all-in-one installer for pip and virtualenv on Windows and its GUI.', 'Even if I installed Python 3.7, added it to PATH, and checked the checkbox ""Install pip"", pip3.exe or pip.exe was finally not present on the computer (even in the Scripts subfolder).']"
34,Convert bytes to a string,"I'm using this code to get standard output from an external program:

>>> from subprocess import *
>>> command_stdout = Popen(['ls', '-l'], stdout=PIPE).communicate()[0]
The ...",https://stackoverflow.com/questions/606191/convert-bytes-to-a-string,"[""I'm using this code to get standard output from an external program:"", 'You need to decode the bytes object to produce a string:', 'You need to decode the byte string and turn it in to a character (Unicode) string.', 'I think this way is easy:', ""If you don't know the encoding, then to read binary input into string in Python 3 and Python 2 compatible way, use the ancient MS-DOS CP437 encoding:"", 'In Python 3, the default encoding is ""utf-8"", so you can directly use:', 'I think you actually want this:', 'Set universal_newlines to True, i.e.', 'To interpret a byte sequence as a text, you have to know the\ncorresponding character encoding:', ""While @Aaron Maenpaa's answer just works, a user recently asked:"", 'Since this question is actually asking about subprocess output, you have more direct approaches available. The most modern would be using subprocess.check_output and passing text=True (Python 3.7+) to automatically decode stdout using the system default coding:', 'If you should get the following by trying decode():', 'I made a function to clean a list', 'When working with data from Windows systems (with \\r\\n line endings), my answer is', 'For Python 3, this is a much safer and Pythonic approach to convert from byte to string:', 'For your specific case of ""run a shell command and get its output as text instead of bytes"", on Python 3.7, you should use subprocess.run and pass in text=True (as well as capture_output=True to capture the output)', 'From sys — System-specific parameters and functions:', 'If you want to convert any bytes, not just string converted to bytes:', 'try this']"
35,What is __init__.py for?,What is __init__.py for in a Python source directory?,https://stackoverflow.com/questions/448271/what-is-init-py-for,"['What is __init__.py for in a Python source directory?', 'It used to be a required part of a package (old, pre-3.3 ""regular package"", not newer 3.3+ ""namespace package"").', 'Files named __init__.py are used to mark directories on disk as Python package directories.\nIf you have the files', 'In addition to labeling a directory as a Python package and defining __all__, __init__.py allows you to define any variable at the package level. Doing so is often convenient if a package defines something that will be imported frequently, in an API-like fashion. This pattern promotes adherence to the Pythonic ""flat is better than nested"" philosophy.', 'There are 2 main reasons for __init__.py', 'The __init__.py file makes Python treat directories containing it as modules.', 'Since Python 3.3, __init__.py is no longer required to define directories as importable Python packages.', 'Although Python works without an __init__.py file you should still include one.', 'In Python the definition of package is very simple. Like Java the hierarchical structure and the directory structure are the same. But you have to have __init__.py in a package. I will explain the __init__.py file with the example below:', '__init__.py will treat the directory it is in as a loadable module.', 'It facilitates importing other python files. When you placed this file in a directory (say stuff)containing other py files, then you can do something like import stuff.other.', 'An __init__.py file makes imports easy. When an __init__.py is present within a package, function a() can be imported from file b.py like so:', 'One thing __init__.py allows is converting a module to a package without breaking the API or creating extraneous nested namespaces or private modules*. This helps when I want to extend a namespace.']"
36,What does ** (double star/asterisk) and * (star/asterisk) do for parameters?,"In the following method definitions, what does the * and ** do for param2?

def foo(param1, *param2):
def bar(param1, **param2):",https://stackoverflow.com/questions/36901/what-does-double-star-asterisk-and-star-asterisk-do-for-parameters,"['In the following method definitions, what does the * and ** do for param2?', 'The *args and **kwargs is a common idiom to allow arbitrary number of arguments to functions as described in the section more on defining functions in the Python documentation.', ""It's also worth noting that you can use * and ** when calling functions as well. This is a shortcut that allows you to pass multiple arguments to a function directly using either a list/tuple or a dictionary. For example, if you have the following function:"", 'The single * means that there can be any number of extra positional arguments. foo() can be invoked like foo(1,2,3,4,5). In the body of foo() param2 is a sequence containing 2-5.', 'They allow for functions to be defined to accept and for users to pass any number of arguments, positional (*) and keyword (**).', 'Let us first understand what are positional arguments and keyword arguments.\nBelow is an example of function definition with Positional arguments.', 'This table is handy for using * and ** in function construction and function call:', '* and ** have special usage in the function argument list. *\nimplies that the argument is a list and ** implies that the argument\nis a dictionary. This allows functions to take arbitrary number of\narguments', 'Let us show this by defining a function that takes two normal variables x, y, and can accept more arguments as myArgs, and can accept even more arguments as myKW. Later, we will show how to feed y using myArgDict.', 'From the Python documentation:', '* means receive variable arguments as tuple', 'TL;DR', 'In Python 3.5, you can also use this syntax in list, dict, tuple, and set displays (also sometimes called literals). See PEP 488: Additional Unpacking Generalizations.', ""I want to give an example which others haven't  mentioned"", 'In addition to function calls, *args and **kwargs are useful in class hierarchies and also avoid having to write __init__ method in Python. Similar usage can seen in frameworks like Django code.', ""Building on nickd's answer..."", '*args and **kwargs: allow you to pass a variable number of arguments to a function.', 'This example would help you remember *args, **kwargs and even super and inheritance in Python at once.', 'A good example of using both in a function is:', 'It packs arguments passed to the function into list and dict respectively inside the function body. When you define a function signature like this:', 'In addition to the answers in this thread, here is another detail that was not mentioned elsewhere. This expands on the answer by Brad Solomon', 'Given a function that has 3 items as argument', 'I use *args and **kwargs as an argument when I have no doubt about the number of arguments I should pass in a function.', 'For example, the syntax for implementing varargs in Java as follows:']"
37,How do you split a list into evenly sized chunks?,"I have a list of arbitrary length, and I need to split it up into equal size chunks and operate on it. There are some obvious ways to do this, like keeping a counter and two lists, and when the second ...",https://stackoverflow.com/questions/312443/how-do-you-split-a-list-into-evenly-sized-chunks,"['I have a list of arbitrary length, and I need to split it up into equal size chunks and operate on it. There are some obvious ways to do this, like keeping a counter and two lists, and when the second list fills up, add it to the first list and empty the second list for the next round of data, but this is potentially extremely expensive.', ""Here's a generator that yields the chunks you want:"", 'If you want something super simple:', 'Directly from the (old) Python documentation (recipes for itertools):', 'I know this is kind of old but nobody yet mentioned numpy.array_split:', ""I'm surprised nobody has thought of using iter's two-argument form:"", 'Here is a generator that work on arbitrary iterables:', 'Simple yet elegant', ""None of these answers are evenly sized chunks, they all leave a runt chunk at the end, so they're not completely balanced. If you were using these functions to distribute work, you've built-in the prospect of one likely finishing well before the others, so it would sit around doing nothing while the others continued working hard."", 'I saw the most awesome Python-ish answer in a duplicate of this question:', 'If you know list size:', 'If you had a chunk size of 3 for example, you could do:', 'The toolz library has the partition function for this:', 'Where AA is array, SS is chunk size. For example:', ""I like the Python doc's version proposed by tzot and J.F.Sebastian a lot,\n but it has two shortcomings:"", 'With Assignment Expressions in Python 3.8 it becomes quite nice:', 'I was curious about the performance of different approaches and here it is:', 'code:', 'At this point, I think we need a recursive generator, just in case...', 'You may also use get_chunks function of utilspie library as:', 'Another more explicit version.', 'heh, one line version', 'usage:', 'Without calling len() which is good for large lists:', 'Here is a list of additional approaches:', 'See this reference', 'Since everybody here talking about iterators. boltons has perfect method for that, called iterutils.chunked_iter.', 'Consider using matplotlib.cbook pieces']"
38,Manually raising (throwing) an exception in Python,How can I raise an exception in Python so that it can later be caught via an except block?,https://stackoverflow.com/questions/2052390/manually-raising-throwing-an-exception-in-python,"['How can I raise an exception in Python so that it can later be caught via an except block?', 'Use the most specific Exception constructor that semantically fits your issue.', ""DON'T DO THIS. Raising a bare Exception is absolutely not the right thing to do; see Aaron Hall's excellent answer instead."", 'In Python3 there are 4 different syntaxes for rasing exceptions:', 'For the common case where you need to throw an exception in response to some unexpected conditions, and that you never intend to catch, but simply to fail fast to enable you to debug from there if it ever happens — the most logical one seems to be AssertionError:', 'Read the existing answers first, this is just an addendum.', 'Another way to throw an exceptions is assert. You can use assert to verify a condition is being fulfilled if not then it will raise AssertionError. For more details have a look here.', ""Just to note: there are times when you DO want to handle generic exceptions. If you're processing a bunch of files and logging your errors, you might want to catch any error that occurs for a file, log it, and continue processing the rest of the files. In that case, a"", 'You should learn the raise statement of python for that.\nIt should be kept inside the try block.\nExample -']"
39,How do I parse a string to a float or int?,"In Python, how can I parse a numeric string like ""545.2222"" to its corresponding float value, 545.2222? Or parse the string ""31"" to an integer, 31?

I just want to know how to parse a float str to a ...",https://stackoverflow.com/questions/379906/how-do-i-parse-a-string-to-a-float-or-int,"['In Python, how can I parse a numeric string like ""545.2222"" to its corresponding float value, 545.2222? Or parse the string ""31"" to an integer, 31?', 'A longer and more accurate name for this function could be: is_convertible_to_float(value)', 'This is another method which deserves to be mentioned here, ast.literal_eval:', 'You should consider the possibility of commas in the string representation of a number, for cases like  float(""545,545.2222"") which throws an exception. Instead, use methods in locale to convert the strings to numbers and interpret commas correctly. The locale.atof method converts to a float in one step once the locale has been set for the desired number convention.', ""If you aren't averse to third-party modules, you could check out the fastnumbers module. It provides a function called fast_real that does exactly what this question is asking for and does it faster than a pure-Python implementation:"", 'Users codelogic and harley are correct, but keep in mind if you know the string is an integer (for example, 545) you can call int(""545"") without first casting to float.', 'In Python, how can I parse a numeric string like ""545.2222"" to its corresponding float value, 542.2222? Or parse the string ""31"" to an integer, 31?\n  I just want to know how to parse a float string to a float, and (separately) an int string to an int.', 'The question seems a little bit old. But let me suggest a function, parseStr, which makes something similar, that is, returns integer or float and if a given ASCII string cannot be converted to none of them it returns it untouched. The code of course might be adjusted to do only what you want:', 'float(""545.2222"") and int(float(""545.2222""))', 'The YAML parser can help you figure out what datatype your string is. Use yaml.load(), and then you can use type(result) to test for type:', 'I use this function for that', 'You need to take into account rounding to do this properly.', 'I am surprised nobody mentioned regex because sometimes string must be prepared and normalized before casting to number', 'To typecast in python use the constructor funtions of the type, passing the string (or whatever value you are trying to cast) as a parameter.', 'Pass your string to this function:', 'This is a corrected version of \nhttps://stackoverflow.com/a/33017514/5973334', 'Handles hex, octal, binary, decimal, and float', 'Use:', 'Use:', ""This is a function which will convert any object (not just str) to int or float, based on if the actual string supplied looks like int or float. Further if it's an object which has both __float and __int__ methods, it defaults to using __float__"", 'for number and char together :', 'By using int and float methods we can convert a string to integer and floats.', 'Instead of considering eval, following methods can be used to solve the problem', ""Here's another interpretation of your question (hint: it's vague). It's possible you're looking for something like this:""]"
40,Find current directory and file's directory [duplicate],"In Python, what commands can I use to find:
the current directory (where I was in the terminal when I ran the Python script), and
where the file I am executing is?",https://stackoverflow.com/questions/5137497/find-current-directory-and-files-directory,"['In Python, what commands can I use to find:', 'To get the full path to the directory a Python file is contained in, write this in that file:', 'Current Working Directory:  os.getcwd()', 'You may find this useful as a reference:', 'pathlib module, introduced in Python 3.4 (PEP 428 — The pathlib module — object-oriented filesystem paths), makes path-related experience much much better.', '1.To get the current directory full path', 'If you are trying to find the current directory of the file you are currently in:', ""If you're using Python 3.4, there is the brand new higher-level pathlib module which allows you to conveniently call pathlib.Path.cwd() to get a Path object representing your current working directory, along with many other new features."", 'Answer to #1:', 'A bit late to the party, but I think the most succinct way to find just the name of your current execution context would be', 'To get the current directory full path:', 'Pathlib can be used this way to get the directory containing current script :', ""If you're searching for the location of the currently executed script, you can use sys.argv[0] to get the full path."", ""For question 1 use os.getcwd() # get working dir and os.chdir(r'D:\\Steam\\steamapps\\common') # set working dir""]"
41,How to iterate over rows in a DataFrame in Pandas,"I have a DataFrame from Pandas:

import pandas as pd
inp = [{'c1':10, 'c2':100}, {'c1':11,'c2':110}, {'c1':12,'c2':120}]
df = pd.DataFrame(inp)
print df
Output:

   c1   c2
0  10  100
1  11  110
2  ...",https://stackoverflow.com/questions/16476924/how-to-iterate-over-rows-in-a-dataframe-in-pandas,"['I have a DataFrame from Pandas:', 'DataFrame.iterrows is a generator which yields both the index and row (as a Series):', 'Iteration in Pandas is an anti-pattern and is something you should only do when you have exhausted every other option. You should not use any function with ""iter"" in its name for more than a few thousand rows or you will have to get used to a lot of waiting.', 'First consider if you really need to iterate over rows in a DataFrame. See this answer for alternatives.', 'You should use df.iterrows(). Though iterating row-by-row is not especially efficient since Series objects have to be created.', 'While iterrows() is a good option, sometimes itertuples() can be much faster:', 'You can also use df.apply() to iterate over rows and access multiple columns for a function.', 'You can use the df.iloc function as follows:', 'I was looking for How to iterate on rows and columns and ended here so:', 'If you really have to iterate a Pandas dataframe, you will probably want to avoid using iterrows(). There are different methods and the usual iterrows() is far from being the best. itertuples() can be 100 times faster.', 'You can write your own iterator that implements namedtuple', 'To loop all rows in a dataframe you can use:', 'Sometimes a useful pattern is:', 'To loop all rows in a dataframe and use values of each row conveniently, namedtuples can be converted to ndarrays. For example:', 'For both viewing and modifying values, I would use iterrows(). In a for loop and by using tuple unpacking (see the example: i, row), I use the row for only viewing the value and use i with the loc method when I want to modify values. As stated in previous answers, here you should not modify something you are iterating over.', ""There is a way to iterate throw rows while getting a DataFrame in return, and not a Series. I don't see anyone mentioning that you can pass index as a list for the row to be returned as a DataFrame:"", 'cs95 shows that Pandas vectorization far outperforms other Pandas methods for computing stuff with dataframes.', 'There are so many ways to iterate over the rows in Pandas dataframe. One very simple and intuitive way is:', ""You can also do NumPy indexing for even greater speed ups. It's not really iterating but works much better than iteration for certain applications."", 'In short', 'This example uses iloc to isolate each digit in the data frame.', ""Some libraries (e.g. a Java interop library that I use) require values to be passed in a row at a time, for example, if streaming data. To replicate the streaming nature, I 'stream' my dataframe values one by one, I wrote the below, which comes in handy from time to time."", 'Along with the great answers in this post I am going to propose Divide and Conquer approach, I am not writing this answer to abolish the other great answers but to fulfill them with another approach which was working efficiently for me. It has two steps of splitting and merging the pandas dataframe:', 'The easiest way, use the apply function']"
42,How to delete a file or folder?,How do I delete a file or folder in Python?,https://stackoverflow.com/questions/6996603/how-to-delete-a-file-or-folder,"['How do I delete a file or folder in Python?', 'os.remove() removes a file.', 'Or', 'Use', 'Here is a robust function that uses both os.remove and shutil.rmtree:', 'You can use the built-in pathlib module (requires Python 3.4+, but there are backports for older versions on PyPI: pathlib, pathlib2).', 'For Python 3, to remove the file and directory individually, use the unlink and rmdir Path object methods respectively:', 'shutil.rmtree is the asynchronous function, \nso if you want to check when it complete, you can use while...loop', 'or', 'To remove all files in folder', ""To avoid the TOCTOU issue highlighted by Éric Araujo's comment, you can catch an exception to call the correct method:"", 'My personal preference is to work with pathlib objects - it offers a more pythonic and less error-prone way to interact with the filesystem, especially if You develop cross-platform code.', 'I recommend using subprocess if writing a beautiful and readable code is your cup of tea:']"
43,How to access environment variable values?,I set an environment variable that I want to access in my Python application.  How do I get its value?,https://stackoverflow.com/questions/4906977/how-to-access-environment-variable-values,"['I set an environment variable that I want to access in my Python application.  How do I get its value?', 'Environment variables are accessed through os.environ', 'To check if the key exists (returns True or False)', 'The original question (first part) was ""how to check environment variables in Python.""', 'You can access to the environment variables using', 'Actually it can be done this away:', 'As for the environment variables:', 'That will print all of the environment variables along with their values.', 'If you are planning to use the code in a production web application code,\nusing any web framework like Django/Flask, use projects like envparse,  using it you can read the value as your defined type.', ""There's also a number of great libraries. Envs for example will allow you to parse objects out of your environment variables, which is rad. For example:"", 'You can also try this', 'For django see (https://github.com/joke2k/django-environ)', '.env File']"
44,How to print colored text in Python?,How can I output colored text to the terminal in Python?,https://stackoverflow.com/questions/287871/how-to-print-colored-text-in-python,"['How can I output colored text to the terminal in Python?', ""This somewhat depends on what platform you are on. The most common way to do this is by printing ANSI escape sequences. For a simple example, here's some python code from the blender build scripts:"", ""I'm surprised no one has mentioned the Python termcolor module. Usage is pretty simple:"", 'The answer is Colorama for all cross-platform coloring in Python.', ""Print a string that starts a color/style, then the string, then end the color/style change with '\\x1b[0m':"", 'Define a string that starts a color and a string that ends the color, then print your text with the start string at the front and the end string at the end.', ""You want to learn about ANSI escape sequences. Here's a brief example:"", ""I'm responding because I have found out a way to use ANSI codes on Windows 10, so that you can change the colour of text without any modules that aren't built in:"", 'My favorite way is with the Blessings library (full disclosure: I wrote it). For example:', ""sty is similar to colorama, but it's less verbose, supports 8bit and 24bit (rgb) colors, allows you to register your own styles, supports muting, is really flexible, well documented and more."", 'generated a class with all the colors using a for loop to iterate every combination of color up to 100, then wrote a class with python colors. Copy and paste as you will, GPLv2 by me:', 'Try this simple code', ""On Windows you can use module 'win32console' (available in some Python distributions) or module 'ctypes' (Python 2.5 and up) to access the Win32 API."", '', 'I have wrapped @joeld answer into a module with global functions that I can use anywhere in my code.', 'I know that I am late. But, I have a library called colorit. It is super simple.', 'Try online', ""Stupidly simple based on @joeld's answer"", ""For Windows you cannot print to console with colors unless you're using the win32api."", 'I ended up doing this, I felt it was cleanest:', 'Building on @joeld answer, using https://pypi.python.org/pypi/lazyme pip install -U lazyme :', 'You could use CLINT:', 'note how well the with keyword mixes with modifiers like these that need to be reset (using Python 3 and Colorama):', 'You can use the Python implementation of the curses library:\nhttp://docs.python.org/library/curses.html', 'If you are programming a game perhaps you would like to change the background color and use only spaces? For example:', 'If you are using Windows, then here you go!', 'If you are using Django', ""Here's a curses example:"", 'https://raw.github.com/fabric/fabric/master/fabric/colors.py', 'while i find this answer useful, i modified it a bit. this Github Gist is the result', 'asciimatics provides a portable support for building text UI and animations:']"
45,Converting string into datetime,"I've got a huge list of date-times like this as strings:

Jun 1 2005  1:33PM
Aug 28 1999 12:00AM
I'm going to be shoving these back into proper datetime fields in a database so I need to magic them ...",https://stackoverflow.com/questions/466345/converting-string-into-datetime,"[""I've got a huge list of date-times like this as strings:"", 'datetime.strptime is the main routine for parsing strings into datetimes. It can handle all sorts of formats, with the format determined by a format string you give it:', 'Use the third party dateutil library:', 'Check out strptime in the time module.  It is the inverse of strftime.', 'I have put together a project that can convert some really neat expressions. Check out timestring.', ""Remember this and you didn't need to get confused in datetime conversion again."", 'In Python >= 3.7.0,', 'Many timestamps have an implied timezone. To ensure that your code will work in every timezone, you should use UTC internally and attach a timezone each time a foreign object enters the system.', 'Here are two solutions using Pandas to convert dates formatted as strings into datetime.date objects.', ""I personally like the solution using the parser module, which is the second Answer to this question and is beautiful, as you don't have to construct any string literals to get it working. BUT, one downside is that it is 90% slower than the accepted answer with strptime."", ""Something that isn't mentioned here and is useful: adding a suffix to the day. I decoupled the suffix logic so you can use it for any number you like, not just dates."", 'Django Timezone aware datetime object example.', 'It would do the helpful for converting string to datetime and also with time zone', 'Create a small utility function like:', 'arrow offers many useful functions for dates and times. This bit of code provides an answer to the question and shows that arrow is also capable of formatting dates easily and displaying information for other locales.', 'You can use easy_date to make it easy:', 'If you want only date format then you can manually convert it by passing your individual fields like:', 'You can also check out dateparser', 'See my answer.', 'it shows ""Start Date Time"" Column and ""Last Login Time"" both are ""object = strings"" in data-frame', 'If your string is in ISO8601 format and you have Python 3.7+ you can use the following simple code:', 'It seems using pandas Timestamp is the fastest']"
46,How do you change the size of figures drawn with matplotlib?,How do you change the size of figure drawn with matplotlib?,https://stackoverflow.com/questions/332289/how-do-you-change-the-size-of-figures-drawn-with-matplotlib,"['How do you change the size of figure drawn with matplotlib?', 'figure tells you the call signature:', ""If you've already got the figure created you can quickly do this:"", 'Deprecation note:\n  As per the official Matplotlib guide, usage of the pylab module is no longer recommended. Please consider using the matplotlib.pyplot module instead, as described by this other answer.', 'There is also this workaround in case you want to change the size without using the figure environment. So in case you are using plt.plot() for example, you can set a tuple with width and height.', 'Please try a simple code as following:', ""In case you're looking for a way to change the figure size in Pandas, you could do e.g.:"", ""The first link in Google for 'matplotlib figure size' is AdjustingImageSize (Google cache of the page)."", 'You can also use:', 'You can simply use (from matplotlib.figure.Figure):', 'Try commenting out the fig = ... line', 'This works well for me:', 'To increase size of your figure N times you need to insert this just before your pl.show():', ""Since Matplotlib isn't able to use the metric system natively, if you want to specify the size of your figure in a reasonable unit of length such as centimeters, you can do the following (code from gns-ank):"", 'This resizes the figure immediately even after the figure has been drawn (at least using Qt4Agg/TkAgg - but not MacOSX - with matplotlib 1.4.0):', ""Generalizing and simplifying psihodelia's answer.\nIf you want to change the current size of the figure by a factor sizefactor"", 'Another option, to use the rc() function in matplotlib (the unit is inch)', 'I always use the following pattern:', 'You directly change the figure size by using']"
47,How do I get a substring of a string in Python?,"Is there a way to substring a string in Python, to get a new string from the third character to the end of the string?

Maybe like myString[2:end]?

If leaving the second part means 'till the end', ...",https://stackoverflow.com/questions/663171/how-do-i-get-a-substring-of-a-string-in-python,"['Is there a way to substring a string in Python, to get a new string from the third character to the end of the string?', 'Python calls this concept ""slicing"" and it works on more than just strings. Take a look here for a comprehensive introduction.', 'Just for completeness as nobody else has mentioned it.  The third parameter to an array slice is a step.  So reversing a string is as simple as:', 'Substr() normally (i.e. PHP and Perl) works this way:', 'A common way to achieve this is by string slicing.', 'One example seems to be missing here: full (shallow) copy.', 'Is there a way to substring a string in Python, to get a new string from the 3rd character to the end of the string?', 'You\'ve got it right there except for ""end"". It\'s called slice notation. Your example should read:', 'If myString contains an account number that begins at offset 6 and has length 9, then you can extract the account number this way: acct = myString[6:][:9].', 'I would like to add two points to the discussion:', ""Maybe I missed it, but I couldn't find a complete answer on this page to the original question(s) because variables are not further discussed here. So I had to go on searching."", ""Well, I got a situation where I needed to translate a PHP script to Python, and it had many usages of substr(string, beginning, LENGTH).\nIf I chose Python's string[beginning:end] I'd have to calculate a lot of end indexes, so the easier way was to use string[beginning:][:length], it saved me a lot of trouble."", 'Using hardcoded indexes itself can be a mess.', 'In the above code, [:-1] declares to print from the starting till the maximum limit-1.']"
48,Why is “1000000000000000 in range(1000000000000001)” so fast in Python 3?,"It is my understanding that the range() function, which is actually an object type in Python 3, generates its contents on the fly, similar to a generator. 

This being the case, I would have expected ...",https://stackoverflow.com/questions/30081275/why-is-1000000000000000-in-range1000000000000001-so-fast-in-python-3,"['It is my understanding that the range() function, which is actually an object type in Python 3, generates its contents on the fly, similar to a generator.', ""The Python 3 range() object doesn't produce numbers immediately; it is a smart sequence object that produces numbers on demand. All it contains is your start, stop and step values, then as you iterate over the object the next integer is calculated each iteration."", ""The fundamental misunderstanding here is in thinking that range is a generator. It's not. In fact, it's not any kind of iterator."", 'Use the source, Luke!', 'To add to Martijn’s answer, this is the relevant part of the source (in C, as the range object is written in native code):', ""If you're wondering why this optimization was added to range.__contains__, and why it wasn't added to xrange.__contains__ in 2.7:"", ""The other answers explained it well already, but I'd like to offer another experiment illustrating the nature of range objects:"", ""It's all about a lazy approach to the evaluation and some extra optimization of range.\nValues in ranges don't need to be computed until real use, or even further due to extra optimization."", 'The object returned by range() is actually a range object. This object implements the iterator interface so you can iterate over its values sequentially, just like a generator, list, or tuple.', 'Take an example, 997 is in range(4, 1000, 3) because:', 'Try x-1 in (i for i in range(x)) for large x values, which uses a generator comprehension to avoid invoking the range.__contains__ optimisation.', 'TLDR;\nrange is an arithmetic series so it can very easily calculate whether the object is there.It could even get the index of it if it were list like really quickly.']"
49,How to select rows from a DataFrame based on column values,"How can I select rows from a DataFrame based on values in some column in Pandas?
In SQL, I would use:
SELECT *
FROM table
WHERE colume_name = some_value

I tried to look at Pandas' documentation, but ...",https://stackoverflow.com/questions/17071871/how-to-select-rows-from-a-dataframe-based-on-column-values,"['How can I select rows from a DataFrame based on values in some column in Pandas?', 'To select rows whose column value equals a scalar, some_value, use ==:', 'There are several ways to select rows from a Pandas data frame:', 'The Pandas equivalent to', ""I find the syntax of the previous answers to be redundant and difficult to remember. Pandas introduced the query() method in v0.13 and I much prefer it. For your question, you could do df.query('col == val')"", 'August 2019 updated answer', 'Faster results can be achieved using numpy.where.', 'Here is a simple example', 'For selecting only specific columns out of multiple columns for a given value in Pandas:', ""To append to this famous question (though a bit too late): You can also do df.groupby('column_name').get_group('column_desired_value').reset_index() to make a new data frame with specified column having a particular value. E.g."", 'You can also use .apply:']"
50,How to upgrade all Python packages with pip,"Is it possible to upgrade all Python packages at one time with pip?
Note: that there is a feature request for this on the official issue tracker.",https://stackoverflow.com/questions/2720014/how-to-upgrade-all-python-packages-with-pip,"['Is it possible to upgrade all Python packages at one time with pip?', ""There isn't a built-in flag yet, but you can use"", 'You can use the following Python code. Unlike pip freeze, this will not print warnings and FIXME errors.\nFor pip < 10.0.1', 'To upgrade all local packages; you could use pip-review:', ""The following works on Windows and should be good for others too ($ is whatever directory you're in, in the command prompt. For example, C:/Users/Username)."", ""pipupgrade helps you upgrade your system, local or packages from a requirements.txt file! It also selectively upgrades packages that don't break change."", 'Windows version after consulting the excellent documentation for FOR by Rob van der Woude:', 'This option seems to me more straightforward and readable:', 'You can just print the packages that are outdated:', 'The following one-liner might prove of help:', 'More Robust Solution', 'This seems more concise.', 'I had the same problem with upgrading. Thing is, I never upgrade all packages. I upgrade only what I need, because project may break.', 'From https://github.com/cakebread/yolk:', ""One-liner version of Ramana's answer."", 'The simplest and fastest solution that I found in the pip issue discussion is:', 'When using a virtualenv and if you just want to upgrade packages added to your virtualenv, you may want to do:', 'Use AWK update packages:', 'You can try this:', 'The rather amazing yolk makes this easy.', 'The pip_upgrade_outdated does the job. According to its documentation:', ""Ramana's answer worked the best for me, of those here, but I had to add a few catches:"", 'The shortest and easiest on Windows.', 'Sent through a pull-request to the pip folks; in the meantime use this pip library solution I wrote:', 'This seemed to work for me...', 'This is a PowerShell solution for Python 3:', 'This ought to be more effective:', 'Use:', 'A pure Bash/Z shell one-liner for achieving that:', 'My script:']"
51,How do I lowercase a string in Python?,"Is there a way to convert a string from uppercase, or even part uppercase to lowercase? 

For example, ""Kilometers"" → ""kilometers"".",https://stackoverflow.com/questions/6797984/how-do-i-lowercase-a-string-in-python,"['Is there a way to convert a string from uppercase, or even part uppercase to lowercase?', 'Use .lower() - For example:', 'Is there any way to convert an entire user inputted string from uppercase, or even part uppercase to lowercase?', ""With Python 2, this doesn't work for non-English words in UTF-8. In this case decode('utf-8') can help:"", 'Also, you can overwrite some variables:', ""Don't try this, totally un-recommend, don't do this:""]"
52,Is there a way to run Python on Android?,"We are working on an S60 version and this platform has a nice Python API..

However, there is nothing official about Python on Android, but since Jython exists, is there a way to let the snake and the ...",https://stackoverflow.com/questions/101754/is-there-a-way-to-run-python-on-android,"['We are working on an S60 version and this platform has a nice Python API..', 'One way is to use Kivy:', 'There is also the new Android Scripting Environment (ASE/SL4A) project. It looks awesome, and it has some integration with native Android components.', 'Yes! : Android Scripting Environment', 'Pygame is a 2D game engine for Python (on desktop) that is popular with new programmers. The Pygame Subset for Android describes itself as...', 'SL4A does what you want. You can easily install it directly onto your device from their site, and do not need root.', 'My blog has instructions and a patch for cross compiling Python 2.7.2 for Android.', ""As a Python lover and Android programmer, I'm sad to say this is not a good way to go. There are two problems:"", 'I wanted to add to what @JohnMudd has written about Kivy. It has been years since the situation he described, and Kivy has evolved substantially.', 'You can use the Termux app, which provides a POSIX environment for Android, to install Python.', ""Not at the moment and you would be lucky to get Jython to work soon. If you're planning to start your development now you would be better off with just sticking to Java for now on."", ""Using SL4A (which has already been mentioned by itself in other answers) you can run a full-blown web2py instance (other python web frameworks are likely candidates as well).  SL4A doesn't allow you to do native UI components (buttons, scroll bars, and the like), but it does support WebViews.  A WebView is basically nothing more than a striped down web browser pointed at a fixed address. I believe the native Gmail app uses a WebView instead of going the regular widget route."", ""I use the QPython app. It's free and includes a code editor, an interactive interpreter and a package manager, allowing you to create and execute Python programs directly on your device."", 'From the Python for android site:', ""Chaquopy is a plugin for Android Studio's Gradle-based build system. It focuses on close integration with the standard Android development tools."", 'Yet another attempt: https://code.google.com/p/android-python27/', 'Here are some tools listed in official python website', 'You can run your Python code using sl4a. sl4a supports Python, Perl, JRuby, Lua, BeanShell, JavaScript, Tcl, and shell script.', 'You can use QPython:', 'Another option if you are looking for 3.4.2 or 3.5.1 is this archive on GitHub.', ""Didn't see this posted here, but you can do it with Pyside and Qt now that Qt works on Android thanks to Necessitas."", 'One more option seems to be pyqtdeploy which citing the docs is:', 'Take a look at BeeWare. It has grown significantly. It is awarded with PSF (Python Software Foundation) Education Grant.', 'Check out enaml-native which takes the react-native concept and applies it to python.']"
53,How to read a file line-by-line into a list?,"How do I read every line of a file in Python and store each line as an element in a list? 

I want to read the file line by line and append each line to the end of the list.",https://stackoverflow.com/questions/3277503/how-to-read-a-file-line-by-line-into-a-list,"['How do I read every line of a file in Python and store each line as an element in a list?', 'See Input and Ouput:', 'This is more explicit than necessary, but does what you want.', 'This will yield an ""array"" of lines from the file.', 'If you want the \\n included:', ""According to Python's Methods of File Objects, the simplest way to convert a text file into a list is:"", 'You could simply do the following, as has been suggested:', 'Data into list', 'To read a file into a list you need to do three things:', 'Clean and Pythonic Way of Reading the Lines of a File Into a List', 'Introduced in Python 3.4, pathlib has a really convenient method for reading in text from files, as follows:', ""Here's one more option by using list comprehensions on files;"", 'Now variable out is a list (array) of what you want. You could either do:', 'Read and write text files with Python 2 and Python 3; it works with Unicode', 'Another option is numpy.genfromtxt, for example:', ""If you'd like to read a file from the command line or from stdin, you can also use the fileinput module:"", 'The simplest way to do it', 'Just use the splitlines() functions. Here is an example.', 'If you want to are faced with a very large / huge file and want to read faster (imagine you are in a Topcoder/Hackerrank coding competition), you might read a considerably bigger chunk of lines into a memory buffer at one time, rather than just iterate line by line at file level.', 'or', 'Use this:', 'With a filename, handling the file from a Path(filename) object, or directly with open(filename) as f, do one of the following:', 'In case that there are also empty lines in the document I like to read in the content and pass it through filter to prevent empty string elements', 'You could also use the loadtxt command in NumPy. This checks for fewer conditions than genfromtxt, so it may be faster.', 'I like to use the following. Reading the lines immediately.', 'I would try one of the below mentioned methods. The example file that I use has the name dummy.txt. You can find the file here. I presume, that the file is in the same directory as the code (you can change fpath to include the proper file name and folder path.)', 'Here is a Python(3) helper library class that I use to simplify file I/O:']"
54,How do I sort a list of dictionaries by a value of the dictionary?,"I have a list of dictionaries and want each item to be sorted by a specific value.
Take into consideration the list:
[{'name':'Homer', 'age':39}, {'name':'Bart', 'age':10}]

When sorted by name, it ...",https://stackoverflow.com/questions/72899/how-do-i-sort-a-list-of-dictionaries-by-a-value-of-the-dictionary,"['I have a list of dictionaries and want each item to be sorted by a specific value.', 'It may look cleaner using a key instead a cmp:', ""To sort the list of dictionaries by key='name':"", 'my_list will now be what you want.', 'If you want to sort the list by multiple keys, you can do the following:', ""'key' is used to sort by an arbitrary value and 'itemgetter' sets that value to each item's 'name' attribute."", ""I guess you've meant:"", ""You could use a custom comparison function, or you could pass in a function that calculates a custom sort key. That's usually more efficient as the key is only calculated once per item, while the comparison function would be called many more times."", 'Using the Schwartzian transform from Perl,', 'You have to implement your own comparison function that will compare the dictionaries by values of name keys. See Sorting Mini-HOW TO from PythonInfo Wiki', 'Sometimes we need to use lower(). For example,', 'Here is the alternative general solution - it sorts elements of a dict by keys and values.', 'Using the Pandas package is another method, though its runtime at large scale is much slower than the more traditional methods proposed by others:', ""Let's say I have a dictionary D with the elements below. To sort, just use the key argument in sorted to pass a custom function as below:"", 'If you do not need the original list of dictionaries, you could modify it in-place with sort() method using a custom key function.', 'I have been a big fan of a filter with lambda. However, it is not best option if you consider time complexity.', 'If performance is a concern, I would use operator.itemgetter instead of lambda as built-in functions perform faster than hand-crafted functions. The itemgetter function seems to perform approximately 20% faster than lambda based on my testing.', 'You may also use to sort by second element (x[1])\nof dct_name.items() and call the dict() constructor to get it as a dictionary']"
55,Are static class variables possible in Python?,Is it possible to have static class variables or methods in Python? What syntax is required to do this?,https://stackoverflow.com/questions/68645/are-static-class-variables-possible-in-python,"['Is it possible to have static class variables or methods in Python? What syntax is required to do this?', 'Variables declared inside the class definition, but not inside a method are class or static variables:', '@Blair Conrad said static variables declared inside the class definition, but not inside a method are class or ""static"" variables:', 'As the other answers have noted, static and class methods are easily accomplished using the built-in decorators:', 'You can also add class variables to classes on the fly', 'Personally I would use a classmethod whenever I needed a static method. Mainly because I get the class as an argument.', 'One special thing to note about static properties & instance properties, shown in the example below:', 'Static methods in python are called classmethods. Take a look at the following code', 'When define some member variable outside any member method, the variable can be either static or non-static depending on how the variable is expressed.', 'It is possible to have static class variables, but probably not worth the effort.', 'You could also enforce a class to be static using metaclass.', 'One very interesting point about Python\'s attribute lookup is that it can be used to create ""virtual variables"":', 'Yes, definitely possible to write static variables and methods in python.', ""In regards to this answer, for a constant static variable, you can use a descriptor. Here's an example:"", ""Absolutely Yes,\n  Python by itself don't have any static data member explicitly, but We can have by doing so"", 'To avoid any potential confusion, I would like to contrast static variables and immutable objects.', 'The best way I found is to use another class. You can create an object and then use it on other objects.', 'For anyone using a class factory with python3.6 and up use the nonlocal keyword to add it to the scope / context of the class being created like so:', ""So this is probably a hack, but I've been using eval(str) to obtain an static object, kind of a contradiction, in python 3."", 'You can use a list or a dictionary to get ""static behavior"" between instances.', 'If you are attempting to share a static variable for, by example, increasing it across other instances, something like this script works fine:', 'Put it this way the static variable is created when a user-defined a class come into existence and the define a static variable it should follow the keyword self,']"
56,How do I get the number of elements in a list?,"Consider the following:

items = []
items.append(""apple"")
items.append(""orange"")
items.append(""banana"")

# FAKE METHOD:
items.amount()  # Should return 3
How do I get the number of elements in the ...",https://stackoverflow.com/questions/1712227/how-do-i-get-the-number-of-elements-in-a-list,"['Consider the following:', 'The len() function can be used with several different types in Python - both built-in types and library types. For example:', 'To find the size of a list, use the builtin function, len:', 'While this may not be useful due to the fact that it\'d make a lot more sense as being ""out of the box"" functionality, a fairly simple hack would be to build a class with a length property:', 'Besides len you can also use operator.length_hint (requires Python 3.4+). For a normal list both are equivalent, but length_hint makes it possible to get the length of a list-iterator, which could be useful in certain circumstances:', 'Answering your question as the examples also given previously:', 'And for completeness (primarily educational), it is possible without using the len() function. I would not condone this as a good option DO NOT PROGRAM LIKE THIS IN PYTHON, but it serves a purpose for learning algorithms.', 'There is an inbuilt function called len() in python which will help in these conditions.', 'In terms of how len() actually works, this is its C implementation:', 'I have done this by using functions:']"
57,Renaming columns in pandas,"I have a DataFrame using pandas and column labels that I need to edit to replace the original column labels. 

I'd like to change the column names in a DataFrame A where the original column names are:
...",https://stackoverflow.com/questions/11346283/renaming-columns-in-pandas,"['I have a DataFrame using pandas and column labels that I need to edit to replace the original column labels.', 'Just assign it to the .columns attribute:', 'Use the df.rename() function and refer the columns to be renamed. Not all the columns have to be renamed:', 'The rename method can take a function, for example:', 'As documented in Working with text data:', 'There have been some significant updates to column renaming in version 0.21.', 'Since you only want to remove the $ sign in all column names, you could just do:', 'It will replace the existing names with the names you provide, in the order you provide.', 'This way you can manually edit the new_names as you wish.\nWorks great when you need to rename only a few columns to correct mispellings, accents, remove special characters etc.', 'I would like to explain a bit what happens behind the scenes.', ""I'll focus on two things:"", 'Renaming columns in pandas is an easy task.', ""Let's say this is your dataframe."", ""If you've got the dataframe, df.columns dumps everything into a list you can manipulate and then reassign into your dataframe as the names of columns..."", 'If your new list of columns is in the same order as the existing columns, the assignment is simple:', ""Let's Understand renaming by a small example..."", 'https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.rename.html', ""Another way we could replace the original column labels is by stripping the unwanted characters (here '$') from the original column labels."", 'Real simple just use', 'You could use str.slice for that:', 'I know this question and answer has been chewed to death. But I referred to it for inspiration for one of the problem I was having . I was able to solve it using bits and pieces from different answers hence providing my response in case anyone needs it.', 'Another option is to rename using a regular expression:', 'Note that these approach do not work for a MultiIndex. For a MultiIndex, you need to do something like the following:', 'If you have to deal with loads of columns named by the providing system out of your control, I came up with the following approach that is a combination of a general approach and specific replacments in one go.', 'In addition to the solution already provided, you can replace all the columns while you are reading the file. We can use names and header=0 to do that.', ""Here's a nifty little function I like to use to cut down on typing:"", 'Assuming you can use regular expression. This solution removes the need of manual encoding using regex', ""I needed to rename features for XGBoost, it didn't like any of these:""]"
58,How to remove a key from a Python dictionary?,"When deleting a key from a dictionary, I use:

if 'key' in my_dict:
    del my_dict['key']
Is there a one line way of doing this?",https://stackoverflow.com/questions/11277432/how-to-remove-a-key-from-a-python-dictionary,"['When deleting a key from a dictionary, I use:', 'To delete a key regardless of whether it is in the dictionary, use the two-argument form of dict.pop():', 'Specifically to answer ""is there a one line way of doing this?""', 'It took me some time to figure out what exactly my_dict.pop(""key"", None) is doing. So I\'ll add this as an answer to save others Googling time:', 'del my_dict[key] is slightly faster than my_dict.pop(key) for removing a key from a dictionary when the key exists', 'If you need to remove a lot of keys from a dictionary in one line of code, I think using map() is quite succinct and Pythonic readable:', 'You can use a dictionary comprehension to create a new dictionary with that key removed:', 'Using the ""del"" keyword:', 'We can delete a key from a Python dictionary by the some following approaches.', 'You can use exception handling if you want to be very verbose:', 'Another way is by Using items() + dict comprehension', 'Dictionary data type has  a method called dict_name.pop(item) and this can be used to delete a key:value pair from a dictionary.', 'I prefer the immutable version', 'this will change my_dict in place (mutable)']"
59,How to print without newline or space?,"I'd like to do it in  python. What I'd like to do in this example in c:

In C:

#include <stdio.h>

int main() {
    int i;
    for (i=0; i<10; i++) printf(""."");
    return 0;
}
Output:

.......",https://stackoverflow.com/questions/493386/how-to-print-without-newline-or-space,"[""I'd like to do it in  python. What I'd like to do in this example in c:"", 'In Python 3, you can use the sep= and end= parameters of the print function:', 'It should be as simple as described at this link by Guido Van Rossum:', 'Note: The title of this question used to be something like ""How to printf in python?""', 'Use the python3-style print function for python2.6+   (will also break any existing keyworded print statements in the same file.)', 'How to print on the same line:', 'The new (as of Python 3.x) print function has an optional end parameter that lets you modify the ending character:', 'Using functools.partial to create a new function called printf', ""You can just add , in the end of print function so it won't print on new line."", 'In Python 3+, print is a function. When you call', 'python 2.6+:', 'You can try:', 'You can do the same in python3 as follows :', 'i recently had the same problem..', ""@lenooh satisfied my query. I discovered this article while searching for 'python suppress newline'. I'm using IDLE3 on Raspberry Pi to develop Python 3.2 for PuTTY. I wanted to create a progress bar on the PuTTY command line. I didn't want the page scrolling away. I wanted a horizontal line to re-assure the user from freaking out that the program hasn't cruncxed to a halt nor been sent to lunch on a merry infinite loop - as a plea to 'leave me be, I'm doing fine, but this may take some time.' interactive message - like a progress bar in text."", 'You will notice that all the above answers are correct. But I wanted to make a shortcut to always writing the "" end=\'\' "" parameter in the end.', 'Many of these answers seem a little complicated. In Python 3.x you simply do this:', ""you want to print something in for loop right;but you don't want it print in new line every time..\nfor example:"", 'Or have a function like:', 'There are general two ways to do this:', 'This worked in both 2.7.8 & 2.5.2 (Canopy and OSX terminal, respectively) -- no module imports or time travel required.', 'The above code gives the following output:', '...you do not need to import any library. Just use the delete character:']"
60,Why is reading lines from stdin much slower in C++ than Python?,I wanted to compare reading lines of string input from stdin using Python and C++ and was shocked to see my C++ code run an order of magnitude slower than the equivalent Python code. Since my C++ is ...,https://stackoverflow.com/questions/9371238/why-is-reading-lines-from-stdin-much-slower-in-c-than-python,"[""I wanted to compare reading lines of string input from stdin using Python and C++ and was shocked to see my C++ code run an order of magnitude slower than the equivalent Python code. Since my C++ is rusty and I'm not yet an expert Pythonista, please tell me if I'm doing something wrong or if I'm misunderstanding something."", 'By default, cin is synchronized with stdio, which causes it to avoid any input buffering.  If you add this to the top of your main, you should see much better performance:', ""Just out of curiosity I've taken a look at what happens under the hood, and I've used dtruss/strace on each test."", ""I'm a few years behind here, but:"", 'I reproduced the original result on my computer using g++ on a Mac.', ""getline, stream operators, scanf, can be convenient if you don't care about file loading time or if you are loading small text files. But, if the performance is something you care about, you should really just buffer the entire file into memory (assuming it will fit)."", 'The following code was faster for me than the other code posted here so far:\n(Visual Studio 2013, 64-bit, 500 MB file with line length uniformly in [0, 1000)).', 'By the way, the reason the line count for the C++ version is one greater than the count for the Python version is that the eof flag only gets set when an attempt is made to read beyond eof. So the correct loop would be:', 'In your second example (with scanf()) reason why this is still slower might be because scanf(""%s"") parses string and looks for any space char (space, tab, newline).', 'Well, I see that in your second solution you switched from cin to scanf, which was the first suggestion I was going to make you (cin is sloooooooooooow). Now, if you switch from scanf to fgets, you would see another boost in performance: fgets is the fastest C++ function for string input.', 'A first element of an answer: <iostream> is slow. Damn slow. I get a huge performance boost with scanf as in the below, but it is still two times slower than Python.']"
61,Calling a function of a module by using its name (a string),"What is the best way to go about calling a function given a string with the function's name in a Python program.  For example, let's say that I have a module foo, and I have a string whose content is ""...",https://stackoverflow.com/questions/3061/calling-a-function-of-a-module-by-using-its-name-a-string,"['What is the best way to go about calling a function given a string with the function\'s name in a Python program.  For example, let\'s say that I have a module foo, and I have a string whose content is ""bar"". What is the best way to call foo.bar()?', 'Assuming module foo with method bar:', 'or', ""Patrick's solution is probably the cleanest.\nIf you need to dynamically pick up the module as well, you can import it like:"", 'Just a simple contribution. If the class that we need to instance is in the same file, we can use something like this:', 'Given a string, with a complete python path to a function, this is how I went about getting the result of said function:', 'The best answer according to the Python programming FAQ would be:', 'The answer (I hope) no one ever wanted', ""For what it's worth, if you needed to pass the function (or class) name and app name as a string, then you could do this:"", 'Try this. While this still uses eval, it only uses it to summon the function from the current context. Then, you have the real function to use as you wish.', 'none of what was suggested helped me. I did discover this though.', 'As this question How to dynamically call methods within a class using method-name assignment to a variable [duplicate] marked as a duplicate as this one, I am posting a related answer here:', ""Although getattr() is elegant (and about 7x faster) method, you can get return value from the function (local, class method, module) with eval as elegant as x = eval('foo.bar')(). And when you implement some error handling then quite securely (the same principle can be used for getattr). Example with module import and class:"", 'getattr calls method by name from an object.\nBut this object should be parent of calling class.\nThe parent class can be got by super(self.__class__, self)', ""This is a simple answer, this will allow you to clear the screen for example. There are two examples below, with eval and exec, that will print 0 at the top after cleaning (if you're using Windows, change clear to cls, Linux and Mac users leave as is for example) or just execute it, respectively.""]"
62,Determine the type of an object?,"Is there a simple way to determine if a variable is a list, dictionary, or something else? I am getting an object back that may be either type and I need to be able to tell the difference.",https://stackoverflow.com/questions/2225038/determine-the-type-of-an-object,"['Is there a simple way to determine if a variable is a list, dictionary, or something else? I am getting an object back that may be either type and I need to be able to tell the difference.', 'There are two built-in functions that help you identify the type of an object. You can use type()  if you need the exact type of an object, and isinstance() to check an object’s type against something. Usually, you want to use isistance() most of the times since it is very robust and also supports type inheritance.', 'You can do that using type():', 'It might be more Pythonic to use a try...except block. That way, if you have a class which quacks like a list, or quacks like a dict, it will behave properly regardless of what its type really is.', 'On instances of object you also have the:', 'Determine the type of an object with type', 'You can use type() or isinstance().', ""While the questions is pretty old, I stumbled across this while finding out a proper way myself, and I think it still needs clarifying, at least for Python 2.x (did not check on Python 3, but since the issue arises with classic classes which are gone on such version, it probably doesn't matter)."", 'be careful using isinstance', ""As an aside to the previous answers, it's worth mentioning the existence of collections.abc which contains several abstract base classes (ABCs) that complement duck-typing."", 'In general you can extract a string from object with the class name,', 'In many practical cases instead of using type or isinstance you can also use @functools.singledispatch, which is used to define generic functions (function composed of multiple functions implementing the same operation for different types).', 'type() is a better solution than isinstance(), particularly for booleans:', 'For the sake of completeness, isinstance will not work for type checking of a subtype that is not an instance. While that makes perfect sense, none of the answers (including the accepted one) covers it. Use issubclass for that.']"
63,How to randomly select an item from a list?,"Assume I have the following list:

foo = ['a', 'b', 'c', 'd', 'e']
What is the simplest way to retrieve an item at random from this list?",https://stackoverflow.com/questions/306400/how-to-randomly-select-an-item-from-a-list,"['Assume I have the following list:', 'Use random.choice()', ""If you want to randomly select more than one item from a list, or select an item from a set, I'd recommend using random.sample instead."", 'If you also need the index, use random.randrange', 'As of Python 3.6 you can use the secrets module, which is preferable to the random module for cryptography or security uses.', 'I propose a script for removing randomly picked up items off a list until it is empty:', 'In python 2:', 'numpy solution: numpy.random.choice', 'Assume I have the following list:', 'if you need the index just use:', 'This is the code with a variable that defines the random index:', 'The following code demonstrates if you need to produce the same items. You can also specify how many samples you want to extract.\nThe sample method returns a new list containing elements from the population while leaving the original population unchanged. The resulting list is in selection order so that all sub-slices will also be valid random samples.', 'You could just:', 'Duplicate of https://stackoverflow.com/a/49682832/4383027', 'We can also do this using randint.']"
64,Why is it string.join(list) instead of list.join(string)?,"This has always confused me. It seems like this would be nicer:

my_list = [""Hello"", ""world""]
print(my_list.join(""-""))
# Produce: ""Hello-world""
Than this:

my_list = [""Hello"", ""world""]
print(""-"".join(...",https://stackoverflow.com/questions/493819/why-is-it-string-joinlist-instead-of-list-joinstring,"['This has always confused me. It seems like this would be nicer:', 'It\'s because any iterable can be joined (e.g, list, tuple, dict, set), but its contents and the ""joiner"" must be strings.', 'This was discussed in the String methods... finally thread in the Python-Dev achive, and was accepted by Guido. This thread began in Jun 1999, and str.join was included in Python 1.6 which was released in Sep 2000 (and supported Unicode). Python 2.0 (supported str methods including join) was released in Oct 2000.', 'Because the join() method is in the string class, instead of the list class?', ""I agree that it's counterintuitive at first, but there's a good reason. Join can't be a method of a list because:"", 'This is because join is a ""string"" method! It creates a string from any iterable. If we stuck the method on lists, what about when we have iterables that aren\'t lists?', 'Think of it as the natural orthogonal operation to split.', 'Primarily because the result of a someString.join() is a string.', '- in ""-"".join(my_list) declares that you are converting to a string from joining elements a list.It\'s result-oriented.(just for easy memory and understanding)', 'Both are not nice.', 'The variables my_list and ""-"" are both objects. Specifically, they\'re instances of the classes list and str, respectively. The join function belongs to the class str. Therefore, the syntax ""-"".join(my_list) is used because the object ""-"" is taking my_list as an input.']"
65,Limiting floats to two decimal points,"I want a to be rounded to 13.95.

>>> a
13.949999999999999
>>> round(a, 2)
13.949999999999999
The round function does not work the way I expected.",https://stackoverflow.com/questions/455612/limiting-floats-to-two-decimal-points,"['I want a to be rounded to 13.95.', 'You are running into the old problem with floating point numbers that not all numbers can be represented exactly. The command line is just showing you the full floating point form from memory.', 'There are new format specifications, String Format Specification Mini-Language:', 'The built-in round() works just fine in Python 2.7 or later.', 'I feel that the simplest approach is to use the format() function.', 'Use', ""Most numbers cannot be exactly represented in floats. If you want to round the number because that's what your mathematical formula or algorithm requires, then you want to use round. If you just want to restrict the display to a certain precision, then don't even use round and just format it as that string. (If you want to display it with some alternate rounding method, and there are tons, then you need to mix the two approaches.)"", 'Try the code below:', ""Nobody here seems to have mentioned it yet, so let me give an example in Python 3.6's f-string/template-string format, which I think is beautifully neat:"", 'The rounding problem of input / output has been solved definitively by Python 2.7.0 and 3.1.', 'You can modify the output format:', 'With Python < 3 (e.g. 2.6 or 2.7), there are two ways to do so.', 'You can use format operator for rounding the value up to 2 decimal places in python:', 'In Python 2.7:', 'The Python tutorial has an appendix called Floating Point Arithmetic: Issues and Limitations. Read it. It explains what is happening and why Python is doing its best. It has even an example that matches yours. Let me quote a bit:', 'As @Matt pointed out, Python 3.6 provides f-strings, and they can also use nested parameters:', 'Use combination of Decimal object and round() method.', ""It's doing exactly what you told it to do and is working correctly. Read more about floating point confusion and maybe try decimal objects instead."", 'For fixing the floating point in type-dynamic languages such as Python and JavaScript, I use this technique', 'Results:', '14.5355625', ""It's simple like 1,2,3:"", 'What about a lambda function like this:', 'To round a number to a resolution, the best way is the following one, which can work with any resolution (0.01 for two decimals or even other steps):', 'lambda x,n:int(x*10n+.5)/10n has worked for me for many years in many languages.', ""The answers I saw didn't work with the float(52.15) case. After some tests, there is the solution that I'm using:"", 'We multiple options to do that :\nOption 1:', 'This will return;', ""The method I use is that of string slicing. It's relatively quick and simple.""]"
66,Static methods in Python?,"Is it possible to have static methods in Python which I could call without initializing a class, like:

ClassName.static_method()",https://stackoverflow.com/questions/735975/static-methods-in-python,"['Is it possible to have static methods in Python which I could call without initializing a class, like:', 'Yep, using the staticmethod decorator', 'I think that Steven is actually right. To answer the original question, then, in order to set up a class method, simply assume that the first argument is not going to be a calling instance, and then make sure that you only call the method from the class.', 'Yes, check out the staticmethod decorator:', ""You don't really need to use the @staticmethod decorator. Just declaring a method (that doesn't expect the self parameter) and call it from the class. The decorator is only there in case you want to be able to call it from an instance as well (which was not what you wanted to do)"", 'Static methods in Python?', 'Aside from the particularities of how static method objects behave, there is a certain kind of beauty you can strike with them when it comes to organizing your module-level code.', 'Perhaps the simplest option is just to put those functions outside of the class:', 'So, static methods are the methods which can be called without creating the object of a class.\nFor Example :-', 'I encounter this question from time to time.  The use case and example that I am fond of is:', 'Python Static methods can be created in two ways.']"
67,How to know if an object has an attribute in Python,"Is there a way in Python to determine if an object has some attribute?  For example:

>>> a = SomeClass()
>>> a.someProperty = value
>>> a.property
Traceback (most recent ...",https://stackoverflow.com/questions/610883/how-to-know-if-an-object-has-an-attribute-in-python,"['Is there a way in Python to determine if an object has some attribute?  For example:', 'Try hasattr():', 'As Jarret Hardie answered, hasattr will do the trick.  I would like to add, though, that many in the Python community recommend a strategy of ""easier to ask for forgiveness than permission"" (EAFP) rather than ""look before you leap"" (LBYL).  See these references:', ""You can use hasattr() or catch AttributeError, but if you really just want the value of the attribute with a default if it isn't there, the best option is just to use getattr():"", ""I think what you are looking for is hasattr. However, I'd recommend something like this if you want to detect python properties-"", 'According to pydoc, hasattr(obj, prop) simply calls getattr(obj, prop) and catches exceptions. So, it is just as valid to wrap the attribute access with a try statement and catch AttributeError as it is to use hasattr() beforehand.', 'I would like to suggest avoid this:', 'Hope you expecting hasattr(), but try to avoid hasattr() and please prefer getattr(). getattr() is faster than hasattr()', 'Depending on the situation you can check with isinstance what kind of object you have, and then use the corresponding attributes. With the introduction of abstract base classes in Python 2.6/3.0 this approach has also become much more powerful (basically ABCs allow for a more sophisticated way of duck typing).', 'EDIT:This approach has serious limitation. It should work if the object is an iterable one. Please check the comments below.', ""Here's a very intuitive approach :"", 'This is super simple, just use dir(object)\nThis will return a list of every available function and attribute of the object.', 'Another possible option, but it depends if what you mean by before:', 'hasattr() is the right answer. What I want to add is that hasattr() can also be used well in conjunction with assert (to avoid unnecessary if statements and make the code more readable):', 'You can check whether object contains attribute by using hasattr builtin method.']"
68,How can I remove a trailing newline?,"What is the Python equivalent of Perl's chomp function, which removes the last character of a string if it is a newline?",https://stackoverflow.com/questions/275018/how-can-i-remove-a-trailing-newline,"[""What is the Python equivalent of Perl's chomp function, which removes the last character of a string if it is a newline?"", 'Try the method rstrip() (see doc Python 2 and Python 3)', 'And I would say the ""pythonic"" way to get lines without trailing newline characters is splitlines().', 'The canonical way to strip end-of-line (EOL) characters is to use the string rstrip() method removing any trailing \\r or \\n.  Here are examples for Mac, Windows, and Unix EOL characters.', ""Note that rstrip doesn't act exactly like Perl's chomp() because it doesn't modify the string. That is, in Perl:"", 'I might use something like this:', ""You may use line = line.rstrip('\\n'). This will strip all newlines from the end of the string, not just one."", 'will remove all newlines at the end of the string s. The assignment is needed because rstrip returns a new string instead of modifying the original string.', 'This would replicate exactly perl\'s chomp (minus behavior on arrays) for ""\\n"" line terminator:', 'or you could always get geekier with regexps :)', 'you can use strip:', ""rstrip doesn't do the same thing as chomp, on so many levels. Read http://perldoc.perl.org/functions/chomp.html and see that chomp is very complex indeed."", 'Careful with ""foo"".rstrip(os.linesep): That will only chomp the newline characters for the platform where your Python is being executed. Imagine you\'re chimping the lines of a Windows file under Linux, for instance:', ""An example in Python's documentation simply uses line.strip()."", 'I don\'t program in Python, but I came across an FAQ at python.org advocating S.rstrip(""\\r\\n"") for python 2.2 or later.', ""If your question is to clean up all the line breaks in a multiple line str object (oldstr), you can split it into a list according to the delimiter '\\n' and then join this list into a new str(newstr)."", 'I find it convenient to have be able to get the chomped lines via in iterator, parallel to the way you can get the un-chomped lines from a file object. You can do so with the following code:', 'workaround solution for special case:', ""I'm bubbling up my regular expression based answer from one I posted earlier in the comments of another answer.  I think using re is a clearer more explicit solution to this problem than str.rstrip."", ""It looks like there is not a perfect analog for perl's chomp.  In particular, rstrip cannot handle multi-character newline delimiters like \\r\\n. However, splitlines does as pointed out here.\nFollowing my answer on a different question, you can combine join and splitlines to remove/replace all newlines from a string s:"", 'With regex', 'Just use :', 'There are three types of line endings that we normally encounter: \\n, \\r and \\r\\n. A rather simple regular expression in re.sub, namely r""\\r?\\n?$"", is able to catch them all.', 'If you are concerned about speed (say you have a looong list of strings) and you know the nature of the newline char, string slicing is actually faster than rstrip. A little test to illustrate this:', 'This will work both for windows and linux (bit expensive with re sub if you are looking for only re solution)', 'A catch all:', 'First split lines then join them by any separator you like:']"
69,Replacements for switch statement in Python?,"I want to write a function in Python that returns different fixed values based on the value of an input index.  

In other languages I would use a switch or case statement, but Python does not appear ...",https://stackoverflow.com/questions/60208/replacements-for-switch-statement-in-python,"['I want to write a function in Python that returns different fixed values based on the value of an input index.', 'You could use a dictionary:', ""If you'd like defaults you could use the dictionary get(key[, default]) method:"", ""I've always liked doing it this way"", 'In addition to the dictionary methods (which I really like, BTW), you can also use if-elif-else to obtain the switch/case/default functionality:', 'My favorite Python recipe for switch/case is:', 'Usage:', ""My favorite one is a really nice recipe. You'll really like it. It's the closest one I've seen to actual switch case statements, especially in features."", ""There's a pattern that I learned from Twisted Python code."", ""Let's say you don't want to just return a value, but want to use methods that change something on an object. Using the approach stated here would be:"", ""I'm just going to drop my two cents in here.  The reason there isn't a case/switch statement in Python is because Python follows the principle of 'Theres only one right way to do something'.   So obviously you could come up with various ways of recreating switch/case functionality, but the Pythonic way of accomplishing this is the if/elif construct. ie"", 'Solution to run functions:', 'If you have a complicated case block you can consider using a function dictionary lookup table...', 'If you\'re searching extra-statement, as ""switch"", I built a python module that extends Python. It\'s called ESPY as ""Enhanced Structure for Python"" and it\'s available for both Python 2.x and Python 3.x.', 'expanding on the ""dict as switch"" idea. if you want to use a default value for your switch:', 'Most of the answers here are pretty old, and especially the accepted ones, so it seems worth updating.', 'I found that a common switch structure:', 'The solutions I use:', 'I didn\'t find the simple answer I was looking for anywhere on Google search. But I figured it out anyway. It\'s really quite simple. Decided to post it, and maybe prevent a few less scratches on someone else\'s head. The key is simply ""in"" and tuples. Here is the switch statement behavior with fall-through, including RANDOM fall-through.', ""I liked Mark Bies's answer"", 'Short and easy to read, has a default value and supports expressions in both conditions and return values.', 'you can use a dispatched dict:', 'Simple, not tested; each condition is evaluated independently: there is no fall-through, but all cases are evaluated (although the expression to switch on is only evaluated once), unless there is a break statement. For example,', 'Defining:', 'I think the best way is to use the python language idioms to keep your code testable. As showed in previous answers, I use dictionaries to take advantage of python structures and language and keep the ""case"" code isolated in different methods. Below there is a class, but you can use directly a module, globals and functions. The class has methods that can be tested with isolation.\nDependending to your needs, you can play with static methods and attributes too.', ""Expanding on Greg Hewgill's answer - We can encapsulate the dictionary-solution using a decorator:"", 'I was quite confused after reading the answer, but this cleared it all up:', 'A solution I tend to use which also makes use of dictionaries is :']"
70,How to leave/exit/deactivate a Python virtualenv,"I'm using virtualenv and the virtualenvwrapper. I can switch between virtualenv's just fine using the workon command. 

me@mymachine:~$ workon env1
(env1)me@mymachine:~$ workon env2
(env2)me@mymachine:...",https://stackoverflow.com/questions/990754/how-to-leave-exit-deactivate-a-python-virtualenv,"[""I'm using virtualenv and the virtualenvwrapper. I can switch between virtualenv's just fine using the workon command."", 'Usually, activating a virtualenv gives you a shell function named:', 'Use:', 'I defined an alias, workoff, as the opposite of workon:', 'To activate a Python virtual environment:', 'I found that when within a Miniconda3 environment I had to run:', 'You can use virtualenvwrapper in order to ease the way you work with virtualenv.', 'Since the deactivate function created by sourcing ~/bin/activate cannot be discovered by the usual means of looking for such a command in ~/bin, you may wish to create one that just executes the function deactivate.', 'Use deactivate.', 'I use zsh-autoenv which is based off autoenv.', ""Using the deactivate feature provided by the venv's activate script requires you to trust the deactivation function to be properly coded to cleanly reset all environment variables back to how they were before— taking into account not only the original activation, but also any switches, configuration, or other work you may have done in the meantime."", 'It is very simple, in order to deactivate your virtual env', 'I had the same problem while working on an installer script. I took a look at what the bin/activate_this.py did and reversed it.', 'Simply type the following command on the command line inside the virtual environment:']"
71,How to determine a Python variable's type?,"How do I see the type of a variable whether it is unsigned 32 bit, signed 16 bit, etc.?

How do I view it?",https://stackoverflow.com/questions/402504/how-to-determine-a-python-variables-type,"['How do I see the type of a variable whether it is unsigned 32 bit, signed 16 bit, etc.?', 'Use the type() builtin function:', 'You may be looking for the type() built-in function.', 'It is so simple. You do it like this.', 'So if you have a variable, for example:', 'I also highly recommend the IPython interactive interpreter when dealing with questions like this. It lets you type variable_name? and will return a whole list of information about the object including the type and the doc string for the type.', 'One more way using __class__:', 'Examples of simple type checking in Python:', 'It may be little irrelevant. but you can check types of an object with isinstance(object, type) as mentioned here.', 'The question is somewhat ambiguous -- I\'m not sure what you mean by ""view"". If you are trying to query the type of a native Python object, @atzz\'s answer will steer you in the right direction.', 'Do you mean in Python or using ctypes?', ""Python doesn't have such types as you describe. There are two types used to represent integral values: int, which corresponds to platform's int type in C, and long, which is an arbitrary precision integer (i.e. it grows as needed and doesn't have an upper limit). ints are silently converted to long if an expression produces result which cannot be stored in int."", 'Simple, for python 3.4 and above', ""It really depends on what level you mean. In Python 2.x, there are two integer types, int (constrained to sys.maxint) and long (unlimited precision), for historical reasons. In Python code, this shouldn't make a bit of difference because the interpreter automatically converts to long when a number is too large. If you want to know about the actual data types used in the underlying interpreter, that's implementation dependent. (CPython's are located in Objects/intobject.c and Objects/longobject.c.) To find out about the systems types look at cdleary answer for using the struct module."", 'For python2.x, use', ""Just do not do it. Asking for something's type is wrong in itself. Instead use polymorphism. Find or if necessary define by yourself the method that does what you want for any possible type of input and just call it without asking about anything. If you need to work with built-in types or types defined by a third-party library, you can always inherit from them and use your own derivatives instead. Or you can wrap them inside your own class. This is the object-oriented way to resolve such problems.""]"
72,How do I check if a string is a number (float)?,"What is the best possible way to check if a string can be represented as a number in Python? 

The function I currently have right now is:

def is_number(s):
    try:
        float(s)
        return ...",https://stackoverflow.com/questions/354038/how-do-i-check-if-a-string-is-a-number-float,"['What is the best possible way to check if a string can be represented as a number in Python?', 'Which, not only is ugly and slow', 'In case you are looking for parsing (positive, unsigned) integers instead of floats, you can use the isdigit() function for string objects.', ""TL;DR The best solution is s.replace('.','',1).isdigit()"", ""There is one exception that you may want to take into account: the string 'NaN'"", 'how about this:', 'Which, not only is ugly and slow, seems clunky.', ""Updated after Alfe pointed out you don't need to check for float separately as complex handles both:"", 'For int use this:', 'For strings of non-numbers, try: except: is actually slower than regular expressions.  For strings of valid numbers, regex is slower.  So, the appropriate method depends on your input.', 'In C# there are two different functions that handle parsing of scalar values:', 'I know this is particularly old but I would add an answer I believe covers the information missing from the highest voted answer that could be very valuable to any who find this:', 'This answer provides step by step guide having function with examples to find the string is:', ""Casting to float and catching ValueError is probably the fastest way, since float() is specifically meant for just that. Anything else that requires string parsing (regex, etc) will likely be slower due to the fact that it's not tuned for this operation. My $0.02."", 'You can use Unicode strings, they have a method to do just what you want:', 'So to put it all together, checking for Nan, infinity and complex numbers (it would seem they are specified with j, not i, i.e. 1+2j) it results in:', 'I wanted to see which method is fastest. Overall the best and most consistent results were given by the check_replace function. The fastest results were given by the check_exception function, but only if there was no exception fired - meaning its code is the most efficient, but the overhead of throwing an exception is quite large.', 'The input may be as follows:', ""I did some speed test. Lets say that if the string is likely to be a number the try/except strategy is the fastest possible.If the string is not likely to be a number and you are interested in Integer check, it worths to do some test (isdigit plus heading '-'). \nIf you are interested to check float number, you have to use the try/except code whitout escape."", 'I needed to determine if a string cast into basic types (float,int,str,bool). After not finding anything on the internet I created this:', 'RyanN suggests', 'I think your solution is fine, but there is a correct regexp implementation.', 'This code handles the exponents, floats, and integers, wihtout using regex.', 'str.isnumeric()', ""Here's my simple way of doing it. Let's say that I'm looping through some strings and I want to add them to an array if they turn out to be numbers."", 'I also used the function you mentioned, but soon I notice that strings as ""Nan"", ""Inf"" and it\'s variation are considered as number. So I propose you improved version of your function, that will return false on those type of input and will not fail ""1e3"" variants:', 'User helper function:', 'You can generalize the exception technique in a useful way by returning more useful values than True and False.  For example this function puts quotes round strings but leaves numbers alone.  Which is just what I needed for a quick and dirty filter to make some variable definitions for R.', 'I was working on a problem that led me to this thread, namely how to convert a collection of data to strings and numbers in the most intuitive way.  I realized after reading the original code that what I needed was different in two ways:', 'Try this.']"
73,How do I install pip on macOS or OS X?,"I spent most of the day yesterday searching for a clear answer for installing pip (package manager for Python). I can't find a good solution.

How do I install it?",https://stackoverflow.com/questions/17271319/how-do-i-install-pip-on-macos-or-os-x,"[""I spent most of the day yesterday searching for a clear answer for installing pip (package manager for Python). I can't find a good solution."", 'UPDATE (Jan 2019):', '⚡️ TL;DR — One line solution.', 'You can install it through Homebrew on OS X.  Why would you install Python with Homebrew?', ""I'm surprised no-one has mentioned this - since 2013, python itself is capable of installing pip, no external commands (and no internet connection) required."", 'On Mac:', 'UPDATED 2020 August: MacOs Cataline', 'pip is available on OS X via easy_install.\nOpen a terminal and type:', ""The simplest solution is to follow the installation instruction from pip's home site."", ""For those who have both python2 & python3 installed, here's the solution:"", ""Installing a separate copy of Python is a popular option, even though Python already comes with MacOS. You take on the responsibility to make sure you're using the copy of Python you intend. But, the benefits are having the latest Python release and some protection from hosing your system if things go badly wrong."", 'Download this file: get-pip.py', 'On the recent version (from Yosemite or El Capitan I believe... at least from Sierra onward), you need to run brew postinstall python3 after brew install python3 if you use homebrew.', 'You should install Brew first:', 'If you want ""pip3"" you can do the ff:', 'Then update your PATH to include py27-pip bin directory (you can add this in ~/.bash_profile\nPATH=/opt/local/Library/Frameworks/Python.framework/Versions/2.7/bin:$PATH', 'To install or upgrade pip, download get-pip.py from http://www.pip-installer.org/en/latest/installing.html', 'Install python3 first, then use pip3 to install packages.', 'If you want to install pip without the need for sudo, which is always frustrating when trying to install packages globally, install pip in your local folder /usr/local like this:', 'Download python setup tools from the below website:', ""Somehow easy install doesn't work on my old mac (10.8). This solve my problem."", ""I recommend Anaconda to you. It's the leading open data science platform powered by Python. There are many basic packages installed. Anaconda (conda) comes with its own installation of pip.""]"
74,How do you append to a file in Python?,How do you append to the file instead of overwriting it? Is there a special function that appends to the file?,https://stackoverflow.com/questions/4706499/how-do-you-append-to-a-file-in-python,"['How do you append to the file instead of overwriting it? Is there a special function that appends to the file?', 'You need to open the file in append mode, by setting ""a"" or ""ab"" as the mode. See open().', 'I always do this,', 'Python has many variations off of the main three modes, these three modes are:', 'You probably want to pass ""a"" as the mode argument.  See the docs for open().', 'when we using this line open(filename, ""a""), that a indicates the appending the file, that means allow to insert extra data to the existing file.', 'You can also do it with print instead of write:', 'You can also open the file in r+ mode and then set the file position to the end of the file.', 'if you want to append to a file', ""The 'a' parameter signifies append mode. If you don't want to use with open each time, you can easily write a function to do it for you:"", 'The simplest way to append more text to the end of a file would be to use:', 'If multiple processes are writing to the file, you must use append mode or the data will be scrambled. Append mode will make the operating system put every write, at the end of the file irrespective of where the writer thinks his position in the file is. This is a common issue for multi-process services like nginx or apache where multiple instances of the same process, are writing to the same log\nfile. Consider what happens if you try to seek, then write:', ""Here's my script, which basically counts the number of lines, then appends, then counts them again so you have evidence it worked.""]"
75,How can I print literal curly-brace characters in python string and also use .format on it?,"x = "" \{ Hello \} {0} ""
print(x.format(42))
gives me : Key Error: Hello\\

I want to print the output: {Hello} 42",https://stackoverflow.com/questions/5466451/how-can-i-print-literal-curly-brace-characters-in-python-string-and-also-use-fo,"['gives me : Key Error: Hello\\\\', 'You need to double the {{ and }}:', 'You escape it by doubling the braces.', 'Python 3.6+ (2017)', 'The OP wrote this comment:', 'Try doing this:', 'Try this:', 'Although not any better, just for the reference, you can also do this:', 'If you are going to be doing this a lot, it might be good to define a utility function that will let you use arbitrary brace substitutes instead, like', 'If you need to keep two curly braces in the string, you need 5 curly braces on each side of the variable.', 'I recently ran into this, because I wanted to inject strings into preformatted JSON.\nMy solution was to create a helper method, like this:', ""Reason is , {} is the syntax of .format() so in your case .format() doesn't recognize {Hello} so it threw an error."", 'I stumbled upon this problem when trying to print text, which I can copy paste into a Latex document. I extend on this answer and make use of named replacement fields:', 'If you want to only print one curly brace (for example {) you can use {{, and you can add more braces later in the string if you want. \nFor example:', ""When you're just trying to interpolate code strings I'd suggest using jinja2 which is a full-featured template engine for Python, ie:"", ""You can do this by using raw string method by simply adding character 'r' without quotes before the string."", ""Use escape sequences to escape the curly braces in the f-string. Ex:print(f'{a={1}}')""]"
76,Meaning of @classmethod and @staticmethod for beginner? [duplicate],"Could someone explain to me the meaning of @classmethod and @staticmethod in python? I need to know the difference and the meaning. 

As far as I understand, @classmethod tells a class that it's a ...",https://stackoverflow.com/questions/12179271/meaning-of-classmethod-and-staticmethod-for-beginner,"['Could someone explain to me the meaning of @classmethod and @staticmethod in python? I need to know the difference and the meaning.', ""Though classmethod and staticmethod are quite similar, there's a slight difference in usage for both entities: classmethod must have a reference to a class object as the first parameter, whereas staticmethod can have no parameters at all."", ""Rostyslav Dzinko's answer is very appropriate. I thought I could highlight one other reason you should choose @classmethod over @staticmethod when you are creating an additional constructor."", '@classmethod means: when this method is called, we pass the class as the first argument instead of the instance of that class (as we normally do with methods). This means you can use the class and its properties inside that method rather than a particular instance.', '@staticmethod function is nothing more than a function defined inside a class. It is callable without instantiating the class first. It’s definition is immutable via inheritance.', 'when should I use them, why should I use them, and how should I use them?', 'One would use @classmethod when he/she would want to change the behaviour of the method based on which subclass is calling the method. remember we have a reference to the calling class in a class method.', 'A little compilation', '@classmethod', ""I'm a beginner on this site, I have read all above answers, and got the information what I want. However, I don't have the right to upvote.  So I want to get my start on StackOverflow with the answer as I understand it."", ""A slightly different way to think about it that might be useful for someone... A class method is used in a superclass to define how that method should behave when it's called by different child classes. A static method is used when we want to return the same thing regardless of the child class that we are calling."", 'In short, @classmethod turns a normal method to a factory method.', 'Class method can modify the class state,it bound to the class and it contain cls as parameter.']"
77,How can I count the occurrences of a list item?,"Given an item, how can I count its occurrences in a list in Python?",https://stackoverflow.com/questions/2600191/how-can-i-count-the-occurrences-of-a-list-item,"['Given an item, how can I count its occurrences in a list in Python?', ""If you only want one item's count, use the count method:"", 'Use Counter if you are using Python 2.7 or 3.x and you want the number of occurrences for each element:', 'Counting the occurrences of one item in a list', 'Another way to get the number of occurrences of each item, in a dictionary:', 'list.count(x) returns the number of times x appears in a list', ""Here's an example list:"", 'If you want to count all values at once you can do it very fast using numpy arrays and bincount as follows', ""I've compared all suggested solutions (and a few new ones) with perfplot (a small project of mine)."", 'If you can use pandas, then value_counts is there for rescue.', 'Why not using Pandas?', 'I had this problem today and rolled my own solution before I thought to check SO.  This:', 'Fastest is using a for loop and storing it in a Dict.', 'Antoher possiblity for getting the count of all elements in the list could be by means of itertools.groupby().', ""It was suggested to use numpy's bincount, however it works only for 1d arrays with non-negative integers. Also, the resulting array might be confusing (it contains the occurrences of the integers from min to max of the original list, and sets to 0 the missing integers)."", 'To count the number of diverse elements having a common type:', ""Although it is very old question, but as i didn't find a one liner, i made one."", 'You can also use countOf method of a built-in module operator.', 'May not be the most efficient, requires an extra pass to remove duplicates.', ""I would use filter(), take Lukasz's example:"", 'Given a list X', 'This will return the amount of occurences of your_value', 'if you want a number of occurrences for the particular element:', 'this will recursive count or search for the item in the list even if it in list of lists']"
78,How to remove an element from a list by index,"How do I remove an element from a list by index in Python?

I found the list.remove method, but say I want to remove the last element, how do I do this? It seems like the default remove searches the ...",https://stackoverflow.com/questions/627435/how-to-remove-an-element-from-a-list-by-index,"['How do I remove an element from a list by index in Python?', 'Use del and specify the index of the element you want to delete:', 'You probably want pop:', 'Like others mentioned pop and del are the efficient ways to remove an item of given index. Yet just for the sake of completion (since the same thing can be done via many ways in Python):', 'pop is also useful to remove and keep an item from a list.  Where del actually trashes the item.', ""If you want to remove the specific position element in a list, like the 2th, 3th and 7th. you can't use"", 'Generally, I am using the following method:', 'This depends on what you want to do.', 'Yet another way to remove an element(s) from a list by index.', 'You could just search for the item you want to delete. It is really simple.\nExample:', 'It has already been mentioned how to remove a single element from a list and which advantages the different methods have. Note, however, that removing multiple elements has some potential for errors:', 'Use the following code to remove element from the list:', 'l - list of values; we have to remove indexes from inds2rem list.', 'As previously mentioned, best practice is del(); or pop() if you need to know the value.', 'It doesn\'t sound like you\'re working with a list of lists, so I\'ll keep this short.  You want to use pop since it will remove elements not elements that are lists, you should use del for that.  To call the last element in python it\'s ""-1""', 'Use the del statement:', 'Or if multiple indexes should be removed:', 'You can use either del or pop to remove element from list based on index.  Pop will print member it is removing from list, while list delete that member without printing it.', 'One can either use del or pop, but I prefer del, since you can specify index and slices, giving the user more control over the data.']"
79,Importing files from different folder,"I have the following folder structure.
application
├── app
│   └── folder
│       └── file.py
└── app2
    └── some_folder
        └── some_file.py

I want to import some functions from file.py in ...",https://stackoverflow.com/questions/4383571/importing-files-from-different-folder,"['I have the following folder structure.', 'Note: This answer was intended for a very specific question. For most programmers coming here from a search engine, this is not the answer you are looking for. Typically you would structure your files into packages (see other answers) instead of modifying the search path.', 'Nothing wrong with:', 'When modules are in parallel locations, as in the question:', 'First import sys in name-file.py', 'I think an ad-hoc way would be to use the environment variable PYTHONPATH as described in the documentation: Python2, Python3', 'Your problem is that Python is looking in the Python directory for this file and not finding it. You must specify that you are talking about the directory that you are in and not the Python one.', 'The answers here are lacking in clarity, this is tested on Python 3.6', 'From what I know,  add an __init__.py file directly in the folder of the functions you want  to  import  will do  the job.', ""In Python 3.4 and later, you can import from a source file directly (link to documentation). This is not the simplest solution, but I'm including this answer for completeness."", 'Worked for me in python3 on linux', 'I was faced with the same challenge, especially when importing multiple files, this is how I managed to overcome it.', ""Try Python's relative imports:"", 'Considering application as the root directory for your python project, create an empty __init__.py file in application, app and folder folders. Then in your some_file.py make changes as follows to get the definition of func_name:', ""Using sys.path.append with an absolute path is not ideal when moving the application to other environments. Using a relative path won't always work because the current working directory depends on how the script was invoked."", 'This works for me on windows', 'In my case I had a class to import.  My file looked like this:', ""I'm quite special : I use Python with Windows !"", 'I bumped into the same question several times, so I would like to share my solution.', 'If the purpose of loading a module from a specific path is to assist you during the development of a custom module, you can create a symbolic link in the same folder of the test script that points to the root of the custom module. This module reference will take precedence over any other modules installed of the same name for any script run in that folder.', 'Instead of just doing an import ..., do this :', ""I usually create a symlink to the module I want to import. The symlink makes sure Python interpreter can locate the module inside the current directory (the script you are importing the other module into); later on when your work is over, you can remove the symlink. Also, you should ignore symlinks in .gitignore, so that, you wouldn't accidentally commit symlinked modules to your repo. This approach lets you even successfully work with modules that are located parallel to the script you are executing."", 'The best practice for creating a package can be running and accessing the other modules from a module like main_module.py at highest level directory.', 'I was working on project a that I wanted users to install via pip install a with the following file list:', 'You can use importlib to import modules where you want to import a module from a folder using a string like so:', ""I've had these problems a number of times. I've come to this same page a lot. \nIn my last problem I had to run the server from a fixed directory, but whenever debugging I wanted to run from different sub-directories."", ""You can refresh the Python shell by pressing f5, or go to Run-> Run Module. This way you don't have to change the directory to read something from the file. Python will automatically change the directory. But if you want to work with different files from different directory in the Python Shell, then you can change the directory in sys, as Cameron said earlier."", ""So I had just right clicked on my IDE, and added a new folder and was wondering why I wasn't able to import from it. Later I realized I have to right click and create a Python Package, and not a classic file system folder. Or a post-mortem method being adding an __init__.py (which makes python treat the file system folder as a package) as mentioned in other answers. Adding this answer here just in case someone went this route."", 'If you have multiple folders and sub folders, you can always import any class or module from the main directory.', 'In case anyone still looking for a solution. This worked for me.', 'Just use change dir function from os module:']"
80,How to pad zeroes to a string?,"What is a Pythonic way to pad a numeric string with zeroes to the left, i.e. so the numeric string has a specific length?",https://stackoverflow.com/questions/339007/how-to-pad-zeroes-to-a-string,"['What is a Pythonic way to pad a numeric string with zeroes to the left, i.e. so the numeric string has a specific length?', 'Strings:', 'Just use the rjust method of the string object.', 'Besides zfill, you can use general string formatting:', 'For Python 3.6+ using f-strings:', 'if you want the opposite:', 'str(n).zfill(width) will work with strings, ints, floats... and is Python 2.x and 3.x compatible:', 'For the ones who came here to understand and not just a quick answer.\nI do these especially for time strings:', 'str.zfill is specifically intended to do this:', 'See the print documentation for all the exciting details!', 'When using Python >= 3.6, the cleanest way is to use f-strings with string formatting:', 'For zip codes saved as integers:', 'Quick timing comparison:', ""I am adding how to use a int from a length of a string within an f-string because it didn't appear to be covered:"", 'Another approach would be to use a list comprehension with a condition checking for lengths. Below is a demonstration:', 'Its ok too:', 'I made a function :', 'You could also repeat ""0"", prepend it to str(n) and get the rightmost width slice. Quick and dirty little expression.']"
81,Getting the class name of an instance?,"How do I find out a name of class that created an instance of an object in Python if the function I am doing this from is the base class of which the class of the instance has been derived?

Was ...",https://stackoverflow.com/questions/510972/getting-the-class-name-of-an-instance,"['How do I find out a name of class that created an instance of an object in Python if the function I am doing this from is the base class of which the class of the instance has been derived?', 'Have you tried the __name__ attribute of the class? ie type(x).__name__ will give you the name of the class, which I think is what you want.', 'Do you want the name of the class as a string?', 'type() ?', ""The sample code above (when input in the interactive interpreter) will produce '__main__.A' as opposed to 'A' which is produced if the __name__ attribute is invoked. By simply passing the result of A.__class__ to the str constructor the parsing is handled for you. However, you could also use the following code if you want something more explicit."", 'In Python 2,', 'Good question.', 'Alternatively you can use the classmethod decorator:', 'Apart from grabbing the special __name__ attribute, you might find yourself in need of the qualified name for a given class/function. This is done by grabbing the types __qualname__.', 'To get instance classname:']"
82,Delete an element from a dictionary,"Is there a way to delete an item from a dictionary in Python?

Additionally, how can I delete an item from a dictionary to return a copy (i.e., not modifying the original)?",https://stackoverflow.com/questions/5844672/delete-an-element-from-a-dictionary,"['Is there a way to delete an item from a dictionary in Python?', 'The del statement removes an element:', 'pop mutates the dictionary.', 'I think your solution is best way to do it. But if you want another solution, you can create a new dictionary with using the keys from old dictionary without including your specified key, like this:', ""There're a lot of nice answers, but I want to emphasize one thing."", ""The del statement is what you're looking for. If you have a dictionary named foo with a key called 'bar', you can delete 'bar' from foo like this:"", '… how can I delete an item from a dictionary to return a copy (i.e., not modifying the original)?', ""Result: d = {1: 2, '2': 3}"", ""Simply call del d['key']."", 'No, there is no other way than', ""this doesn't do any error handling, it assumes the key is in the dict, you might want to check that first and raise if its not"", 'Here a top level design approach:', 'Below code snippet will help you definitely, I have added comments in each line which will help you in understanding the code.', ""Here's another variation using list comprehension:"", 'The following code will make a copy of dict species and delete items which are not in trans_HI']"
83,How to check if the string is empty?,"Does Python have something like an empty string variable where you can do:

if myString == string.empty:
Regardless, what's the most elegant way to check for empty string values? I find hard coding """"...",https://stackoverflow.com/questions/9573244/how-to-check-if-the-string-is-empty,"['Does Python have something like an empty string variable where you can do:', 'Empty strings are ""falsy"" which means they are considered false in a Boolean context, so you can just do this:', 'From PEP 8, in the “Programming Recommendations” section:', 'The most elegant way would probably be to simply check if its true or falsy, e.g.:', ""I would test noneness before stripping. Also, I would use the fact that empty strings are False (or Falsy). This approach is similar to Apache's StringUtils.isBlank or Guava's Strings.isNullOrEmpty"", ""I once wrote something similar to Bartek's answer and javascript inspired:"", 'The only really solid way of doing this is the following:', 'Test empty or blank string (shorter way):', ""If you want to differentiate between empty and null strings, I would suggest using if len(string), otherwise, I'd suggest using simply if string as others have said.  The caveat about strings full of whitespace still applies though, so don't forget to strip."", ""if stringname: gives a false when the string is empty. I guess it can't be simpler than this."", 'I find hardcoding(sic) """" every time for checking an empty string not as good.', 'How about this?  Perhaps it\'s not ""the most elegant"", but it seems pretty complete and clear:', 'Responding to @1290. Sorry, no way to format blocks in comments. The None value is not an empty string in Python, and neither is (spaces). The answer from Andrew Clark is the correct one: if not myString. The answer from @rouble is application-specific and does not answer the OP\'s question. You will get in trouble if you adopt a peculiar definition of what is a ""blank"" string. In particular, the standard behavior is that str(None) produces \'None\', a non-blank string.', 'I find this elegant as it makes sure it is a string and checks its length:', 'Another easy way could be to define a simple function:', 'This expression is True for strings that are empty. Non-empty strings, None and non-string objects will all produce False, with the caveat that objects may override __str__ to thwart this logic by returning a falsy value.', 'You may have a look at this Assigning empty value or string in Python', 'for those who expect a behaviour like the apache StringUtils.isBlank or Guava Strings.isNullOrEmpty :', 'When you are reading file by lines and want to determine, which line is empty, make sure you will use .strip(), because there is new line character in ""empty"" line:', 'If you just use', ""In case this is useful to someone, here is a quick function i built out to replace blank strings with N/A's in lists of lists (python 2)."", 'Below is a simple method to identify an empty string:', ""I did some experimentation with strings like '', ' ', '\\n', etc. I want isNotWhitespace to be True if and only if the variable foo is a string with at least one non-whitespace character. I'm using Python 3.6. Here's what I ended up with:"", 'As prmatta posted above, but with mistake.']"
84,How do you read from stdin?,"I'm trying to do some of the code golf challenges, but they all require the input to be taken from stdin. How do I get that in Python?",https://stackoverflow.com/questions/1450393/how-do-you-read-from-stdin,"[""I'm trying to do some of the code golf challenges, but they all require the input to be taken from stdin. How do I get that in Python?"", 'You could use the fileinput module:', ""There's a few ways to do it."", 'Note that this will include a newline character at the end. To remove the newline at the end, use line.rstrip() as @brittohalloran said.', 'Python also has built-in functions input() and raw_input(). See the Python documentation under Built-in Functions.', ""Here's from Learning Python:"", ""I'm trying to do some of the code golf challenges, but they all require the input to be taken from stdin. How do I get that in Python?"", 'The answer proposed by others:', 'This will echo standard input to standard output:', 'Building on all the anwers using sys.stdin, you can also do something like the following to read from an argument file if at least one argument exists, and fall back to stdin otherwise:', 'Example compatible with both Python versions 2 and 3:', 'The following chip of code will help you (it will read all of stdin blocking unto EOF, into one string):', 'I am pretty amazed no one had mentioned this hack so far:', 'Try this:', 'You can read from stdin and then store inputs into ""data"" as follows:', 'Read from sys.stdin, but to read binary data on Windows, you need to be extra careful, because sys.stdin there is opened in text mode and it will corrupt \\r\\n replacing them with \\n.', 'I use the following method, it returns a string from stdin (I use it for json parsing).\nIt works with pipe and prompt on Windows (not tested on Linux yet).\nWhen prompting, two line breaks indicate end of input.', 'The problem I have with solution', 'I had some issues when getting this to work for reading over sockets piped to it. When the socket got closed it started returning empty string in an active loop. So this is my solution to it (which I only tested in linux, but hope it works in all other systems)', 'Regarding this:', 'For Python 3 that would be:', 'When using -c command, as a tricky way, instead of reading the stdin (and more flexible in some cases) you can pass a shell script command as well to your python command by putting the shell command in quotes within a parenthesis started by $ sign.', 'There is \nos.read(0, x)\nwhich reads xbytes from 0 which represents stdin. This is an unbuffered read, more low level than sys.stdin.read()']"
85,Delete column from pandas DataFrame,"When deleting a column in a DataFrame I use:

del df['column_name']
And this works great. Why can't I use the following?

del df.column_name
Since it is possible to access the column/Series as df....",https://stackoverflow.com/questions/13411544/delete-column-from-pandas-dataframe,"['When deleting a column in a DataFrame I use:', ""As you've guessed, the right syntax is"", 'The best way to do this in pandas is to use drop:', 'Use:', 'Delete first, second and fourth columns:', 'The actual question posed, missed by most answers here is:', 'A nice addition is the ability to drop columns only if they exist. This way you can cover more use cases, and it will only drop the existing columns from the labels passed to it:', 'from version 0.16.1 you can do', ""It's good practice to always use the [] notation. One reason is that attribute notation (df.column_name) does not work for numbered indices:"", 'Pandas version 0.21 has changed the drop method slightly to include both the index and columns parameters to match the signature of the rename and reindex methods.', 'In pandas 0.16.1+ you can drop columns only if they exist per the solution posted by @eiTanLaVi.  Prior to that version, you can achieve the same result via a conditional list comprehension:', ""A lot of effort to find a marginally more efficient solution.  Difficult to justify the added complexity while sacrificing the simplicity of df.drop(dlst, 1, errors='ignore')"", 'We can Remove or Delete a specified column or sprcified columns by drop() method.', ""If your original dataframe df is not too big, you have no memory constraints, and you only need to keep a few columns, or, if you don't know beforehand the names of all the extra columns that you do not need, then you might as well create a new dataframe with only the columns you need:"", 'The dot syntax works in JavaScript, but not in Python.', 'or else you can go with', 'Another way of Deleting a Column in Pandas DataFrame']"
86,Why can't Python parse this JSON data?,"I have this JSON in a file:

{
    ""maps"": [
        {
            ""id"": ""blabla"",
            ""iscategorical"": ""0""
        },
        {
            ""id"": ""blabla"",
            ""iscategorical"": ""0""
   ...",https://stackoverflow.com/questions/2835559/why-cant-python-parse-this-json-data,"['I have this JSON in a file:', 'Your data is not valid JSON format. You have [] when you should have {}:', 'Your data.json should look like this:', ""Justin Peel's answer is really helpful, but if you are using Python 3 reading JSON should be done like this:"", '""Ultra JSON"" or simply ""ujson"" can handle having [] in your JSON file input. If you\'re reading a JSON input file into your program as a list of JSON elements; such as, [{[{}]}, {}, [], etc...] ujson can handle any arbitrary order of lists of dictionaries, dictionaries of lists.', ""If you're using Python3, you can try changing your (connection.json file) JSON to:"", 'There are two types in this parsing.', 'Here you go with modified data.json file:', 'As a python3 user,']"
87,Use of *args and **kwargs [duplicate],"So I have difficulty with the concept of *args and **kwargs.

So far I have learned that:
*args = list of arguments - as positional arguments
**kwargs = dictionary - whose keys become separate ...",https://stackoverflow.com/questions/3394835/use-of-args-and-kwargs,"['So I have difficulty with the concept of *args and **kwargs.', ""The syntax is the * and **.  The names *args and **kwargs are only by convention but there's no hard requirement to use them."", 'One place where the use of *args and **kwargs is quite useful is for subclassing.', ""Here's an example that uses 3 different types of parameters."", ""Here's one of my favorite places to use the ** syntax as in Dave Webb's final example:"", 'One case where *args and **kwargs are useful is when writing wrapper functions (such as decorators) that need to be able accept arbitrary arguments to pass through to the function being wrapped.  For example, a simple decorator that prints the arguments and return value of the function being wrapped:', ""*args and **kwargs are special-magic features of Python.\nThink of a function that could have an unknown number of arguments. For example, for whatever reasons, you want to have function that sums an unknown number of numbers (and you don't want to use the built-in sum function). So you write this function:"", ""Just imagine you have a function but you don't want to restrict the number of parameter it takes.\nExample:"", ""The names *args and **kwargs or **kw are purely by convention. It makes it easier for us to read each other's code"", ""Note that *args/**kwargs is part of function-calling syntax, and not really an operator. This has a particular side effect that I ran into, which is that you can't use *args expansion with the print statement, since print is not a function."", 'These parameters are typically used for proxy functions, so the proxy can pass any input parameter to the target function.', 'You can have a look at python docs (docs.python.org in the FAQ), but more specifically for a good explanation the mysterious miss args and mister kwargs (courtesy of archive.org) (the original, dead link is here).']"
88,Hidden features of Python [closed],"What are the lesser-known but useful features of the Python programming language?

Try to limit answers to Python core.
One feature per answer.
Give an example and short description of the feature, ...",https://stackoverflow.com/questions/101268/hidden-features-of-python,"['What are the lesser-known but useful features of the Python programming language?', ""In case you're thinking it's doing 1 < x, which comes out as True, and then comparing True < 10, which is also True, then no, that's really not what happens (see the last example.) It's really translating into 1 < x and x < 10, and x < 10 and 10 < x * 10 and x*10 < 100, but with less typing and each term is only evaluated once."", 'Get the python regex parse tree to debug your regex.', 'enumerate', 'Creating generators objects', 'iter() can take a callable argument', 'Be careful with mutable default arguments', 'Sending values into generator functions. For example having this function:', ""If you don't like using whitespace to denote scopes, you can use the C-style {} by issuing:"", 'The step argument in slice operators. For example:', 'Decorators', 'The for...else syntax (see http://docs.python.org/ref/for.html )', 'From 2.5 onwards dicts have a special method __missing__ that is invoked for missing items:', 'In-place value swapping', 'Readable regular expressions', 'Function argument unpacking', 'ROT13 is a valid encoding for source code, when you use the right coding declaration at the top of the code file:', 'which is exactly the same as', 'Context managers and the ""with"" Statement', ""Dictionaries have a 'get()' method. If you do d['key'] and key isn't there, you get an exception. If you do d.get('key'), you get back None if 'key' isn't there. You can add a second argument to get that item back instead of None, eg: d.get('key', 0)."", ""They're the magic behind a whole bunch of core Python features."", 'Conditional Assignment', 'Example extracted from the Python documentation:', '% -formatting takes a dictionary (also applies %i/%s etc. validation).', ""To add more python modules (espcially 3rd party ones), most people seem to use PYTHONPATH environment variables or they add symlinks or directories in their site-packages directories. Another way, is to use *.pth files. Here's the official python doc's explanation:"", 'Exception else clause:', 'Re-raising exceptions:', 'Main messages :)', 'Interactive Interpreter Tab Completion', 'Nested list comprehensions and generator expressions:', 'Operator overloading for the set builtin:']"
89,Converting integer to string in Python,"I want to convert an integer to a string in Python. I am typecasting it in vain:
d = 15
d.str()

When I try to convert it to string, it's showing an error like int doesn't have any attribute called ...",https://stackoverflow.com/questions/961632/converting-integer-to-string-in-python,"['I want to convert an integer to a string in Python. I am typecasting it in vain:', 'Links to the documentation:', 'Try this:', 'There is not typecast and no type coercion in Python. You have to convert your variable in an explicit way.', 'To manage non-integer inputs:', 'In Python => 3.6 you can use f formatting:', ""For Python 3.6, you can use the f-strings new feature to convert to string and it's faster compared to str() function. It is used like this:"", 'The most decent way in my opinion is ``.', 'You can use %s or .format:', 'For someone who wants to convert int to string in specific digits, the below method is recommended.', 'With the introduction of f-strings in Python 3.6, this will also work:', 'Here is a simpler solution:']"
90,Installing specific package versions with pip,"I'm trying to install version 1.2.2 of the MySQL_python adaptor, using a fresh virtualenv created with the --no-site-packages option. The current version shown in PyPi is 1.2.3. Is there a way to ...",https://stackoverflow.com/questions/5226311/installing-specific-package-versions-with-pip,"[""I'm trying to install version 1.2.2 of the MySQL_python adaptor, using a fresh virtualenv created with the --no-site-packages option. The current version shown in PyPi is 1.2.3. Is there a way to install the older version? I found an article stating that this should do it:"", 'TL;DR:', 'You can even use a version range with pip install command. Something like this:', 'One way, as suggested in this post, is to mention version in pip as:', 'To install a specific python package version whether it is the first time, an upgrade or a downgrade use:', 'I believe that if you already have a package it installed, pip will not overwrite it with another version.  Use -I to ignore previous versions.', 'Sometimes, the previously installed version is cached.', 'Since this appeared to be a breaking change introduced in version 10 of pip, I downgraded to a compatible version:', ""I recently ran into an issue when using pip's -I flag that I wanted to document somewhere:"", 'This below command worked for me', 'There are 2 ways you may install any package with version:-\nA). pip install -Iv package-name == version\nB). pip install -v package-name == version', ""If you want to update to latest version and you don't know what is the latest version you can type.""]"
91,Generate random integers between 0 and 9,"How can I generate random integers between 0 and 9 (inclusive) in Python?

For example, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9",https://stackoverflow.com/questions/3996904/generate-random-integers-between-0-and-9,"['How can I generate random integers between 0 and 9 (inclusive) in Python?', 'Try:', 'Return a random integer N such that a <= N <= b.', 'Try this:', 'This generates 10 pseudorandom integers in range 0 to 9 inclusive.', 'The secrets module is new in Python 3.6. This is better than the random module for cryptography or security uses.', 'Choose the size of the array (in this example, I have chosen the size to be 20). And then, use the following:', 'Try this through random.shuffle', 'I would try one of the following:', 'While many posts demonstrate how to get one random integer, the original question asks how to generate random integers (plural):', 'In case of continuous numbers randint or randrange are probably the best choices but if you have several distinct values in a sequence (i.e. a list) you could also use choice:', 'if you want to use numpy then use the following:', 'To get a list of ten samples:', 'Generating random integers between 0 and 9.', 'random.sample is another that can be used', 'Best way is to use import Random function', 'This is more of a mathematical approach but it works 100% of the time:', 'From the documentation page for the random module:', 'OpenTURNS allows to not only simulate the random integers but also to define the associated distribution with the UserDefined defined class.', 'I had better luck with this for Python 3.6']"
92,How to print to stderr in Python?,"There are several ways to write to stderr:

# Note: this first one does not work in Python 3
print >> sys.stderr, ""spam""

sys.stderr.write(""spam\n"")

os.write(2, b""spam\n"")

from __future__ ...",https://stackoverflow.com/questions/5574702/how-to-print-to-stderr-in-python,"['There are several ways to write to stderr:', 'I found this to be the only one short + flexible + portable + readable:', 'Is my choice, just more readable and saying exactly what you intend to do and portable across versions.', 'Python 2:', ""Nobody's mentioned logging yet, but logging was created specifically to communicate error messages. Basic configuration will set up a stream handler writing to stderr."", ""For Python 2 my choice is:\nprint >> sys.stderr, 'spam'\nBecause you can simply print lists/dicts etc. without convert it to string. \nprint >> sys.stderr, {'spam': 'spam'}\ninstead of:\nsys.stderr.write(str({'spam': 'spam'}))"", 'I did the following using Python 3:', 'I would say that your first approach:', 'In Python 3, one can just use print():', 'This will mimic the standard print function but output on stderr', 'EDIT In hind-sight, I think the potential confusion with changing sys.stderr and not seeing the behaviour updated makes this answer not as good as just using a simple function as others have pointed out.', 'The same applies to stdout:', 'I am working in python 3.4.3.  I am cutting out a little typing that shows how I got here:', 'If you do a simple test:', 'If you want to exit a program because of a fatal error, use:', 'Answer to the question is : There are different way to print stderr in python but that depends on\n  1.) which python version we are using\n  2.) what exact output we want.']"
93,Random string generation with upper case letters and digits,"I want to generate a string of size N.

It should be made up of numbers and uppercase English letters such as:
6U1S75
4Z4UKK
U911K4
How can I achieve this in a pythonic way?",https://stackoverflow.com/questions/2257441/random-string-generation-with-upper-case-letters-and-digits,"['I want to generate a string of size N.', 'Answer in one line:', 'This Stack Overflow quesion is the current top Google result for ""random string Python"". The current top answer is:', 'If UUIDs are okay for your purposes, use the built-in uuid package.', 'A simpler, faster but slightly less random way is to use random.sample instead of choosing each letter separately, If n-repetitions are allowed, enlarge your random basis by n times e.g.', ""lowercase_str is a random value like 'cea8b32e00934aaea8c005a35d85a5c0'"", 'A faster, easier and more flexible way to do this is to use the strgen module (pip install StringGenerator).', 'From Python 3.6 on you should use the secrets module if you need it to be cryptographically secure instead of the random module (otherwise this answer is identical to the one of @Ignacio Vazquez-Abrams):', 'Based on another Stack\xa0Overflow answer, Most lightweight way to create a random string and a random hexadecimal number, a better version than the accepted answer would be:', 'If you need a random string rather than a pseudo random one, you should use os.urandom as the source', ""I thought no one had answered this yet lol! But hey, here's my own go at it:"", 'This method is slightly faster, and slightly more annoying, than the random.choice() method Ignacio posted.', ""I'd do it this way:"", ""Use Numpy's random.choice() function"", 'Sometimes 0 (zero) & O (letter O) can be confusing. So I use', 'the following logic still generates 6 character random sample', 'The random.choice function picks a random entry in a list. You also create a list so that you can append the character in the for statement. At the end str is [\'t\', \'m\', \'2\', \'J\', \'U\', \'Q\', \'0\', \'4\', \'C\', \'K\'], but the str = """".join(str) takes care of that, leaving you with \'tm2JUQ04CK\'.', 'For those of you who enjoy functional python:', '(1) This will give you all caps and numbers:', ""this is a take on Anurag Uniyal 's response and something that i was working on myself."", 'Here length of string can be changed in for loop i.e for i in range(1,length) \nIt is simple algorithm which is easy to understand. it uses list so you can discard characters that you do not need.', 'A simple one:', 'I was looking at the different answers and took time to read the documentation of secrets', 'I would like to suggest you next option:', 'Two methods :', 'I have gone though almost all of the answers but none of them looks easier. I would suggest you to try the passgen library which is generally used to create random passwords.', ""Generate random 16-byte ID containig letters, digits, '_' and '-'"", 'If you want an easy-to-use but highly customisable key generator, use key-generator pypi package.', 'you can now use a new library (python >= 3.6) chancepy here']"
94,Pythonic way to create a long multi-line string,"I have a very long query. I would like to split it in several lines in Python. A way to do it in JavaScript would be using several sentences and joining them with a + operator (I know, maybe it's not ...",https://stackoverflow.com/questions/10660435/pythonic-way-to-create-a-long-multi-line-string,"[""I have a very long query. I would like to split it in several lines in Python. A way to do it in JavaScript would be using several sentences and joining them with a + operator (I know, maybe it's not the most efficient way to do it, but I'm not really concerned about performance in this stage, just code readability). Example:"", 'Are you talking about multi-line strings? Easy, use triple quotes to start and end them.', ""If you don't want a multiline string but just have a long single line string, you can use parentheses, just make sure you don't include commas between the string segments, then it will be a tuple."", 'Breaking lines by \\ works for me.  Here is an example:', 'I found myself happy with this one:', 'I find that when building long strings, you are usually doing something like building an SQL query, in which case this is best:', 'You can also concatenate variables in when using """""" notation:', 'This approach uses:', 'In Python >= 3.6 you can use Formatted string literals (f string)', 'For example:', 'I find textwrap.dedent the best for long strings as described here:', ""Others have mentioned the parentheses method already, but I'd like to add that with parentheses, inline comments are allowed."", ""I personally find the following to be the best (simple, safe and Pythonic) way to write raw SQL queries in Python, especially when using Python's sqlite3 module:"", 'As a general approach to long strings in Python you can use triple quotes, split and join:', 'I usually use something like this:', 'tl;dr: Use """"""\\ and """""" to wrap the string, as in', 'Your actual code shouldn\'t work, you are missing whitespaces at the end of ""lines"" (eg: role.descr as roleFROM...)', 'You can also place the sql-statement in a seperate file action.sql and load it in the py file with', '""À la"" Scala way (but I think is the most pythonic way as OQ demands):', 'Hey try something like this hope it works, like in this format it will return you a continuous line like you have successfully enquired about this property`', 'Another option that I think is more readable when the code (e.g variable) is indented and the output string should be a one liner (no newlines):', 'I use a recursive function to build complex SQL Queries. This technique can generally be used to build large strings while maintaining code readability.', 'Use triple quotation marks. People often use these to create docstrings at the start of programs to explain their purpose and other information relevant to its creation. People also use these in functions to explain the purpose and application of functions. Example:', 'I like this approach because it privileges reading. In cases where we have long strings there is no way! Depending on the level of indentation you are in and still limited to 80 characters per line... Well... No need to say anything else. In my view the python style guides are still very vague. I took the @Eero Aaltonen approach because it privileges reading and common sense. I understand that style guides should help us and not make our lives a mess. Thanks!', 'From the official python documentation:', 'For defining a long string inside a dict,\nkeeping the newlines but omitting the spaces, I ended up defining the string in a constant like this:', 'Generally, I use list and join for multi-line comments/string.']"
95,Extracting extension from filename in Python,Is there a function to extract the extension from a filename?,https://stackoverflow.com/questions/541390/extracting-extension-from-filename-in-python,"['Is there a function to extract the extension from a filename?', 'Yes. Use os.path.splitext(see Python 2.X documentation or Python 3.X documentation):', 'New in version 3.4.', 'To get only the text of the extension, without the dot.', 'For simple use cases one option may be splitting from dot:', ""worth adding a lower in there so you don't find yourself wondering why the JPG's aren't showing up in your list."", 'Any of the solutions above work, but on linux I have found that there is a newline at the end of the extension string which will prevent matches from succeeding. Add the strip() method to the end. For example:', 'With splitext there are problems with files with double extension (e.g. file.tar.gz, file.tar.bz2, etc..)', 'You can find some great stuff in pathlib module (available in python 3.x).', 'Just join all pathlib suffixes.', 'Although it is an old topic, but i wonder why there is none mentioning a very simple api of python called rpartition in this case:', ""Surprised this wasn't mentioned yet:"", 'You can use a split on a filename:', 'This is a direct string representation techniques :\nI see a lot of solutions mentioned, but I think most are looking at split.\nSplit however does it at every occurrence of ""."" .\nWhat you would rather be looking for is partition.', 'Another solution with right split:', ""Even this question is already answered I'd add the solution in Regex."", 'A true one-liner, if you like regex. \nAnd it doesn\'t matter even if you have additional ""."" in the middle', 'For funsies... just collect the extensions in a dict, and track all of them in a folder.  Then just pull the extensions you want.', 'try this:', 'This is The Simplest Method to get both Filename & Extension in just a single line.', 'That will give you the file name up to the first ""."", which would be the most common.']"
96,Reverse a string in Python,"There is no built in reverse function for Python's str object. What is the best way of implementing this method?

If supplying a very concise answer, please elaborate on its efficiency. For example, ...",https://stackoverflow.com/questions/931092/reverse-a-string-in-python,"[""There is no built in reverse function for Python's str object. What is the best way of implementing this method?"", 'How about:', ""@Paolo's s[::-1] is fastest; a slower approach (maybe more readable, but that's debatable) is ''.join(reversed(s))."", ""My own experience with this question is academic. However, if you're a pro looking for the quick answer, use a slice that steps by -1:"", 'This answer is provided to address the following concern from @odigity:', ""The existing answers are only correct if Unicode Modifiers / grapheme clusters are ignored. I'll deal with that later, but first have a look at the speed of some reversal algorithms:"", 'A lesser perplexing way to look at it would be:', 'Reverse a string in python without using reversed() or [::-1]', 'This is also an interesting way:', 'This works by looping through a string and assigning its values in reverse order to another string.', 'To solve this in programing way for interview', 'Here is a no fancy one:', 'Here is one without [::-1] or reversed (for learning purposes):', 'Recursive method:', 'All of the above solutions are perfect but if we are trying to reverse a string using for loop in python will became a little bit tricky so here is how we can reverse a string using for loop', 'Thats my way:', 'There are a lot of ways to reverse a string but I also created another one just for fun. I think this approach is not that bad.', 'This class uses python magic functions to reverse a string:', 'The above code recieves the input from the user and prints an output that is equal to the reverse of the input by adding [::-1].', ""With python 3 you can reverse the string in-place meaning it won't get assigned to another variable. First you have to convert the string into a list and then leverage the reverse() function."", 'This is simple and meaningful reverse function, easy to understand and code', 'Here is simply:', 'Reverse a string without python magic.', ""Sure, in Python you can do very fancy 1-line stuff. :) \nHere's a simple, all rounder solution that could work in any programming language."", 'OUTPUT :', ""You can use the reversed function with a list comprehesive. But I don't understand why this method was eliminated in python 3, was unnecessarily.""]"
97,String formatting: % vs. .format vs. string literal,"Python 2.6 introduced the str.format() method with a slightly different syntax from the existing % operator. Which is better and for what situations?
Python 3.6 has now introduced another string ...",https://stackoverflow.com/questions/5082452/string-formatting-vs-format-vs-string-literal,"['Python 2.6 introduced the str.format() method with a slightly different syntax from the existing % operator. Which is better and for what situations?', ""To answer your first question... .format just seems more sophisticated in many ways. An annoying thing about % is also how it can either take a variable or a tuple. You'd think the following would always work:"", ""Something that the modulo operator ( % ) can't do, afaik:"", ""Assuming you're using Python's logging module, you can pass the string formatting arguments as arguments to the .debug() method rather than doing the formatting yourself:"", 'As of Python 3.6 (2016) you can use f-strings to substitute variables:', 'PEP 3101 proposes the replacement of the % operator with the new, advanced string formatting in Python 3, where it would be the default.', ""But please be careful, just now I've discovered one issue when trying to replace all % with .format in existing code: '{}'.format(unicode_string) will try to encode unicode_string and will probably fail."", '% gives better performance than format from my test.', ""Yet another advantage of .format (which I don't see in the answers): it can take object properties."", ""As I discovered today, the old way of formatting strings via % doesn't support Decimal, Python's module for decimal fixed point and floating point arithmetic, out of the box."", 'If your python >= 3.6, F-string formatted literal is your new friend.', ""As a side note, you don't have to take a performance hit to use new style formatting with logging.  You can pass any object to logging.debug, logging.info, etc. that implements the __str__ magic method.  When the logging module has decided that it must emit your message object (whatever it is), it calls str(message_object) before doing so.  So you could do something like this:"", 'One situation where % may help is when you are formatting regex expressions. For example,', 'I would add that since version 3.6, we can use fstrings like the following', 'For python version >= 3.6 (see PEP 498)', 'Python 3.6.7 comparative:', ""But one thing is that also if you have nested curly-braces, won't work for format but % will work.""]"
98,Proper way to declare custom exceptions in modern Python?,"What's the proper way to declare custom exception classes in modern Python? My primary goal is to follow whatever standard other exception classes have, so that (for instance) any extra string I ...",https://stackoverflow.com/questions/1319615/proper-way-to-declare-custom-exceptions-in-modern-python,"[""What's the proper way to declare custom exception classes in modern Python? My primary goal is to follow whatever standard other exception classes have, so that (for instance) any extra string I include in the exception is printed out by whatever tool caught the exception."", 'Maybe I missed the question, but why not:', ""With modern Python Exceptions, you don't need to abuse .message, or override .__str__() or .__repr__() or any of it. If all you want is an informative message when your exception is raised, do this:"", 'This is fine, unless your exception is really a type of a more specific exception:', 'see how exceptions work by default if one vs more attributes are used (tracebacks omitted):', 'As of Python 3.8 (2018, https://docs.python.org/dev/whatsnew/3.8.html), the recommended method is still:', 'You should override __repr__ or __unicode__ methods instead of using message, the args you provide when you construct the exception will be in the args attribute of the exception object.', 'To define your own exceptions correctly, there are a few best practices that you should follow:', 'No, ""message"" is not forbidden. It\'s just deprecated. You application will work fine with using message. But you may want to get rid of the deprecation error, of course.', 'See a very good article ""The definitive guide to Python exceptions"". The basic principles are:', 'Try this Example', 'A really simple approach:']"
99,What's the canonical way to check for type in Python?,"What is the best way to check whether a given object is of a given type? How about checking whether the object inherits from a given type?

Let's say I have an object o. How do I check whether it's a ...",https://stackoverflow.com/questions/152580/whats-the-canonical-way-to-check-for-type-in-python,"['What is the best way to check whether a given object is of a given type? How about checking whether the object inherits from a given type?', 'To check if o is an instance of str or any subclass of str, use isinstance (this would be the ""canonical"" way):', 'The most Pythonic way to check the type of an object is... not to check it.', 'isinstance(o, str) will return True if o is an str or is of a type that inherits from str.', 'After the question was asked and answered, type hints were added to Python. Type hints in Python allow types to be checked but in a very different way from statically typed languages. Type hints in Python associate the expected types of arguments with functions as runtime accessible data associated with functions and this allows for types to be checked. Example of type hint syntax:', ""Here is an example why duck typing is evil without knowing when it is dangerous.\nFor instance: Here is the Python code (possibly omitting proper indenting), note that this \nsituation is avoidable by taking care of isinstance and issubclassof functions to make sure that when you really need a duck, you don't get a bomb."", 'Link to docs', 'You can check for type of a variable using __name__ of a type.', ""I think the cool thing about using a dynamic language like Python is you really shouldn't have to check something like that."", ""For more complex type validations I like typeguard's approach of validating based on python type hint annotations:"", 'To Hugo:', 'A simple way to check type is to compare it with something whose type you know.', 'I think the best way is to typing well your variables. You can do this by using the ""typing"" library.', 'You can check with the below line to check which character type the given value is:']"
100,How can you profile a Python script?,"Project Euler and other coding contests often have a maximum time to run or people boast of how fast their particular solution runs. With Python, sometimes the approaches are somewhat kludgey - i.e., ...",https://stackoverflow.com/questions/582336/how-can-you-profile-a-python-script,"['Project Euler and other coding contests often have a maximum time to run or people boast of how fast their particular solution runs. With Python, sometimes the approaches are somewhat kludgey - i.e., adding timing code to __main__.', 'Python includes a profiler called cProfile. It not only gives the total running time, but also times each function separately, and tells you how many times each function was called, making it easy to determine where you should make optimizations.', ""A while ago I made pycallgraph which generates a visualisation from your Python code. Edit: I've updated the example to work with 3.3, the latest release as of this writing."", ""It's worth pointing out that using the profiler only works (by default) on the main thread, and you won't get any information from other threads if you use them.  This can be a bit of a gotcha as it is completely unmentioned in the profiler documentation."", 'The python wiki is a great page for profiling resources:\nhttp://wiki.python.org/moin/PythonSpeed/PerformanceTips#Profiling_Code', ""@Maxy's comment on this answer helped me out enough that I think it deserves its own answer: I already had cProfile-generated .pstats files and I didn't want to re-run things with pycallgraph, so I used gprof2dot, and got pretty svgs:"", 'I ran into a handy tool called SnakeViz when researching this topic. SnakeViz is a web-based profiling visualization tool. It is very easy to install and use. The usual way I use it is to generate a stat file with %prun and then do analysis in SnakeViz.', 'Simplest and quickest way to find where all the time is going.', 'cProfile is great for profiling, while kcachegrind is great for visualizing the results. The pyprof2calltree in between handles the file conversion.', 'I recently created tuna for visualizing Python runtime and import profiles; this may be helpful here.', 'Also worth mentioning is the GUI cProfile dump viewer RunSnakeRun.  It allows you to sort and select, thereby zooming in on the relevant parts of the program.  The sizes of the rectangles in the picture is proportional to the time taken.  If you mouse over a rectangle it highlights that call in the table and everywhere on the map.  When you double-click on a rectangle it zooms in on that portion.  It will show you who calls that portion and what that portion calls.', 'line_profiler (already presented here) also inspired  pprofile, which is described as:', 'A nice profiling module is the line_profiler (called using the script kernprof.py).  It can be downloaded here.', ""There's a lot of great answers but they either use command line or some external program for profiling and/or sorting the results."", ""Following Joe Shaw's answer about multi-threaded code not to work as expected, I figured that the runcall method in cProfile is merely doing self.enable() and self.disable() calls around the profiled function call, so you can simply do that yourself and have whatever code you want in-between with minimal interference with existing code."", ""In Virtaal's source there's a very useful class and decorator that can make profiling (even for specific methods/functions) very easy. The output can then be viewed very comfortably in KCacheGrind."", 'cProfile is great for quick profiling but most of the time it was ending for me with the errors. Function runctx solves this problem by initializing correctly the environment and variables, hope it can be useful for someone:', ""The terminal-only (and simplest) solution, in case all those fancy UI's fail to install or to run:\nignore cProfile completely and replace it with pyinstrument, that will collect and display the tree of calls right after execution."", 'If you want to make a cumulative profiler,\nmeaning to run the function several times in a row and watch the sum of the results.', ""My way is to use yappi (https://github.com/sumerc/yappi). It's especially useful combined with an RPC server where (even just for debugging) you register method to start, stop and print profiling information, e.g. in this way:"", 'For getting quick profile stats on an IPython notebook.\nOne can embed line_profiler and memory_profiler straight into their notebooks.', 'A new tool to handle profiling in Python is PyVmMonitor: http://www.pyvmmonitor.com/', 'gprof2dot_magic', 'Ever want to know what the hell that python script is doing? Enter the\n  Inspect Shell. Inspect Shell lets you print/alter globals and run\n  functions without interrupting the running script. Now with\n  auto-complete and command history (only on linux).', 'To add on to https://stackoverflow.com/a/582337/1070617,', 'It would depend on what you want to see out of profiling. Simple time \nmetrics can be given by (bash).', 'With a statistical profiler like austin, no instrumentation is required, meaning that you can get profiling data out of a Python application simply with', ""There's also a statistical profiler called statprof. It's a sampling profiler, so it adds minimal overhead to your code and gives line-based (not just function-based) timings. It's more suited to soft real-time applications like games, but may be have less precision than cProfile."", 'I just developed my own profiler inspired from pypref_time:', ""When i'm not root on the server, I use \nlsprofcalltree.py and run my program like this:""]"
101,How to measure elapsed time in Python?,"What I want is to start counting time somewhere in my code and then get the passed time, to measure the time it took to execute few function. I think I'm using the timeit module wrong, but the docs ...",https://stackoverflow.com/questions/7370801/how-to-measure-elapsed-time-in-python,"[""What I want is to start counting time somewhere in my code and then get the passed time, to measure the time it took to execute few function. I think I'm using the timeit module wrong, but the docs are just confusing for me."", 'If you just want to measure the elapsed wall-clock time between two points, you could use  time.time():', 'Use timeit.default_timer instead of timeit.timeit. The former provides the best clock available on your platform and version of Python automatically:', 'Since time.clock() is deprecated as of Python 3.3, you will want to use time.perf_counter() for system-wide timing, or time.process_time() for process-wide timing, just the way you used to use time.clock():', ""Given a function you'd like to time,"", 'Measuring time in seconds:', ""It's fun to do this with a context-manager that automatically remembers the start time upon entry to a with block, then freezes the end time on block exit. With a little trickery, you can even get a running elapsed-time tally inside the block from the same context-manager function."", 'I prefer this. timeit doc is far too confusing.', ""Here's another way to do this:"", 'Here are my findings after going through many good answers here as well as a few other articles.', 'Using time.time to measure execution gives you the overall execution time of your commands including running time spent by other processes on your computer. It is the time the user notices, but is not good if you want to compare different code snippets / algorithms / functions / ...', 'The python cProfile and pstats modules offer great support for measuring time elapsed in certain functions without having to add any code around the existing functions.', 'Here is a tiny timer class that returns ""hh:mm:ss"" string:', ""Here's another context manager for timing code -"", 'Use profiler module. It gives a very detailed profile.', 'I like it simple (python 3):', '(With Ipython only) you can use %timeit to measure average processing time:', 'One more way to use timeit:', 'on python3:', 'Kind of a super later response, but maybe it serves a purpose for someone. This is a way to do it which I think is super clean.', 'You can use timeit.', 'It just takes those 2 lines of code in a Jupyter notebook, and it generates a nice interactive diagram. For example:', 'The easiest way to calculate the duration of an operation:', 'We can also convert time into human-readable time.', 'I made a library for this, if you want to measure a function you can just do it like this', ""Here's a pretty well documented and fully type hinted decorator I use as a general utility:"", 'This unique class-based approach offers a printable string representation, customizable rounding, and convenient access to the elapsed time as a string or a float. It was developed with Python 3.7.', 'Unit of time: measured in seconds as a float', 'If you want to be able to time functions conveniently, you can use a simple decorator:', 'based on the contextmanager solution given by https://stackoverflow.com/a/30024601/5095636, hereunder the lambda free version, as flake8 warns on the usage of lambda as per E731:']"
102,UnicodeEncodeError: 'ascii' codec can't encode character u'\xa0' in position 20: ordinal not in range(128),"I'm having problems dealing with unicode characters from text fetched from different web pages (on different sites). I am using BeautifulSoup. 

The problem is that the error is not always ...",https://stackoverflow.com/questions/9942594/unicodeencodeerror-ascii-codec-cant-encode-character-u-xa0-in-position-20,"[""I'm having problems dealing with unicode characters from text fetched from different web pages (on different sites). I am using BeautifulSoup."", 'You need to read the Python Unicode HOWTO. This error is the very first example.', 'This is a classic python unicode pain point! Consider the following:', 'I found elegant work around for me to remove symbols and continue to keep string as string in follows:', 'well i tried everything but it did not help, after googling around i figured the following and it helped.\npython 2.7 is in use.', 'A subtle problem causing even print to fail is having your environment variables set wrong, eg. here LC_ALL set to ""C"".  In Debian they discourage setting it: Debian wiki on Locale', 'For me, what worked was:', ""The problem is that you're trying to print a unicode character, but your terminal doesn't support it."", ""I've actually found that in most of my cases, just stripping out those characters is much simpler:"", 'In shell:', 'Here\'s a rehashing of some other so-called ""cop out"" answers.  There are situations in which simply throwing away the troublesome characters/strings is a good solution, despite the protests voiced here.', 'Add line below at the beginning of your script ( or as second line):', 'I always put the code below in the first two lines of the python files:', 'Simple helper functions found here.', ""Just add to a variable encode('utf-8')"", 'I just used the following:', 'Please open terminal and fire the below command:', 'Alas this works in Python 3 at least...', 'Below solution worked for me, Just added', 'I just had this problem, and Google led me here, so just to add to the general solutions here, this is what worked for me:', 'We struck this error when running manage.py migrate in Django with localized fixtures.', 'Many answers here (@agf and @Andbdrew for example) have already addressed the most immediate aspects of the OP question.', 'Try to avoid conversion of variable to str(variable). Sometimes, It may cause the issue.', ""In general case of writing this unsupported encoding string (let's say data_that_causes_this_error) to some file (for e.g. results.txt), this works"", 'If you have something like packet_data = ""This is data"" then do this on the next line, right after initializing packet_data:', 'Update for python 3.0 and later. Try the following in the python editor:', 'I had this issue trying to output Unicode characters to stdout, but with sys.stdout.write, rather than print (so that I could support output to a different file as well).', 'This problem often happens  when a django project deploys using Apache. Because Apache sets environment variable LANG=C in /etc/sysconfig/httpd. Just open the file and comment (or change to your flavior) this setting. Or use the lang option of the WSGIDaemonProcess command, in this case you will be able to set different LANG environment variable  to different virtualhosts.', 'The recommended solution did not work for me, and I could live with dumping all non ascii characters, so', 'This will work:']"
103,How can I use threading in Python?,"I am trying to understand threading in Python. I've looked at the documentation and examples, but quite frankly, many examples are overly sophisticated and I'm having trouble understanding them.

How ...",https://stackoverflow.com/questions/2846653/how-can-i-use-threading-in-python,"[""I am trying to understand threading in Python. I've looked at the documentation and examples, but quite frankly, many examples are overly sophisticated and I'm having trouble understanding them."", 'Since this question was asked in 2010, there has been real simplification in how to do simple multithreading with Python with map and pool.', ""Here's a simple example: you need to try a few alternative URLs and return the contents of the first one to respond."", 'NOTE: For actual parallelization in Python, you should use the multiprocessing module to fork multiple processes that execute in parallel (due to the global interpreter lock, Python threads provide interleaving, but they are in fact executed serially, not in parallel, and are only useful when interleaving I/O operations).', 'Like others mentioned, CPython can use threads only for I/O waits due to GIL.', 'Just a note: A queue is not required for threading.', 'The answer from Alex Martelli helped me. However, here is a modified version that I thought was more useful (at least to me).', 'Given a function, f, thread it like this:', 'I found this very useful: create as many threads as cores and let them execute a (large) number of tasks (in this case, calling a shell program):', 'Python 3 has the facility of launching parallel tasks. This makes our work easier.', 'Using the blazing new concurrent.futures module', 'For me, the perfect example for threading is monitoring asynchronous events. Look at this code.', ""Most documentation and tutorials use Python's Threading and Queue module, and they could seem overwhelming for beginners."", 'I saw a lot of examples here where no real work was being performed, and they were mostly CPU-bound. Here is an example of a CPU-bound task that computes all prime numbers between 10 million and 10.05 million. I have used all four methods here:', 'Here is the very simple example of CSV import using threading. (Library inclusion may differ for different purpose.)', ""I would like to contribute with a simple example and the explanations I've found useful when I had to tackle this problem myself."", 'Here is multi threading with a simple example which will be helpful. You can run it and understand easily how multi threading is working in Python. I used a lock for preventing access to other threads until the previous threads finished their work. By the use of this line of code,', 'With borrowing from this post we know about choosing between the multithreading, multiprocessing, and async/asyncio and their usage.', ""None of the previous solutions actually used multiple cores on my GNU/Linux server (where I don't have administrator rights). They just ran on a single core.""]"
104,Python class inherits object,"Is there any reason for a class declaration to inherit from object?

I just found some code that does this and I can't find a good reason why.

class MyClass(object):
    # class code follows...",https://stackoverflow.com/questions/4015417/python-class-inherits-object,"['Is there any reason for a class declaration to inherit from object?', 'In Python 3, apart from compatibility between Python 2 and 3, no reason. In Python 2, many reasons.', 'Python 3', ""Yes, this is a 'new style' object. It was a feature introduced in python2.2."", 'History from Learn Python the Hard Way:', ""Yes, it's historical. Without it, it creates an old-style class."", 'The syntax of the class creation statement:']"
105,Convert two lists into a dictionary,"Imagine that you have:

keys = ['name', 'age', 'food']
values = ['Monty', 42, 'spam']
What is the simplest way to produce the following dictionary?

a_dict = {'name' : 'Monty', 'age' : 42, 'food' : '...",https://stackoverflow.com/questions/209840/convert-two-lists-into-a-dictionary,"['Imagine that you have:', 'Like this:', 'Imagine that you have:', 'Try this:', 'You can also use dictionary comprehensions in Python ≥ 2.7:', 'A more natural way is to use dictionary comprehension', 'If you need to transform keys or values before creating a dictionary then a generator expression could be used. Example:', 'with Python 3.x, goes for dict comprehensions', 'For those who need simple code and aren’t familiar with zip:', 'The best solution is still:', 'you can use this below code:', 'Here is also an example of adding a list value in you dictionary', ""I had this doubt while I was trying to solve a graph-related problem. The issue I had was I needed to define an empty adjacency list and wanted to initialize all the nodes with an empty list, that's when I thought how about I check if it is fast enough, I mean if it will be worth doing a zip operation rather than simple assignment key-value pair. After all most of the times, the time factor is an important ice breaker. So I performed timeit operation for both approaches."", 'Solution as dictionary comprehension with enumerate:', 'method without zip function', 'You may also try with one list which is a combination of two lists ;)', ""Although there are multiple ways of doing this but i think most fundamental way of approaching it; creating a loop and dictionary and store values into that dictionary. In the recursive approach the idea is still same it but instead of using a loop, the function called itself until it reaches to the end. Of course there are other approaches like using dict(zip(key, value)) and etc. These aren't the most effective solutions."", 'zip creates a generator of parallel values\nlist() instantiates the full generator and passing that into the dataframe which converts the whole expression.\nresulting output:']"
106,Create a dictionary with list comprehension,"I like the Python list comprehension syntax.

Can it be used to create dictionaries too? For example, by iterating over pairs of keys and values:

mydict = {(k,v) for (k,v) in blah blah blah}  # doesn'...",https://stackoverflow.com/questions/1747817/create-a-dictionary-with-list-comprehension,"['I like the Python list comprehension syntax.', 'Note: this is for Python 3.x (and 2.7 upwards). Formerly in Python 2.6 and earlier, the dict built-in could receive an iterable of key/value pairs, so you can pass it a list comprehension or generator expression. For example:', 'In Python 3 and Python 2.7+, dictionary comprehensions look like the below:', ""In fact, you don't even need to iterate over the iterable if it already comprehends some kind of mapping, the dict constructor doing it graciously for you:"", 'In Python 2.7, it goes like:', 'I like the Python list comprehension syntax.', 'Python version < 2.7(RIP, 3 July 2010 - 31 December 2019), do the below:', ""To add onto @fortran's answer, if you want to iterate over a list of keys key_list as well as a list of values value_list:"", 'Here is another example of dictionary creation using dict comprehension:', 'Try this,', 'Python supports dict comprehensions, which allow you to express the creation of dictionaries at runtime using a similarly concise syntax.', 'This code will create dictionary using list comprehension for multiple lists with different values that can be used for pd.DataFrame()', 'Just to throw in another example. Imagine you have the following list:', 'You can create a new dict for each pair and merge it with the previous dict:', ""Yes, it's possible. In python, Comprehension can be used in List, Set, Dictionary, etc.\nYou can write it this way""]"
107,What is the Python 3 equivalent of “python -m SimpleHTTPServer”,What is the Python 3 equivalent of python -m SimpleHTTPServer?,https://stackoverflow.com/questions/7943751/what-is-the-python-3-equivalent-of-python-m-simplehttpserver,"['What is the Python 3 equivalent of python -m SimpleHTTPServer?', 'From the docs:', 'The equivalent is:', 'Using 2to3 utility.', ""In addition to Petr's answer, if you want to bind to a specific interface instead of all the interfaces you can use -b or --bind flag."", 'In one of my projects I run tests against Python 2 and 3. For that I wrote a small script which starts a local server independently:', 'As everyone has mentioned http.server module is equivalent to python -m SimpleHTTPServer.\nBut as a warning from https://docs.python.org/3/library/http.server.html#module-http.server']"
108,What are the differences between type() and isinstance()?,"What are the differences between these two code fragments?  

Using type():

import types

if type(a) is types.DictType:
    do_something()
if type(b) in types.StringTypes:
    do_something_else()
...",https://stackoverflow.com/questions/1549801/what-are-the-differences-between-type-and-isinstance,"['What are the differences between these two code fragments?', 'To summarize the contents of other (already good!) answers, isinstance caters for inheritance (an instance of a derived class is an instance of a base class, too), while checking for equality of type does not (it demands identity of types and rejects instances of subtypes, AKA subclasses).', ""Here's an example where isinstance achieves something that type cannot:"", 'Type-checking with', ""The latter is preferred, because it will handle subclasses properly. In fact, your example can be written even more easily because isinstance()'s second parameter may be a tuple:"", 'According to python documentation here is a statement:', 'A practical usage difference is how they handle booleans:', ""For the real differences, we can find it in code, but I can't find the implement of the default behavior of the isinstance().""]"
109,fatal error: Python.h: No such file or directory,"I am trying to build a shared library using a C extension file but first I have to generate the output file using the command below:
gcc -Wall utilsmodule.c -o Utilc

After executing the command, I ...",https://stackoverflow.com/questions/21530577/fatal-error-python-h-no-such-file-or-directory,"['I am trying to build a shared library using a C extension file but first I have to generate the output file using the command below:', ""Looks like you haven't properly installed the header files and static libraries for python dev.  Use your package manager to install them system-wide."", 'On Ubuntu, I was running Python 3 and I had to install', 'For Python 3.7 and Ubuntu in particular, I needed', 'Two things you have to do.', 'If you are using a Raspberry Pi:', 'on Fedora run this for Python 2:', 'If you are using tox to run tests on multiple versions of Python, you may need to install the Python dev libraries for each version of Python you are testing on.', ""You need to install the package python2-devel or python3-devel, depending on the Python version you're using."", 'Make sure that the Python dev files come with your OS.', 'In AWS API (centOS) its', 'For me, changing it to this worked:', 'AWS EC2 install running python34:', ""If you use a virtualenv with a 3.6 python (edge right now), be sure to install the matching python 3.6 dev sudo apt-get install python3.6-dev, otherwise executing sudo python3-dev will install the python dev 3.3.3-1, which won't solve the issue."", 'In my case, what fixed it in Ubuntu was to install the packages libpython-all-dev (or libpython3-all-dev if you use Python 3).', ""It's not the same situation, but it also works for me and now I can use SWIG with Python3.5:"", 'I also encountered this error when I was installing coolprop in ubuntu.', 'try apt-file. It is difficult to remember the package name where the missing file resides. It is generic and useful for any package files.', 'I managed to solve this issue and generate the .so file in one command', 'For CentOS 7:', 'For the OpenSuse comrades out there:', ""If you're using Python 3.6 on Amazon Linux (based on RHEL, but the RHEL answers given here didn't work):"", 'You must install the Python development files on your operating system if the Python provided with your operating system does not come with them. The many answers on this question show the myriad ways this can be achieved on different systems.', 'This error occurred when I attempted to install ctds on CentOS 7 with Python3.6. I did all the tricks mentioned here including yum install python34-devel.  The problem was Python.h was found in /usr/include/python3.4m but not in /usr/include/python3.6m.  I tried to use --global-option to point to include dir (pip3.6 install --global-option=build_ext --global-option=""--include-dirs=/usr/include/python3.4m"" ctds).  This resulted in a lpython3.6m not found when linking ctds.', ""Sure python-dev or libpython-all-dev are the first thing to (apt )install, but if that doesn't help as was my case, I advice you to install the foreign Function Interface packages by sudo apt-get install libffi-dev and sudo pip install cffi."", 'It often appear when you trying to remove python3.5 and install python3.6.', ""Sometimes even after installing python-dev the error persists,\nCheck for the error if it is 'gcc' missing."", ""This means that Python.h isn't in your compiler's default include paths. Have you installed it system-wide or locally? What's your OS?"", 'try locate your Python.h:']"
110,How to flush output of print function?,"How do I force Python's print function to output to the screen?

This is not a duplicate of Disable output buffering - the linked question is attempting unbuffered output, while this is more general. ...",https://stackoverflow.com/questions/230751/how-to-flush-output-of-print-function,"[""How do I force Python's print function to output to the screen?"", 'On Python 3, print can take an optional flush argument', 'Running python -h, I see a command line option:', 'Since Python 3.3, you can force the normal print() function to flush without the need to use sys.stdout.flush(); just set the ""flush"" keyword argument to true.  From the documentation:', 'I suggest five ways of doing this:', 'Also as suggested in this blog one can reopen sys.stdout in unbuffered mode:', 'With Python 3.x the print() function has been extended:', 'Using the -u command-line switch works, but it is a little bit clumsy. It would mean that the program would potentially behave incorrectly if the user invoked the script without the -u option.  I usually use a custom stdout, like this:', 'Why not try using an unbuffered file?', ""Dan's idea doesn't quite work:"", 'Here is my version, which provides writelines() and fileno(), too:', 'In Python 3 you can overwrite print function with default set to flush = True', 'I did it like this in Python 3.4:', ""I first struggled to understand how the flush option was working. I wanted to do a 'loading display' and here is the solution I found:""]"
111,How do I check what version of Python is running my script?,How can I check what version of the Python Interpreter is interpreting my script?,https://stackoverflow.com/questions/1093322/how-do-i-check-what-version-of-python-is-running-my-script,"['How can I check what version of the Python Interpreter is interpreting my script?', 'This information is available in the sys.version string in the sys module:', ""From the command line (note the capital 'V'):"", 'I like sys.hexversion for stuff like this.', ""Use platform's python_version from the stdlib:"", 'Your best bet is probably something like so:', 'Put something like:', ""Here's a short commandline version which exits straight away (handy for scripts and automated execution):"", 'With six module, you can do it by:', 'sys.version gives you what you want, just pick the first number :)', ""Like Seth said, the main script could check sys.version_info (but note that that didn't appear until 2.0, so if you want to support older versions you would need to check another version property of the sys module)."", 'Just type python in your terminal and you can see the version \n as like following', ""Several answers already suggest how to query the current python version. To check programmatically the version requirements, I'd make use of one of the following two methods:"", 'Just for fun, the following is a way of doing it on CPython 1.0-3.7b2, Pypy, Jython and Micropython.  This is more of a curiosity than a way of doing it in modern code.  I wrote it as part of http://stromberg.dnsalias.org/~strombrg/pythons/ , which is a script for testing a snippet of code on many versions of python at once, so you can easily get a feel for what python features are compatible with what versions of python:', '...you can (ab)use list comprehension scoping changes and do it in a single expression:', 'To verify the Python version for commands on Windows, run the following commands in a command prompt and verify the output', 'output', 'Check Python version: python -V or python --version or apt-cache policy python', ""sys.version_info doesn't seem to return a tuple as of 3.7. Rather, it returns a special class, so all of the examples using tuples don't work, for me at least. Here's the output from a python console:"", 'The even simpler simplest way:', ""To check from the command-line, in one single command, but include major, minor, micro version, releaselevel and serial, then invoke the same Python interpreter (i.e. same path) as you're using for your script:"", 'A attempt using os.popen to read it in a variable:', 'If you are working on linux just give command python  output will be like this']"
112,Referring to the null object in Python,How do I refer to the null object in Python?,https://stackoverflow.com/questions/3289601/referring-to-the-null-object-in-python,"['How do I refer to the null object in Python?', ""In Python, the 'null' object is the singleton None."", ""There's no null in Python; instead there's None. As stated already, the most accurate way to test that something has been given None as a value is to use the is identity operator, which tests that two variables refer to the same object."", ""It's not called null as in other languages, but None. There is always only one instance of this object, so you can check for equivalence with x is None (identity comparison) instead of x == None, if you want."", 'In Python, to represent the absence of a value, you can use the None value (types.NoneType.None) for objects and """" (or len() == 0) for strings. Therefore:', 'Null is a special object type like:', ""Per Truth value testing, 'None' directly tests as FALSE, so the simplest expression will suffice:""]"
113,Save plot to image file instead of displaying it using Matplotlib,"I am writing a quick-and-dirty script to generate plots on the fly. I am using the code below (from Matplotlib documentation) as a starting point:

from pylab import figure, axes, pie, title, show

# ...",https://stackoverflow.com/questions/9622163/save-plot-to-image-file-instead-of-displaying-it-using-matplotlib,"['I am writing a quick-and-dirty script to generate plots on the fly. I am using the code below (from Matplotlib documentation) as a starting point:', ""While the question has been answered, I'd like to add some useful tips when using matplotlib.pyplot.savefig. The file format can be specified by the extension:"", 'As others have said, plt.savefig() or fig1.savefig() is indeed the way to save an image.', 'The solution is:', 'Just found this link on the MatPlotLib documentation addressing exactly this issue:\nhttp://matplotlib.org/faq/howto_faq.html#generate-images-without-having-a-window-appear', 'If you don\'t like the concept of the ""current"" figure, do:', 'The other answers are correct.  However, I sometimes find that I want to open the figure object later.  For example, I might want to change the label sizes, add a grid, or do other processing.  In a perfect world, I would simply rerun the code generating the plot, and adapt the settings.  Alas, the world is not perfect.  Therefore, in addition to saving to PDF or PNG, I add:', 'After using the plot() and other functions to create the content you want, you could use a clause like this to select between plotting to the screen or to file:', 'I used the following:', 'You can either do:', 'If, like me, you use Spyder IDE, you have to disable the interactive mode with :', 'The Solution :', 'According to question Matplotlib (pyplot) savefig outputs blank image.', 'In Jupyter Notebook you have to remove plt.show() and add plt.savefig(), together with the rest of the plt-code in one cell.\nThe image will still show up in your notebook.', 'When using matplotlib.pyplot, you must first save your plot and then close it using these 2 lines:', 'Additionally to those above, I added __file__ for the name so the picture and Python file get the same names. I also added few arguments to make It look better:', ""Given that today (was not available when this question was made) lots of people use Jupyter Notebook as python console, there is an extremely easy way to save the plots as .png, just call the matplotlib's pylab class from Jupyter Notebook, plot the figure 'inline' jupyter cells, and then drag that figure/image to a local directory. Don't forget \n%matplotlib inline in the first line!"", 'As suggested before, you can either use:', ""You can save your image with any extension(png, jpg,etc.) and with the resolution you want. Here's a function to save your figure."", 'You can do it like this:']"
114,How to import a module given the full path?,"How can I load a Python module given its full path? Note that the file can be anywhere in the filesystem, as it is a configuration option.",https://stackoverflow.com/questions/67631/how-to-import-a-module-given-the-full-path,"['How can I load a Python module given its full path? Note that the file can be anywhere in the filesystem, as it is a configuration option.', 'For Python 3.5+ use:', 'The advantage of adding a path to sys.path (over using imp) is that it simplifies things when importing more than one module from a single package.  For example:', ""If your top-level module is not a file but is packaged as a directory with __init__.py, then the accepted solution almost works, but not quite. In Python 3.5+ the following code is needed (note the added line that begins with 'sys.modules'):"", 'To import your module, you need to add its directory to the environment variable, either temporarily or permanently.', ""It sounds like you don't want to specifically import the configuration file (which has a whole lot of side effects and additional complications involved), you just want to run it, and be able to access the resulting namespace. The standard library provides an API specifically for that in the form of runpy.run_path:"", 'You can also do something like this and add the directory that the configuration file is sitting in to the Python load path, and then just do a normal import, assuming you know the name of the file in advance, in this case ""config"".', 'You can use the', 'Do you mean load or import?', ""I have come up with a slightly modified version of @SebastianRittau's wonderful answer (for Python > 3.4 I think), which will allow you to load a file with any extension as a module using spec_from_loader instead of spec_from_file_location:"", 'Here is some code that works in all Python versions, from 2.7-3.5 and probably even others.', 'If we have scripts in the same project but in different directory means, we can solve this problem by the following method.', ""I believe you can use imp.find_module() and imp.load_module() to load the specified module.  You'll need to split the module name off of the path, i.e. if you wanted to load /home/mypath/mymodule.py you'd need to do:"", ""You can use the pkgutil module (specifically the walk_packages method) to get a list of the packages in the current directory. From there it's trivial to use the importlib machinery to import the modules you want:"", 'Create python module test.py', ""This area of Python 3.4 seems to be extremely tortuous to understand! However with a bit of hacking using the code from Chris Calloway as a start I managed to get something working. Here's the basic function."", ""I'm not saying that it is better, but for the sake of completeness, I wanted to suggest the exec function, available in both python 2 and 3.\nexec allows you to execute arbitrary code in either the global scope, or in an internal scope, provided as a dictionary."", 'To import a module from a given filename, you can temporarily extend the path, and restore the system path in the finally block reference:', ""I made a package that uses imp for you. I call it import_file and this is how it's used:"", 'This should work', ""There's a package that's dedicated to this specifically:"", 'Import package modules at runtime (Python recipe)', 'In Linux, adding a symbolic link in the directory your python script is located works.', 'A simple solution using importlib instead of the imp package (tested for Python 2.7, although it should work for Python 3 too):', ""Adding this to the list of answers as I couldn't find anything that worked. This will allow imports of compiled (pyd) python modules in 3.4:"", 'quite simple way: suppose you want import file with relative path ../../MyLibs/pyfunc.py', 'I have wrote my own global and portable import function, based on importlib module, for:', 'This answer is a supplement to Sebastian Rittau\'s answer responding to the comment: ""but what if you don\'t have the module name?""  This is a quick and dirty way of getting the likely python module name given a filename -- it just goes up the tree until it finds a directory without an __init__.py file and then turns it back into a filename.  For Python 3.4+ (uses pathlib), which makes sense since Py2 people can use ""imp"" or other ways of doing relative imports:', 'For those like me that just want to import a simple pure python script from somewhere on their machine, this works nicely:', 'This is my 2 utility functions using only pathlib. It infers the module name from the path\nBy default, it recursively loads all python files from folders and replaces init.py by the parent folder name. But you can also give a Path and/or a glob to select some specific files.']"
115,Selecting multiple columns in a pandas dataframe,"I have data in different columns but I don't know how to extract it to save it in another variable.

index  a   b   c
1      2   3   4
2      3   4   5
How do I select 'a', 'b' and save it in to df1?
...",https://stackoverflow.com/questions/11285613/selecting-multiple-columns-in-a-pandas-dataframe,"[""I have data in different columns but I don't know how to extract it to save it in another variable."", 'The column names (which are strings) cannot be sliced in the manner you tried.', 'As of version 0.11.0, columns can be sliced in the manner you tried using the .loc indexer:', ""Assuming your column names (df.columns) are ['index','a','b','c'], then the data you want is in the \n3rd & 4th columns. If you don't know their names when your script runs, you can do this"", 'I realize this question is quite old, but in the latest version of pandas there is an easy way to do exactly this. Column names (which are strings) can be sliced in whatever manner you like.', 'With pandas,', 'You could provide a list of columns to be dropped and return back the DataFrame with only the columns needed using the drop() function on a Pandas DataFrame.', 'I found this method to be very useful:', 'Starting with 0.21.0, using .loc or [] with a list with one or more missing labels is deprecated in favor of .reindex. So, the answer to your question is:', 'You can use pandas.\nI create the DataFrame:', 'You can use pandas.DataFrame.filter method to either filter or reorder columns like this:', ""If you want to get one element by row index and column name, you can do it just like df['b'][0]. It is as simple as you can image."", 'One different and easy approach : iterating rows', ""The different approaches discussed in above responses are based on the assumption that either the user knows column indices to drop or subset on, or the user wishes to subset a dataframe using a range of columns (for instance between 'C' : 'E'). pandas.DataFrame.drop() is certainly an option to subset data based on a list of columns defined by user (though you have to be cautious that you always use copy of dataframe and inplace parameters should not be set to True!!)"", 'you can also use df.pop()', ""I've seen several answers on that, but on remained unclear to me. How would you select those columns of interest? The answer to that is that if you have them gathered in a list, you can just reference the columns using the list."", 'Try to use pandas.DataFrame.get (see docs):', 'To select multiple columns, extract and view them thereafter: df is previously named data frame, than create new data frame df1, and select the columns A to D which you want to extract and view.']"
116,How do I write JSON data to a file?,"I have JSON data stored in the variable data.

I want to write this to a text file for testing so I don't have to grab the data from the server each time.

Currently, I am trying this:

obj = open('...",https://stackoverflow.com/questions/12309269/how-do-i-write-json-data-to-a-file,"['I have JSON data stored in the variable data.', 'You forgot the actual JSON part - data is a dictionary and not yet JSON-encoded. Write it like this for maximum compatibility (Python 2 and 3):', 'To get utf8-encoded file as opposed to ascii-encoded in the accepted answer for Python 2 use:', 'I would answer with slight modification with aforementioned answers and that is to write a prettified JSON file which human eyes can read better. For this, pass sort_keys as True and indent with 4 space characters and you are good to go. Also take care of ensuring that the ascii codes will not be written in your JSON file:', 'Explanation of the parameters of json.dump:', 'For those of you who are trying to dump greek or other ""exotic"" languages such as me but are also having problems (unicode errors) with weird characters such as the peace symbol (\\u262E) or others which are often contained in json formated data such as Twitter\'s, the solution could be as follows (sort_keys is obviously optional):', ""I don't have enough reputation to add in comments, so I just write some of my findings of this annoying TypeError here:"", 'Write a data in file using JSON use json.dump() or json.dumps() used.\nwrite like this to store data in file.', 'Writing JSON to a File', 'To write the JSON with indentation, ""pretty print"":', ""if you are trying to write a pandas dataframe into a file using a json format i'd recommend this"", 'All previous answers are correct here is a very simple example:', 'The accepted answer is fine. However, I ran into ""is not json serializable"" error using that.', 'The JSON data can be written to a file as follows']"
117,How do I trim whitespace from a string?,"How do I remove leading and trailing whitespace from a string in Python?

For example:

"" Hello "" --> ""Hello""
"" Hello""  --> ""Hello""
""Hello ""  --> ""Hello""
""Bob has a cat"" --> ""Bob has a cat""...",https://stackoverflow.com/questions/761804/how-do-i-trim-whitespace-from-a-string,"['How do I remove leading and trailing whitespace from a string in Python?', 'Just one space, or all consecutive spaces?  If the second, then strings already have a .strip() method:', 'As pointed out in answers above', 'strip is not limited to whitespace characters either:', 'This will remove all leading and trailing whitespace in myString:', 'You want strip():', 'This can also be done with a regular expression', 'Well seeing this thread as a beginner got my head spinning. Hence came up with a simple shortcut.', 'In order to remove ""Whitespace"" which causes plenty of indentation errors when running your finished code or programs in Pyhton. Just do the following;obviously if Python keeps telling that the error(s) is indentation in line 1,2,3,4,5, etc..., just fix that line back and forth.', ""I wanted to remove the too-much spaces in a string (also in between the string, not only in the beginning or end). I made this, because I don't know how to do it otherwise:"", 'I could not find a solution to what I was looking for so I created some custom functions. You can try them out.', 'If you want to trim specified number of spaces from left and right, you could do this:', 'How do I remove leading and trailing whitespace from a string in Python?']"
118,Use different Python version with virtualenv,"I have a Debian system currently running with python 2.5.4. I got virtualenv properly installed, everything is working fine. Is there a possibility that I can use a virtualenv with a different version ...",https://stackoverflow.com/questions/1534210/use-different-python-version-with-virtualenv,"['I have a Debian system currently running with python 2.5.4. I got virtualenv properly installed, everything is working fine. Is there a possibility that I can use a virtualenv with a different version of Python?', 'Just use the --python (or short -p) option when creating your virtualenv instance to specify the Python executable you want to use, e.g.:', 'Since Python 3, the Python Docs suggest creating the virtual environment with the following command:', 'These are the steps you can follow when you are on a shared hosting environment and need to install & compile Python from source and then create venv from your Python version. For Python 2.7.9. you would do something along these lines:', 'There is an easier way,', 'Under Windows for me this works:', 'Mac OSX 10.6.8 (Snow Leopard):', 'Suppose you currently have python 2.7 installed in your virtualenv. But want to make use of python3.2, You would have to update this with:', 'These two commands should work fine.', 'You can call virtualenv with python version you want. For example:', ""The -p approach works well, but you do have to remember to use it every time.  If your goal is to switch to a newer version of Python generally, that's a pain and can also lead to mistakes."", '[November 2019]  I needed to install a Python 3.7 environment (env) on my Python 3.8-based Arch Linux system.  Python 3.7 was no longer on the system, so I could not downgrade Python, to install a package that I needed.', 'Even easier, by using command substitution to find python2 for you:', 'For Mac(High Sierra), install the virtualenv on python3 and create a virtualenv for python2:', ""On the mac I use pyenv and virtualenvwrapper. I had to create a new virtualenv. You need homebrew which I'll assume you've installed if you're on a mac, but just for fun:"", 'Create environment for python3:', 'On windows:', 'Yes, the above answers are correct and works fine on Unix based systems like Linux & MAC OS X.', 'I use pyenv to manage my python version.', ""These seem a little overcomplicated for Windows. If you're on Windows running python 3.3 or later, you can use the python launcher py to do this much more easily. Simply install the different python version, then run:"", 'It worked for me', 'This was a bug with virtualenv.\nJust upgrading your pip should be the fix.', 'As already mentioned in multiple answers, using virtualenv is a clean solution. However a small pitfall that everyone should be aware of is that if an alias for python is set in bash_aliases like:', 'Link to Creating virtualenv', 'For Debian (debian 9) Systems in 2019, I discovered a simple solution that may solve the problem from within the virtual environment.', 'It worked for me on windows with python 2 installation :', 'You can do it by doing this:', 'Yes you just need to install the other version of python, and define the location of your other version of python in your command like :', 'Here is the stepbystep how to create the Virtual environment in Visual Studio Code folder:\nI used Powershell (Administrator mode):\n 1. I create a VSCode folder - ""D:\\Code_Python_VE"" where I want to create Virtual environment.\n 2.  Next I type the command - ""pip3 install virtualenv"". (D:\\Code_Python_VE> pip3 install virtualenv) \n 3. D:\\Code_Python_VE> python3 -m venv project_env\n 4. D:\\Code_Python_VE>project_env\\Scripts\\activate.bat\n 5. D:\\Code_Python_VE> ls - This will list a new directory ""project_env"".\n 6. D:\\Code_Python_VE> code . This will start Visual Studio Code. Make sure the command is (code .).\n 7. Create launch.jason with following content:', 'UBUNTU 19.04 / Global Python 3.7.']"
119,Is there a way to create multiline comments in Python?,"I have recently started studying Python, but I couldn't find how to implement multi-line comments. Most languages have block comment symbols like

/*

*/
I tried this in Python, but it throws an ...",https://stackoverflow.com/questions/7696924/is-there-a-way-to-create-multiline-comments-in-python,"[""I have recently started studying Python, but I couldn't find how to implement multi-line comments. Most languages have block comment symbols like"", ""You can use triple-quoted strings. When they're not a docstring (the first thing in a class/function/module), they are ignored."", 'Python does have a multiline string/comment syntax in the sense that unless used as docstrings, multiline strings generate no bytecode -- just like #-prepended comments. In effect, it acts exactly like a comment.', 'From the accepted answer...', 'In Python 2.7 the multiline comment is:', ""AFAIK, Python doesn't have block comments. For commenting individual lines, you can use the # character."", ""I think it doesn't, except that a multiline string isn't processed. However, most, if not all Python IDEs have a shortkey for 'commenting out' multiple lines of code."", 'If you put a comment in', ""There is no such feature as a multi-line comment. # is the only way to comment a single line of code.\nMany of you answered ''' a comment ''' this as their solution."", 'Unfortunately stringification can not always be used as commenting out! So it is safer to stick to the standard prepending each line with a #.', ""Well, you can try this (when running the quoted, the input to the first question should quoted with '):"", 'Visual Studio Code universal official multi-line comment toggle.', 'Multiline comment in Python:', 'The inline comments in Python starts with a hash character.', 'On Python 2.7.13:', 'Yes, it is fine to use both:', 'I would advise against using """""" for multi line comments!', 'Using PyCharm IDE.', 'For commenting out multiple lines of code in Python is to simply use a # single-line comment on every line:', ""A multiline comment doesn't actually exist in Python. The below example consists of an unassigned string, which is validated by Python for syntactical errors."", 'Among other answers, I find the easiest way is to use the IDE comment functions which use the Python comment support of #.', 'You can use the following. This is called DockString.', 'If you write a comment in a line with a code, you must write a comment, leaving 2 spaces before the # sign and 1 space before the # sign', 'Select the lines that you want to comment and then use Ctrl + ? to comment or uncomment the Python code in the Sublime Text editor.']"
120,How to find if directory exists in Python,"In the os module in Python, is there a way to find if a directory exists, something like:

>>> os.direxists(os.path.join(os.getcwd()), 'new_folder')) # in pseudocode
True/False",https://stackoverflow.com/questions/8933237/how-to-find-if-directory-exists-in-python,"['In the os module in Python, is there a way to find if a directory exists, something like:', ""You're looking for os.path.isdir, or os.path.exists if you don't care whether it's a file or a directory."", 'Python 3.4 introduced the pathlib module into the standard library, which provides an object oriented approach to handle filesystem paths. The is_dir() and exists() methods of a Path object can be used to answer the question:', ""So close! os.path.isdir returns True if you pass in the name of a directory that currently exists. If it doesn't exist or it's not a directory, then it returns False."", 'Yes, use os.path.exists().', 'We can check with 2 built in functions', 'Yes use os.path.isdir(path)', 'As in:', 'Just to provide the os.stat version (python 2):', 'os provides you with a lot of these capabilities:', 'There is a convenient Unipath module.', ""Source, if it's still there on SO."", 'Two things']"
121,How do I connect to a MySQL Database in Python?,How do I connect to a MySQL database using a python program?,https://stackoverflow.com/questions/372885/how-do-i-connect-to-a-mysql-database-in-python,"['How do I connect to a MySQL database using a python program?', '1 - Setting', ""Here's one way to do it, using MySQLdb, which only supports Python 2:"", 'If you do not need MySQLdb, but would accept any library, I would very, very much recommend MySQL Connector/Python from MySQL: http://dev.mysql.com/downloads/connector/python/.', 'Oracle (MySQL) now supports a pure Python connector.  That means no binaries to install: it\'s just a Python library.  It\'s called ""Connector/Python"".', 'Stop Using MySQLDb if you want to avoid installing mysql headers just to access mysql from python.', 'Try using MySQLdb. MySQLdb only supports Python 2.', 'As a db driver, there is also oursql. Some of the reasons listed on that link, which say why oursql is better:', 'Run this command in your terminal to install mysql connector:', 'SQLAlchemy is the Python SQL toolkit and Object Relational Mapper that\n  gives application developers the full power and flexibility of SQL.\n  SQLAlchemy provides a full suite of well known enterprise-level\n  persistence patterns, designed for efficient and high-performing\n  database access, adapted into a simple and Pythonic domain language.', 'Despite all answers above, in case you do not want to connect to a specific database upfront, for example, if you want to create the database still (!), you can use connection.select_db(database), as demonstrated in the following.', 'Best way to connect to MySQL from python is to Use MySQL Connector/Python because it is official Oracle driver for MySQL for working with Python and it works with both Python 3 and Python 2.', 'MySQLdb is the straightforward way. You get to execute SQL queries over a connection. Period.', ""Even though some of you may mark this as a duplicate and get upset that I am copying someone else's answer, I would REALLY like to highlight an aspect of Mr. Napik's response.   Because I missed this, I caused nationwide website downtime (9min).  If only someone shared this information, I could have prevented it!"", 'for Python3.6 I found two driver: pymysql and mysqlclient. I tested the performance between them and got the result: the mysqlclient is faster.', 'mysqlclient is the best as others only provide support to specific versions of python', 'Just a modification in above answer. \nSimply run this command to install mysql for python', 'Also take a look at Storm. It is a simple SQL mapping tool which allows you to easily edit and create SQL entries without writing the queries.', 'This is Mysql DB connection', 'you can connect your python code to mysql in this way.', 'For python 3.3', 'first install the driver', 'First install the driver (Ubuntu)', 'PyMySQL 0.10.1 - Released: Sep 10, 2020, has support for python3 as well.', 'First, install python-mysql connector from https://dev.mysql.com/downloads/connector/python/']"
122,Why does comparing strings using either '==' or 'is' sometimes produce a different result?,"I've got a Python program where two variables are set to the value 'public'. In a conditional expression I have the comparison var1 is var2 which fails, but if I change it to var1 == var2 it returns ...",https://stackoverflow.com/questions/1504717/why-does-comparing-strings-using-either-or-is-sometimes-produce-a-differe,"[""I've got a Python program where two variables are set to the value 'public'. In a conditional expression I have the comparison var1 is var2 which fails, but if I change it to var1 == var2 it returns True."", 'is is identity testing, == is equality testing. what happens in your code would be emulated in the interpreter like this:', 'Other answers here are correct: is is used for identity comparison, while == is used for equality comparison. Since what you care about is equality (the two strings should contain the same characters), in this case the is operator is simply wrong and you should be using == instead.', 'The is keyword is a test for object identity while == is a value comparison.', ""One last thing to note, you may use the sys.intern function to ensure that you're getting a reference to the same string:"", 'is is identity testing, == is equality testing. What this means is that is is a way to check whether two things are the same things, or just equivalent.', 'This is a side note, but in idiomatic python, you will often see things like:', ""If you're not sure what you're doing, use the '=='.\nIf you have a little more knowledge about it you can use 'is' for known objects like 'None'."", 'From my limited experience with python, is is used to compare two objects to see if they are the same object as opposed to two different objects with the same value.  == is used to determine if the values are identical.', ""I think it has to do with the fact that, when the 'is' comparison evaluates to false, two distinct objects are used. If it evaluates to true, that means internally it's using the same exact object and not creating a new one, possibly because you created them within a fraction of 2 or so seconds and because there isn't a large time gap in between it's optimized and uses the same object."", 'I believe that this is known as ""interned"" strings. Python does this, so does Java, and so do C and C++ when compiling in optimized modes.', 'I am answering the question even though the question is to old because no answers above quotes the language reference', 'The == operator test value equivalence. The is operator tests object identity, Python tests whether the two are really the same object(i.e., live at the same address in memory).', 'is will compare the memory location. It is used for object-level comparison.', 'is is identity testing, == is equality testing (see Python Documentation).']"
123,"What is the difference between venv, pyvenv, pyenv, virtualenv, virtualenvwrapper, pipenv, etc?","Python 3.3 includes in its standard library the new package venv. What does it do, and how does it differ from all the other packages that seem to match the regex (py)?(v|virtual|pip)?env?",https://stackoverflow.com/questions/41573587/what-is-the-difference-between-venv-pyvenv-pyenv-virtualenv-virtualenvwrappe,"['Python 3.3 includes in its standard library the new package venv. What does it do, and how does it differ from all the other packages that seem to match the regex (py)?(v|virtual|pip)?env?', ""virtualenv is a very popular tool that creates isolated Python environments for Python libraries. If you're not familiar with this tool, I highly recommend learning it, as it is a very useful tool, and I'll be making comparisons to it for the rest of this answer."", 'I would just avoid the use of virtualenv after Python3.3+ and instead use the standard shipped library venv. To create a new virtual environment you would type:', 'Added below ""Conclusion"" paragraph', 'Oct 2020 Update', 'pipenv want combine all, in addition to previous it installs ""requirements"" (into the active virtual environment or create its own\nif none is active)']"
124,How to prettyprint a JSON file?,"I have a JSON file that is a mess that I want to prettyprint. What's the easiest way to do this in Python?

I know PrettyPrint takes an ""object"", which I think can be a file, but I don't know how to ...",https://stackoverflow.com/questions/12943819/how-to-prettyprint-a-json-file,"[""I have a JSON file that is a mess that I want to prettyprint. What's the easiest way to do this in Python?"", 'The json module already implements some basic pretty printing with the indent parameter that specifies how many spaces to indent by:', 'You can do this on the command line:', 'You could use the built-in module pprint (https://docs.python.org/3.6/library/pprint.html).', 'Pygmentize is a killer tool. See this.', ""Use this function and don't sweat having to remember if your JSON is a str or dict again - just look at the pretty print:"", 'To be able to pretty print from the command line and be able to have control over the indentation etc. you can set up an alias similar to this:', 'Use pprint: https://docs.python.org/3.6/library/pprint.html', ""Here's a simple example of pretty printing JSON to the console in a nice way in Python, without requiring the JSON to be on your computer as a local file:"", 'It works to display or save it to a file.', 'You could try pprintjson.', ""I think that's better to parse the json before, to avoid errors:"", ""It's far from perfect, but it does the job.""]"
125,What is the purpose of the word 'self'?,"What is the purpose of the self word in Python? I understand it refers to the specific object created from that class, but I can't see why it explicitly needs to be added to every function as a ...",https://stackoverflow.com/questions/2709821/what-is-the-purpose-of-the-word-self,"[""What is the purpose of the self word in Python? I understand it refers to the specific object created from that class, but I can't see why it explicitly needs to be added to every function as a parameter. To illustrate, in Ruby I can do this:"", ""The reason you need to use self. is because Python does not use the @ syntax to refer to instance attributes. Python decided to do methods in a way that makes the instance to which the method belongs be passed automatically, but not received automatically: the first parameter of methods is the instance the method is called on. That makes methods entirely the same as functions, and leaves the actual name to use up to you (although self is the convention, and people will generally frown at you when you use something else.) self is not special to the code, it's just another object."", ""Let's say you have a class ClassA which contains a method methodA defined as:"", 'Let’s take a simple vector class:', 'When objects are instantiated, the object itself is passed into the self parameter.', 'I like this example:', 'I will demonstrate with code that does not use classes:', 'The following excerpts are from the Python documentation about self:', 'As well as all the other reasons already stated, it allows for easier access to overridden methods; you can call Class.some_method(inst).', 'Its use is similar to the use of this keyword in Java, i.e. to give a reference to the current object.', 'Python is not a language built for Object Oriented Programming unlike Java or C++.', ""It’s there to follow the Python zen “explicit is better than implicit”. It’s indeed a reference to your class object. In Java and PHP, for example, it's called this."", 'First of all, self is a conventional name, you could put anything else (being coherent) in its stead.', 'self is an object reference to the object itself, therefore, they are same.\nPython methods are not called in the context of the object itself.\nself in Python may be used to deal with custom object models or something.', ""The use of the argument, conventionally called self isn't as hard to understand, as is why is it necessary? Or as to why explicitly mention it? That, I suppose, is a bigger question for most users who look up this question, or if it is not, they will certainly have the same question as they move forward learning python. I recommend them to read these couple of blogs:"", ""I'm surprised nobody has brought up Lua. Lua also uses the 'self' variable however it can be omitted but still used. C++ does the same with 'this'. I don't see any reason to have to declare 'self' in each function but you should still be able to use it just like you can with lua and C++. For a language that prides itself on being brief it's odd that it requires you to declare the self variable."", 'Take a look at the following example, which clearly explains the purpose of self', ""Is because by the way python is designed the alternatives would hardly work. Python is designed to allow methods or functions to be defined in a context where both implicit this (a-la Java/C++) or explicit @ (a-la ruby) wouldn't work. Let's have an example with the explicit approach with python conventions:"", 'In the __init__ method, self refers to the newly created object; in other class methods, it refers to the instance whose method was called.', 'self is acting as like current object name or instance of class .', 'There was just a question should self be implicit or explicit.\nGuido van Rossum resolved this question saying self has to stay.', 'from the docs,', 'I would say for Python at least, the self parameter can be thought of as a placeholder.\nTake a look at this:', ""it's an explicit reference to the class instance object."", '""self"" keyword holds the reference of class and it is upto you if you want to use it or not but if you notice, whenever you create a new method in python, python automatically write self keyword for you. If you do some R&D, you will notice that if you create say two methods in a class and try to call one inside another, it does not recognize method unless you add self (reference of class).']"
126,How to install packages using pip according to the requirements.txt file from a local directory?,"Here is the problem

I have a requirements.txt that looks like:

BeautifulSoup==3.2.0
Django==1.3
Fabric==1.2.0
Jinja2==2.5.5
PyYAML==3.09
Pygments==1.4
SQLAlchemy==0.7.1
South==0.7.3
amqplib==0.6.1
...",https://stackoverflow.com/questions/7225900/how-to-install-packages-using-pip-according-to-the-requirements-txt-file-from-a,"['Here is the problem', 'This works for me:', ""I've read the above, realize this is an old question, but it's totally unresolved and still at the top of my google search results so here's an answer that works for everyone:"", 'For virtualenv to install all files in the requirements.txt file.', 'I had a similar problem. I tried this:', 'For further details please check the help option.', 'Short answer', 'Often, you will want a fast install from local archives, without probing PyPI.', 'I work with a lot of systems that have been mucked by developers ""following directions they found on the internet"". It is extremely common that your pip and your python are not looking at the same paths/site-packages. For this reason, when I encounter oddness I start by doing this:', 'first of all, create a virtual environment', 'Installing requirements.txt file inside virtual env with python 3:', 'try this', 'OR']"
127,Does Django scale? [closed],"I'm building a web application with Django. The reasons I chose Django were:
I wanted to work with free/open-source tools.
I like Python and feel it's a long-term language, whereas regarding Ruby I ...",https://stackoverflow.com/questions/886221/does-django-scale,"['Want to improve this question? Update the question so it focuses on one problem only by editing this post.', '""What are the largest sites built on Django today?""', ""We're doing load testing now.  We think we can support 240 concurrent requests (a sustained rate of 120 hits per second 24x7) without any significant degradation in the server performance.  That would be 432,000 hits per hour.  Response times aren't small (our transactions are large) but there's no degradation from our baseline performance as the load increases."", 'Not sure about the number of daily visits but here are a few examples of large Django sites:', 'What\'s the ""largest"" site that\'s built on Django today? (I measure size mostly by user traffic)', ""Scaling Web apps is not about web frameworks or languages, is about your architecture.\nIt's about how you handle you browser cache, your database cache, how you use non-standard persistence providers (like CouchDB), how tuned is your database and a lot of other stuff..."", ""Playing devil's advocate a little bit:"", 'The largest django site I know of is the Washington Post, which would certainly indicate that it can scale well.', ""I was at the EuroDjangoCon conference the other week, and this was the subject of a couple of talks - including from the founders of what was the largest Django-based site, Pownce (slides from one talk here). The main message is that it's not Django you have to worry about, but things like proper caching, load balancing, database optimisation, etc."", ""I'm sure you're looking for a more solid answer, but the most obvious objective validation I can think of is that Google pushes Django for use with its App Engine framework. If anybody knows about and deals with scalability on a regular basis, it's Google. From what I've read, the most limiting factor seems to be the database back-end, which is why Google uses their own..."", 'As stated in High Performance   Django Book\n and Go through this Cal Henderson', 'Today we use many web apps and sites for our needs. Most of them are highly useful. I will show you some of them used by python or django.', ""I think we might as well add Apple's App of the year for 2011, Instagram, to the list which uses django intensively."", 'Yes it can. It could be Django with Python or Ruby on Rails. It will still scale.', ""Here's a list of some relatively high-profile things built in Django:"", 'The developer advocate for YouTube gave a talk about scaling Python at PyCon 2012, which is also relevant to scaling Django.', 'I have been using Django for over a year now, and am very impressed with how it manages to combine modularity, scalability and speed of development. Like with any technology, it comes with a learning curve. However, this learning curve is made a lot less steep by the excellent documentation from the Django community. Django has been able to handle everything I have thrown at it really well. It looks like it will be able to scale well into the future.', ""Note that if you're expecting 100K users per day, that are active for hours at a time (meaning max of 20K+ concurrent users), you're going to need A LOT of servers.  SO has ~15,000 registered users, and most of them are probably not active daily.  While the bulk of traffic comes from unregistered users, I'm guessing that very few of them stay on the site more than a couple minutes (i.e. they follow google search results then leave)."", 'What\'s the ""largest"" site that\'s built on Django today? (I measure size mostly by user traffic)\nPinterest\ndisqus.com\nMore here: https://www.shuup.com/en/blog/25-of-the-most-popular-python-and-django-websites/', 'Another example is rasp.yandex.ru, Russian transport timetable service. Its attendance satisfies your requirements.', 'If you have a site with some static content, then putting a Varnish server in front will dramatically increase your performance. Even a single box can then easily spit out 100 Mbit/s of traffic.', 'My experience with Django is minimal but I do remember in The Django Book they have a chapter where they interview people running some of the larger Django applications.  Here is a link.  I guess it could provide some insights.', ""I develop high traffic sites using Django for the national broadcaster in Ireland. It works well for us. Developing a high performance site is more than about just choosing a framework. A framework will only be one part of a system that is as strong as it's weakest link. Using the latest framework 'X' won't solve your performance issues if the problem is slow database queries or a badly configured server or network."", 'Even-though there have been a lot of great answers here, I just feel like pointing out, that nobody have put emphasis on..', ""I don't think the issue is really about Django scaling."", 'You can definitely run a high-traffic site in Django. Check out this pre-Django 1.0 but still relevant post here: http://menendez.com/blog/launching-high-performance-django-site/', 'Check out this micro news aggregator called EveryBlock.', 'The problem is not to know if django can scale or not.', 'If you want to use Open source then there are many options for you. But python is best among them as it has many libraries and a super awesome community.\nThese are a few reasons which might change your mind:', ""Spreading the tasks evenly, in short optimizing each and every aspect including DBs, Files, Images, CSS etc. and balancing the load with several other resources is necessary once your site/application starts growing. OR you make some more space for it to grow. Implementation of latest technologies like CDN, Cloud are must with huge sites. Just developing and tweaking an application won't give your the cent percent satisfation, other components also play an important role.""]"
128,How can I represent an 'Enum' in Python?,"I'm mainly a C# developer, but I'm currently working on a project in Python.

How can I represent the equivalent of an Enum in Python?",https://stackoverflow.com/questions/36932/how-can-i-represent-an-enum-in-python,"[""I'm mainly a C# developer, but I'm currently working on a project in Python."", 'Enums have been added to Python 3.4 as described in PEP 435.  It has also been backported to 3.3, 3.2, 3.1, 2.7, 2.6, 2.5, and 2.4 on pypi.', ""Before PEP 435, Python didn't have an equivalent but you could implement your own."", 'Here is one implementation:', ""If you need the numeric values, here's the quickest way:"", 'The best solution for you would depend on what you require from your fake enum.', ""The typesafe enum pattern which was used in Java pre-JDK 5 has a\nnumber of advantages. Much like in Alexandru's answer, you create a\nclass and class level fields are the enum values; however, the enum\nvalues are instances of the class rather than small integers. This has\nthe advantage that your enum values don't inadvertently compare equal\nto small integers, you can control how they're printed, add arbitrary\nmethods if that's useful and make assertions using isinstance:"", 'An Enum class can be a one-liner.', ""So, I agree. Let's not enforce type safety in Python, but I would like to protect myself from silly mistakes. So what do we think about this?"", ""Python doesn't have a built-in equivalent to enum, and other answers have ideas for implementing your own (you may also be interested in the over the top version in the Python cookbook)."", 'On 2013-05-10, Guido agreed to accept PEP 435 into the Python 3.4 standard library. This means that Python finally has builtin support for enumerations!', 'I prefer to define enums in Python like so:', 'Use it like this:', 'From Python 3.4 there will be official support for enums. You can find documentation and examples here on Python 3.4 documentation page.', 'Another, very simple, implementation of an enum in Python, using namedtuple:', 'Hmmm... I suppose the closest thing to an enum would be a dictionary, defined either like this:', 'What I use:', ""davidg recommends using dicts.  I'd go one step further and use sets:"", 'Keep it simple:', 'This is the best one I have seen: ""First Class Enums in Python""', 'The new standard in Python is PEP 435, so an Enum class will be available in future versions of Python:', ""I have had occasion to need of an Enum class, for the purpose of decoding a binary file format. The features I happened to want is concise enum definition, the ability to freely create instances of the enum by either integer value or string, and a useful representation.  Here's what I ended up with:"", ""I really like Alec Thomas' solution (http://stackoverflow.com/a/1695250):"", 'If you name it, is your problem, but if not creating objects instead of values allows you to do this:', 'The enum package from PyPI provides a robust implementation of enums. An earlier answer mentioned PEP 354; this was rejected but the proposal was implemented \nhttp://pypi.python.org/pypi/enum.', ""Alexandru's suggestion of using class constants for enums works quite well."", ""Here's an approach with some different characteristics I find valuable:"", ""While the original enum proposal, PEP 354, was rejected years ago, it keeps coming back up. Some kind of enum was intended to be added to 3.2, but it got pushed back to 3.3 and then forgotten. And now there's a PEP 435 intended for inclusion in Python 3.4. The reference implementation of PEP 435 is flufl.enum."", 'Use the following.', ""Here is a variant on Alec Thomas's solution:"", 'This solution is a simple way of getting a class for the enumeration defined as a list (no more annoying integer assignments):']"
129,How to terminate a Python script,"I am aware of the die() command in PHP which exits a script early.

How can I do this in Python?",https://stackoverflow.com/questions/73663/how-to-terminate-a-python-script,"['I am aware of the die() command in PHP which exits a script early.', 'details from the sys module documentation:', 'A simple way to terminate a Python script early is to use the built-in quit() function. There is no need to import any library, and it is efficient and simple.', 'Another way is:', 'You can also use simply exit().', 'While you should generally prefer sys.exit because it is more ""friendly"" to other code, all it actually does is raise an exception.', 'I\'ve just found out that when writing a multithreadded app, raise SystemExit and sys.exit() both kills only the running thread. On the other hand, os._exit() exits the whole process. This was discussed in ""Why does sys.exit() not exit when called inside a thread in Python?"".', 'As a parameter you can pass an exit code, which will be returned to OS. Default is 0.', ""I'm a total novice but surely this is cleaner and more controlled"", ""In Python 3.5, I tried to incorporate similar code without use of modules (e.g. sys, Biopy) other than what's built-in to stop the script and print an error message to my users. Here's my example:"", 'My two cents.']"
130,"In Python, how do I determine if an object is iterable?","Is there a method like isiterable? The only solution I have found so far is to call

hasattr(myObj, '__iter__')
But I am not sure how fool-proof this is.",https://stackoverflow.com/questions/1952464/in-python-how-do-i-determine-if-an-object-is-iterable,"['Is there a method like isiterable? The only solution I have found so far is to call', 'Checking for __iter__ works on sequence types, but it would fail on e.g. strings in Python 2. I would like to know the right answer too, until then, here is one possibility (which would work on strings, too):', 'Use the Abstract Base Classes. They need at least Python 2.6 and work only for new-style classes.', ""I'd like to shed a little bit more light on the interplay of iter, __iter__ and __getitem__ and what happens behind the curtains. Armed with that knowledge, you will be able to understand why the best you can do is"", ""I've been studying this problem quite a bit lately. Based on that my conclusion is that nowadays this is the best approach:"", ""This isn't sufficient: the object returned by __iter__ must implement the iteration protocol (i.e. next method). See the relevant section in the documentation."", 'Since Python 3.5 you can use the typing module from the standard library for type related things:', 'In Python <= 2.5, you can\'t and shouldn\'t - iterable was an ""informal"" interface.', ""Don't run checks to see if your duck really is a duck to see if it is iterable or not, treat it as if it was and complain if it wasn't."", ""The best solution I've found so far:"", 'You could try this:', 'I found a nice solution here:', 'According to the Python 2 Glossary, iterables are', ""I often find convenient, inside my scripts, to define an iterable function.\n(Now incorporates Alfe's suggested simplification):"", 'pandas has a built-in function like that:', ""It's always eluded me as to why python has callable(obj) -> bool but not iterable(obj) -> bool...\nsurely it's easier to do hasattr(obj,'__call__') even if it is slower."", ""This will say yes to all manner of iterable objects, but it will say no to strings in Python 2. (That's what I want for example when a recursive function could take a string or a container of strings.  In that situation, asking forgiveness may lead to obfuscode, and it's better to ask permission first.)"", ""The easiest way, respecting the Python's duck typing, is to catch the error (Python knows perfectly what does it expect from an object to become an iterator):"", ""The isiterable func at the following code returns True if object is iterable. if it's not iterable returns False"", 'Instead of checking for the __iter__ attribute, you could check for the __len__ attribute, which is implemented by every python builtin iterable, including strings.', 'Not really ""correct"" but can serve as quick check of most common types like strings, tuples, floats, etc...', ""Kinda late to the party but I asked myself this question and saw this then thought of an answer. I don't know if someone already posted this. But essentially, I've noticed that all iterable types have __getitem__() in their dict. This is how you would check if an object was an iterable without even trying. (Pun intended)""]"
131,"If Python is interpreted, what are .pyc files?","I've been given to understand that Python is an interpreted language...
 However, when I look at my Python source code I see .pyc files, which Windows identifies as ""Compiled Python Files"".   

Where ...",https://stackoverflow.com/questions/2998215/if-python-is-interpreted-what-are-pyc-files,"['I\'ve been given to understand that Python is an interpreted language...\n However, when I look at my Python source code I see .pyc files, which Windows identifies as ""Compiled Python Files"".', ""They contain byte code, which is what the Python interpreter compiles the source to. This code is then executed by Python's virtual machine."", ""I've been given to understand that\n  Python is an interpreted language..."", 'There is no such thing as an interpreted language. Whether an interpreter or a compiler is used is purely a trait of the implementation and has absolutely nothing whatsoever to do with the language.', 'These are created by the Python interpreter when a .py file is imported, and they contain the ""compiled bytecode"" of the imported module/program, the idea being that the ""translation"" from source code to bytecode (which only needs to be done once) can be skipped on subsequent imports if the .pyc is newer than the corresponding .py file, thus speeding startup a little. But it\'s still interpreted.', 'To speed up loading modules, Python caches the compiled content of modules in .pyc.', 'THIS IS FOR BEGINNERS,', 'Python (at least the most common implementation of it) follows a pattern of compiling the original source to byte codes, then interpreting the byte codes on a virtual machine. This means (again, the most common implementation) is neither a pure interpreter nor a pure compiler.', 'Python\'s *.py file is just a text file in which you write some lines of code. When you try to execute this file using say ""python filename.py""', 'Python code goes through 2 stages. First step compiles the code into .pyc files which is actually a bytecode. Then this .pyc file(bytecode) is interpreted using CPython interpreter. Please refer to this link. Here process of code compilation and execution is explained in easy terms.', ""tldr; it's a converted code form the source code, which the python VM interprets for execution."", ""Machines don't understand English or any other languages, they understand only byte code, which they have to be compiled (e.g., C/C++, Java) or interpreted (e.g., Ruby, Python), the .pyc is a cached version of the byte code.\nhttps://www.geeksforgeeks.org/difference-between-compiled-and-interpreted-language/\nHere is a quick read on what is the difference between compiled language vs interpreted language, TLDR is interpreted language does not require you to compile all the code before run time and thus most of the time they are not strict on typing etc.""]"
132,How can I do a line break (line continuation) in Python?,"I have a long line of code that I want to break up among multiple lines. What do I use and what is the syntax?

For example, adding a bunch of strings,

e = 'a' + 'b' + 'c' + 'd'
and have it in two ...",https://stackoverflow.com/questions/53162/how-can-i-do-a-line-break-line-continuation-in-python,"['I have a long line of code that I want to break up among multiple lines. What do I use and what is the syntax?', 'What is the line?  You can just have arguments on the next line without any problems:', 'From PEP 8 -- Style Guide for Python Code:', 'The danger in using a backslash to end a line is that if whitespace is added after the backslash (which, of course, is very hard to see), the backslash is no longer doing what you thought it was.', 'Put a \\ at the end of your line or enclose the statement in parens ( .. ). From IBM:', 'You can break lines in between parenthesises and braces. Additionally, you can append the backslash character \\ to a line to explicitly break it:', ""From the horse's mouth: Explicit line\n  joining"", 'It may not be the Pythonic way, but I generally use a list with the join function for writing a long string, like SQL queries:', 'If you want to break your line because of a long literal string, you can break that string into pieces:', ""Taken from The Hitchhiker's Guide to Python (Line Continuation):"", 'Use the line continuation operator i.e. ""\\""']"
133,Correct way to write line to file?,"I'm used to doing print >>f, ""hi there""

However, it seems that print >> is getting deprecated. What is the recommended way to do the line above?

Update:
Regarding all those answers with ""...",https://stackoverflow.com/questions/6159900/correct-way-to-write-line-to-file,"['I\'m used to doing print >>f, ""hi there""', 'This should be as simple as:', 'You should use the print() function which is available since Python 2.6+', 'The python docs recommend this way:', 'Regarding os.linesep:', 'I do not think there is a ""correct"" way.', 'In Python 3 it is a function, but in Python 2 you can add this to the top of the source file:', 'If you are writing a lot of data and speed is a concern you should probably go with f.write(...). I did a quick speed comparison and it was considerably faster than print(..., file=f) when performing a large number of writes.', 'Since 3.5 you can also use the pathlib for that purpose:', ""When you said Line it means some serialized characters which are ended to '\\n' characters. Line should be last at some point so we should consider '\\n' at the end of each line. Here is solution:"", 'One can also use the io module as in:', 'To write text in a file in the flask can be used:', 'You can also try filewriter', 'When I need to write new lines a lot, I define a lambda that uses a print function:', 'If you want to avoid using write() or writelines() and joining the strings with a newline yourself, you can pass all of your lines to print(), and the newline delimiter and your file handle as keyword arguments. This snippet assumes your strings do not have trailing newlines.']"
134,How do I return multiple values from a function? [closed],"The canonical way to return multiple values in languages that support it is often tupling.
Option: Using a tuple
Consider this trivial example:
def f(x):
  y0 = x + 1
  y1 = x * 3
  y2 = y0 ** y3
  ...",https://stackoverflow.com/questions/354883/how-do-i-return-multiple-values-from-a-function,"['Want to improve this question? Update the question so it can be answered with facts and citations by editing this post.', 'Named tuples were added in 2.6 for this purpose.  Also see os.stat for a similar builtin example.', 'For small projects I find it easiest to work with tuples. When that gets too hard to manage (and not before) I start grouping things into logical structures, however I think your suggested use of dictionaries and ReturnValue objects is wrong (or too simplistic).', 'A lot of the answers suggest you need to return a collection of some sort, like a dictionary or a list. You could leave off the extra syntax and just write out the return values, comma-separated. Note: this technically returns a tuple.', 'I vote for the dictionary.', 'Another option would be using generators:', 'I prefer to use tuples whenever a tuple feels ""natural""; coordinates are a typical example, where the separate objects can stand on their own, e.g. in one-axis only scaling calculations, and the order is important. Note: if I can sort or shuffle the items without an adverse effect to the meaning of the group, then I probably shouldn\'t use a tuple.', 'I prefer:', 'Generally, the ""specialized structure"" actually IS a sensible current state of an object, with its own methods.', 'Python\'s tuples, dicts, and objects offer the programmer a smooth tradeoff between formality and convenience for small data structures (""things""). For me, the choice of how to represent a thing is dictated mainly by how I\'m going to use the structure. In C++, it\'s a common convention to use struct for data-only items and class for objects with methods, even though you can legally put methods on a struct; my habit is similar in Python, with dict and tuple in place of struct.', ""+1 on S.Lott's suggestion of a named container class."", 'In languages like Python, I would usually use a dictionary as it involves less overhead than creating a new class.', 'I would use a dict to pass and return values from a function:', '""Best"" is a partially subjective decision. Use tuples for small return sets in the general case where an immutable is acceptable. A tuple is always preferable to a list when mutability is not a requirement.']"
135,How do I get time of a Python program's execution?,"I have a command line program in Python that takes a while to finish. I want to know the exact time it takes to finish running.

I've looked at the timeit module, but it seems it's only for small ...",https://stackoverflow.com/questions/1557571/how-do-i-get-time-of-a-python-programs-execution,"['I have a command line program in Python that takes a while to finish. I want to know the exact time it takes to finish running.', 'The simplest way in Python:', 'I put this timing.py module into my own site-packages directory, and just insert import timing at the top of my module:', 'In Linux or Unix:', 'time.clock() returns the processor time, which allows us to calculate only the time used by this process (on Unix anyway). The documentation says ""in any case, this is the function to use for benchmarking Python or timing algorithms""', ""I really like Paul McGuire's answer, but I use Python 3. So for those who are interested: here's a modification of his answer that works with Python 3 on *nix (I imagine, under Windows, that clock() should be used instead of time()):"", 'I like the output the datetime module provides, where time delta objects show days, hours, minutes, etc. as necessary in a human-readable way.', ""You can use the Python profiler cProfile to measure CPU time and additionally how much time is spent inside each function and how many times each function is called. This is very useful if you want to improve performance of your script without knowing where to start. This answer to another Stack\xa0Overflow question is pretty good. It's always good to have a look in the documentation too."", 'Even better for Linux: time', 'Just use the timeit module. It works with both Python 2 and Python 3.', 'time.clock()', 'The following snippet prints elapsed time in a nice human readable <HH:MM:SS> format.', ""I liked Paul McGuire's answer too and came up with a context manager form which suited my needs more."", 'In IPython, ""timeit"" any script:', ""I've looked at the timeit module, but it seems it's only for small snippets of code. I want to time the whole program."", ""In a cell, you can use Jupyter's %%time magic command to measure the execution time:"", 'I was having the same problem in many places, so I created a convenience package horology. You can install it with pip install horology and then do it in the elegant way:', 'There is a timeit module which can be used to time the execution times of Python code.', 'Use line_profiler.', 'I used a very simple function to time a part of code execution:', 'Later answer, but I use timeit:', 'Similar to the response from @rogeriopvl I added a slight modification to convert to hour minute seconds using the same library for long running jobs.', 'First, install humanfriendly package by opening Command Prompt (CMD) as administrator and type there -\npip install humanfriendly', ""This is Paul McGuire's answer that works for me. Just in case someone was having trouble running that one."", 'Timeit is a class in Python used to calculate the execution time of small blocks of code.', 'You do this simply in Python. There is no need to make it complicated.', ""The time of a Python program's execution measure could be inconsistent depending on:"", 'I tried and found time difference using the following scripts.', ""To use metakermit's updated answer for Python\xa02.7, you will require the monotonic package."", ""If you want to measure time in microseconds, then you can use the following version, based completely on the answers of Paul McGuire and Nicojo - it's Python\xa03 code. I've also added some colour to it:""]"
136,How to get the filename without the extension from a path in Python?,"How to get the filename without the extension from a path in Python?
For instance, if I had ""/path/to/some/file.txt"", I would want ""file"".",https://stackoverflow.com/questions/678236/how-to-get-the-filename-without-the-extension-from-a-path-in-python,"['How to get the filename without the extension from a path in Python?', 'Getting the name of the file without the extension:', 'You can make your own with:', 'Using pathlib in Python 3.4+', 'In Python 3.4+ you can use the pathlib solution', 'https://docs.python.org/3/library/os.path.html', 'If you want to keep the path to the file and just remove the extension', ""os.path.splitext() won't work if there are multiple dots in the extension."", ""@IceAdor's refers to rsplit in a comment to @user2902201's solution.  rsplit is the simplest solution that supports multiple periods."", 'But even when I import os, I am not able to call it path.basename. Is it possible to call it as directly as basename?', 'Thought I would throw in a variation to the use of the os.path.splitext without the need to use array indexing.', ""The other methods don't remove multiple extensions. Some also have problems with filenames that don't have extensions. This snippet deals with both instances and works in both Python 2 and 3. It grabs the basename from the path, splits the value on dots, and returns the first one which is the initial part of the filename."", 'import os', 'A multiple extension aware procedure. Works for str and unicode paths. Works in Python 2 and 3.', 'Very very very simpely no other modules !!!', 'On Windows system I used drivername prefix as well, like:', 'We could do some simple split / pop magic as seen here (https://stackoverflow.com/a/424006/1250044), to extract the filename (respecting the windows and POSIX differences).', 'For convenience, a simple function wrapping the two methods from os.path :', 'the easiest way to resolve this is to', ""I didn't look very hard but I didn't see anyone who used regex for this problem."", ""import os\nfilename, file_extension = os.path.splitext('/d1/d2/example.cs')\nfilename is '/d1/d2/example'\nfile_extension is '.cs'""]"
137,How can I check for NaN values?,"float('nan') results in Nan (not a number). But how do I check for it? Should be very easy, but I cannot find it.",https://stackoverflow.com/questions/944700/how-can-i-check-for-nan-values,"[""float('nan') results in Nan (not a number). But how do I check for it? Should be very easy, but I cannot find it."", 'math.isnan(x)', ""The usual way to test for a NaN is to see if it's equal to itself:"", ""numpy.isnan(number) tells you if it's NaN or not."", 'Output', 'here is an answer working with:', 'I actually just ran into this, but for me it was checking for nan, -inf, or inf. I just used', 'math.isnan()', ""Another method if you're stuck on <2.6, you don't have numpy, and you don't have IEEE 754 support:"", ""Well I entered this post, because i've had some issues with the function:"", ""It seems that checking if it's equal to itself"", 'With python < 2.6 I ended up with', ""I am receiving the data from a web-service that sends NaN as a string 'Nan'. But there could be other sorts of string in my data as well, so a simple float(value) could throw an exception. I used the following variant of the accepted answer:"", 'All the methods to tell if the variable is NaN or None:', ""In Python 3.6 checking on a string value x math.isnan(x) and np.isnan(x) raises an error. \nSo I can't check if the given value is NaN or not if I don't know beforehand it's a number.\nThe following seems to solve this issue"", 'If you have mixed types in an iterable, here is a solution that does not use numpy:', 'For nan of type float', 'for strings in panda take pd.isnull:']"
138,How do I trim whitespace?,"Is there a Python function that will trim whitespace (spaces and tabs) from a string?

Example: \t example string\t → example string",https://stackoverflow.com/questions/1185524/how-do-i-trim-whitespace,"['Is there a Python function that will trim whitespace (spaces and tabs) from a string?', 'For whitespace on both sides use str.strip:', 'Python trim method is called strip:', 'For leading and trailing whitespace:', 'You can also use very simple, and basic function: str.replace(), works with the whitespaces and tabs:', 'No one has posted these regex solutions yet.', 'Whitespace includes space, tabs and CRLF. So an elegant and one-liner string function we can use is translate.', ""(re.sub(' +', ' ',(my_str.replace('\\n',' ')))).strip()"", 'output:', 'Having looked at quite a few solutions here with various degrees of understanding, I wondered what to do if the string was comma separated...', 'If using Python 3: In your print statement, finish with sep="""". That will separate out all of the spaces.', 'try translate', 'If you want to trim the whitespace off just the beginning and end of the string, you can do something like this:', 'Generally, I am using the following method:', 'This will remove all whitespace and newlines from both the beginning and end of a string:']"
139,Why do people write #!/usr/bin/env python on the first line of a Python script?,It seems to me like the files run the same without that line.,https://stackoverflow.com/questions/2429511/why-do-people-write-usr-bin-env-python-on-the-first-line-of-a-python-script,"['It seems to me like the files run the same without that line.', ""If you have several versions of Python installed, /usr/bin/env will ensure the interpreter used is the first one on your environment's $PATH. The alternative would be to hardcode something like #!/usr/bin/python; that's ok, but less flexible."", 'That is called the shebang line. As the Wikipedia entry explains:', ""Expanding a bit on the other answers, here's a little example of how your command line scripts can get into trouble by incautious use of /usr/bin/env shebang lines:"", 'In order to run the python script, we need to tell the shell three things:', 'The exec system call of the Linux kernel understands shebangs (#!) natively', 'Perhaps your question is in this sense:', 'Technically, in Python, this is just a comment line.', 'The main reason to do this is to make the script portable across operating system environments.', ""It probably makes sense to emphasize one thing that the most have missed, which may prevent immediate understanding. When you type python in terminal you don't normally provide a full path. Instead, the executable is up looked in PATH environment variable. In turn, when you want to execute a Python program directly, /path/to/app.py, one must tell the shell what interpreter to use (via the hashbang, what the other contributors are explaining above)."", 'This is a shell convention that tells the shell which program can execute the script.', ""It's recommended way, proposed in documentation:"", 'You can try this issue using virtualenv', 'It just specifies what interpreter you want to use. To understand this, create a file through terminal by doing touch test.py, then type into that file the following:', 'It seems to me like the files run the same without that line.', 'This is meant as more of historical information than a ""real"" answer.', ""If you're running your script in a virtual environment, say venv, then executing which python while working on venv will display the path to the Python interpreter:"", 'Considering the portability issues between python2 and python3, you should always specify either version unless your program is compatible with both.', 'The line #!/bin/bash/python3 or #!/bin/bash/python specifies which python compiler to use. You might have multiple python versions installed. For example,\na.py :', 'It tells the interpreter which version of python to run the program with when you have multiple versions of python.', 'It allows you to select the executable that you wish to use; which is very\nhandy if perhaps you have multiple python installs, and different modules\nin each and wish to choose. e.g.', 'this tells the script where is python directory !']"
140,Removing duplicates in the lists,Pretty much I need to write a program that checks if a list has any duplicates and if it does it removes them and returns a new list with the items that weren't duplicated/removed. This is what I have ...,https://stackoverflow.com/questions/7961363/removing-duplicates-in-the-lists,"[""Pretty much I need to write a program that checks if a list has any duplicates and if it does it removes them and returns a new list with the items that weren't duplicated/removed. This is what I have tried but honestly I don't know what to do."", 'The common approach to get a unique collection of items is to use a set. Sets are unordered collections of distinct objects. To create a set from any iterable, you can simply pass it to the built-in set() function. If you later need a real list again, you can similarly pass the set to the list() function.', 'In Python 2.7, the new way of removing duplicates from an iterable while keeping it in the original order is:', ""It's a one-liner: list(set(source_list)) will do the trick."", ""If you don't care about the order, just do this:"", 'To make a new list  retaining the order of first elements of duplicates in L', 'A colleague have sent the accepted answer as part of his code to me for a codereview today.\nWhile I certainly admire the elegance of the answer in question, I am not happy with the performance.\nI have tried this solution (I use set to reduce lookup time)', 'There are also solutions using Pandas and Numpy. They both return numpy array so you have to use the function .tolist() if you want a list.', 'Another way of doing:', 'Simple and easy:', 'In this answer, will be two sections: Two unique solutions, and a graph of speed for specific solutions.', 'I had a dict in my list, so I could not use the above approach. I got the error:', ""All the order-preserving approaches I've seen here so far either use naive  comparison (with O(n^2) time-complexity at best) or heavy-weight OrderedDicts/set+list combinations that are limited to hashable inputs. Here is a hash-independent O(nlogn) solution:"", 'If you want to preserve the order, and not use any external modules here is an easy way to do this:', 'You could also do this:', ""Very late answer. If you don't care about the list order, you can use *arg expansion to remove dupes, i.e.:"", 'Try using sets:', 'Reduce variant with ordering preserve:', 'Best approach of removing duplicates from a list is using set() function, available in python, again converting that set into list', 'You can use set to remove duplicates:', 'One more better approach could be,', 'You can use the following function:', ""There are many other answers suggesting different ways to do this, but they're all batch operations, and some of them throw away the original order. That might be okay depending on what you need, but if you want to iterate over the values in the order of the first instance of each value, and you want to remove the duplicates on-the-fly versus all at once, you could use this generator:"", 'Without using set', 'This one cares about the order without too much hassle (OrderdDict & others). Probably not the most Pythonic way, nor shortest way, but does the trick:', 'below code is simple for removing duplicate in list', ""Here's the fastest pythonic solution comaring to others listed in replies."", 'Using set :', 'Unfortunately. Most answers here either do not preserve the order or are too long. Here is a simple, order preserving answer.', ""In python, it is very easy to process the complicated cases like this and only by python's built-in type.""]"
141,What is setup.py?,Can anyone please explain what setup.py is and how it can be configured or used?,https://stackoverflow.com/questions/1471994/what-is-setup-py,"['Can anyone please explain what setup.py is and how it can be configured or used?', 'setup.py is a python file, which usually tells you that the module/package you are about to install has been packaged and distributed with Distutils, which is the standard for distributing Python Modules.', 'It helps to install a python package foo on your machine (can also be in virtualenv) so that you can import the package foo from other projects and also from [I]Python prompts.', ""setup.py is Python's answer to a multi-platform installer and make file."", 'If you downloaded package that has ""setup.py"" in root folder, you can install it by running', ""setup.py is a Python script that is usually shipped with libraries or programs, written in that language. It's purpose is the correct installation of the software."", 'setup.py can be used in two scenarios , First, you want to install a Python package. Second, you want to create your own Python package. Usually standard Python package has couple of important files like setup.py, setup.cfg and Manifest.in. When you are creating the Python package, these three files will determine the (content in PKG-INFO under egg-info folder) name, version, description, other required installations (usually in .txt file) and few other parameters. setup.cfg is read by setup.py while package is created (could be tar.gz ). Manifest.in is where you can define what should be included in your package. Anyways you can do bunch of stuff using setup.py like', 'setup.py is a Python file like any other.  It can take any name, except by convention it is named setup.py so that there is not a different procedure with each script.', 'When you download a package with setup.py open your Terminal (Mac,Linux) or Command Prompt (Windows). Using cd  and helping you with Tab button set the path right to the folder where you have downloaded the file and where there is setup.py :', ""To install a Python package you've downloaded, you extract the archive and run the setup.py script inside:"", 'To make it simple, setup.py is run as ""__main__"" when you call the install functions the other answers mentioned. Inside setup.py, you should put everything needed to install your package.']"
142,How can I reverse a list in Python?,"How can I do the following in Python?

array = [0, 10, 20, 40]
for (i = array.length() - 1; i >= 0; i--)
I need to have the elements of an array, but from the end to the beginning.",https://stackoverflow.com/questions/3940128/how-can-i-reverse-a-list-in-python,"['How can I do the following in Python?', 'You can make use of the reversed function for this as:', ""Extended slice syntax is explained well in the Python What's new Entry for release 2.3.5"", 'Or', 'This is to duplicate the list:', 'I think that the best way to reverse a list in Python is to do:', 'Using slicing, e.g. array = array[::-1], is a neat trick and very Pythonic, but a little obscure for newbies maybe. Using the reverse() method is a good way to go in day to day coding because it is easily readable.', 'For reversing the same list use:', ""I find (contrary to some other suggestions) that l.reverse() is by far the fastest way to reverse a long list in Python 3 and 2. I'd be interested to know if others can replicate these timings."", 'With reversed and list:', 'There are three different built-in ways to reverse a list. Which method is best depends on whether you need to:', 'Using reversed(array) would be the likely best route.', 'If you want to store the elements of reversed list in some other variable, then you can use revArray = array[::-1] or revArray = list(reversed(array)).', ""In Python, lists' order too can be manipulated with sort, organizing your variables in numerical/alphabetical order:"", 'Using some old school logic to practice for interviews.', 'You can also use the bitwise complement of the array index to step through the array in reverse:', 'Use list comprehension:', ""With minimum amount of built-in functions, assuming it's interview settings"", 'Another solution would be to use numpy.flip for this', 'Strictly speaking, the question is not how to return a list in reverse but rather how to reverse a list with an example list name array.', 'use', 'There are 3 methods to get the reversed list:', 'The most direct translation of your requirement into Python is this for statement:', ""You could always treat the list like a stack just popping the elements off the top of the stack from the back end of the list. That way you take advantage of first in last out characteristics of a stack. Of course you are consuming the 1st array. I do like this method in that it's pretty intuitive in that you see one list being consumed from the back end while the other is being built from the front end."", 'Reversing in-place by switching references of opposite indices:']"
143,How to get the ASCII value of a character,How do I get the ASCII value of a character as an int in Python?,https://stackoverflow.com/questions/227459/how-to-get-the-ascii-value-of-a-character,"['How do I get the ASCII value of a character as an int in Python?', 'From here:', ""Note that ord() doesn't give you the ASCII value per se; it gives you the numeric value of the character in whatever encoding it's in. Therefore the result of ord('ä') can be 228 if you're using Latin-1, or it can raise a TypeError if you're using UTF-8. It can even return the Unicode codepoint instead if you pass it a unicode:"", 'You are looking for:', 'The accepted answer is correct, but there is a more clever/efficient way to do this if you need to convert a whole bunch of ASCII characters to their ASCII codes at once. Instead of doing:', 'To get the ASCII code of a character, you can use the ord() function.']"
144,How do I get the row count of a pandas DataFrame?,"I'm trying to get the number of rows of dataframe df with Pandas, and here is my code.

Method 1:

total_rows = df.count
print total_rows +1
Method 2:

total_rows = df['First_columnn_label'].count
...",https://stackoverflow.com/questions/15943769/how-do-i-get-the-row-count-of-a-pandas-dataframe,"[""I'm trying to get the number of rows of dataframe df with Pandas, and here is my code."", 'You can use the .shape property or just len(DataFrame.index). However, there are notable performance differences ( len(DataFrame.index) is fastest).', 'Suppose df is your dataframe then:', 'Use len(df).', ""This table summarises the different situations in which you'd want to count something in a DataFrame (or Series, for completeness), along with the recommended method(s)."", 'Short, clear and clean:  use len(df)', 'Apart from above answers use can use df.axes to get the tuple with row and column indexes and then use len() function:', ""...building on Jan-Philip Gehrcke's answer."", 'I come to pandas from R background, and I see that pandas is more complicated when it comes to selecting row or column.\nI had to wrestle with it for a while, then I found some ways to deal with:', 'Hey you can use do this also:', 'In case you want to get the row count in the middle of a chained operation, you can use:', 'For dataframe df, a printed comma formatted row count used while exploring data:', 'Either of this can do (df is the name of the DataFrame):', 'An alternative method to finding out the amount of rows in a dataframe which I think is the most readable variant is pandas.Index.size.', ""I'm not sure if this would work(data COULD be omitted), but this may work:""]"
145,How to put the legend out of the plot,"I have a series of 20 plots (not subplots) to be made in a single figure.  I want the legend to be outside of the box.  At the same time, I do not want to change the axes, as the size of the figure ...",https://stackoverflow.com/questions/4700614/how-to-put-the-legend-out-of-the-plot,"['I have a series of 20 plots (not subplots) to be made in a single figure.  I want the legend to be outside of the box.  At the same time, I do not want to change the axes, as the size of the figure gets reduced.  Kindly help me for the following queries:', '', 'There are a number of ways to do what you want.  To add to what @inalis and @Navi already said, you can use the bbox_to_anchor keyword argument to place the legend partially outside the axes and/or decrease the font size.', '##Placing the legend (bbox_to_anchor)\nA legend is positioned inside the bounding box of the axes using the loc argument to plt.legend.\nE.g. loc=""upper right"" places the legend in the upper right corner of the bounding box, which by default extents from (0,0) to (1,1) in axes coordinates (or in bounding box notation (x0,y0, width, height)=(0,0,1,1)).', 'Just call legend() call after the plot() call like this:', 'To place the legend outside the plot area, use loc and bbox_to_anchor keywords of legend(). For example, the following code will place the legend to the right of the plot area:', ""Short answer: you can use bbox_to_anchor + bbox_extra_artists + bbox_inches='tight'."", 'In addition to all the excellent answers here, newer versions of matplotlib and pylab can automatically determine where to put the legend without interfering with the plots, if possible.', 'Short Answer: Invoke draggable on the legend and interactively move it wherever you want:', ""Not exactly what you asked for, but I found it's an alternative for the same problem.\nMake the legend semi-transparant, like so:"", ""As noted, you could also place the legend in the plot, or slightly off it to the edge as well. Here is an example using the Plotly Python API, made with an IPython Notebook. I'm on the team."", ""It's worth refreshing this question, as newer versions of Matplotlib have made it much easier to position the legend outside the plot. I produced this example with Matplotlib version 3.1.1."", ""don't know if you already sorted out your issue...probably yes, but...\nI simply used the string 'outside' for the location, like in matlab.\nI imported pylab from matplotlib.\nsee the code as follow:"", 'Something along these lines worked for me. Starting with a bit of code taken from Joe, this method modifies the window width to automatically fit a legend to the right of the figure.', 'You can also try figlegend.  It is possible to create a legend independent of any Axes object.  However, you may need to create some ""dummy"" Paths to make sure the formatting for the objects gets passed on correctly.', 'Here is an example from the matplotlib tutorial found here. This is one of the more simpler examples but I added transparency to the legend and added plt.show() so you can paste this into the interactive shell and get a result:', 'The solution that worked for me when I had huge legend was to use extra empty image layout. \nIn following example I made 4 rows and at the bottom I plot image with offset for legend (bbox_to_anchor) at the top it does not get cut.', ""Here's another solution, similar to adding bbox_extra_artists and bbox_inches, where you don't have to have your extra artists in the scope of your savefig call. I came up with this since I generate most of my plot inside functions.""]"
146,Get list from pandas DataFrame column headers,"I want to get a list of the column headers from a pandas DataFrame.  The DataFrame will come from user input so I won't know how many columns there will be or what they will be called.
For example, if ...",https://stackoverflow.com/questions/19482970/get-list-from-pandas-dataframe-column-headers,"[""I want to get a list of the column headers from a pandas DataFrame.  The DataFrame will come from user input so I won't know how many columns there will be or what they will be called."", 'You can get the values as a list by doing:', 'There is a built in method which is the most performant:', 'Did some quick tests, and perhaps unsurprisingly the built-in version using dataframe.columns.values.tolist() is the fastest:', 'Its gets even simpler (by pandas 0.16.0) :', 'To list the columns of a dataframe while in debugger mode, use a list comprehension:', ""Surprised I haven't seen this posted so far, so I'll just leave this here."", ""That's available as my_dataframe.columns."", 'A DataFrame follows the dict-like convention of iterating over the “keys” of the objects.', ""It's interesting but df.columns.values.tolist() is almost 3 times faster then df.columns.tolist() but I thought that they are the same:"", 'For data exploration in the IPython notebook, my preferred way is this:', 'as answered by Simeon Visser...you could do', 'For a quick, neat, visual check, try this:', 'This gives us the names of columns in a list:', 'I feel question deserves additional explanation.', 'Even though the solution that was provided above is nice. I would also expect something like frame.column_names() to be a function in pandas, but since it is not, maybe it would be nice to use the following syntax. It somehow preserves the feeling that you are using pandas in a proper way by calling the ""tolist"" function: frame.columns.tolist()', 'If the DataFrame happens to have an Index or MultiIndex and you want those included as column names too:', 'This solution lists all the columns of your object my_dataframe:']"
147,How to get line count of a large file cheaply in Python?,"I need to get a line count of a large file (hundreds of thousands of lines) in python. What is the most efficient way both memory- and time-wise?

At the moment I do:

def file_len(fname):
    with ...",https://stackoverflow.com/questions/845058/how-to-get-line-count-of-a-large-file-cheaply-in-python,"['I need to get a line count of a large file (hundreds of thousands of lines) in python. What is the most efficient way both memory- and time-wise?', ""You can't get any better than that."", 'One line, probably pretty fast:', 'I believe that a memory mapped file will be the fastest solution. I tried four functions: the function posted by the OP (opcount); a simple iteration over the lines in the file (simplecount); readline with a memory-mapped filed (mmap) (mapcount); and the buffer read solution offered by Mykola Kharechko (bufcount).', 'I had to post this on a similar question until my reputation score jumped a bit (thanks to whoever bumped me!).', 'You could execute a subprocess and run wc -l filename', 'Here is a python program to use the multiprocessing library to distribute the line counting across machines/cores.  My test improves counting a 20million line file from 26 seconds to 7 seconds using an 8 core windows 64 server.  Note: not using memory mapping makes things much slower.', 'A one-line bash solution similar to this answer, using the modern subprocess.check_output function:', ""I would use Python's file object method readlines, as follows:"", 'This is the fastest thing I have found using pure python.\nYou can use whatever amount of memory you want by setting buffer, though 2**16 appears to be a sweet spot on my computer.', 'Here is what I use, seems pretty clean:', 'I got a small (4-8%) improvement with this version which re-uses a constant buffer so it should avoid any memory or GC overhead:', ""Kyle's answer"", 'One line solution:', 'Just to complete the above methods I tried a variant with the fileinput module:', 'As for me this variant will be the fastest:', ""This code is shorter and clearer. It's probably the best way:"", 'I have modified the buffer case like this:', 'the result of opening a file is an iterator, which can be converted to a sequence, which has a length:', 'count = max(enumerate(open(filename)))[0]', 'If one wants to get the line count cheaply in Python in Linux, I recommend this method:', 'What about this', 'How about this?', 'How about this one-liner:', 'This is a meta-comment on some of the other answers.', 'You can use the os.path module in the following way:', 'If the file can fit into memory, then']"
148,How do I create a constant in Python?,"Is there a way to declare a constant in Python? In Java we can create constant values in this manner:

public static final String CONST_NAME = ""Name"";
What is the equivalent of the above Java ...",https://stackoverflow.com/questions/2682745/how-do-i-create-a-constant-in-python,"['Is there a way to declare a constant in Python? In Java we can create constant values in this manner:', ""No there is not. You cannot declare a variable or value as constant in Python. Just don't change it."", 'There\'s no const keyword as in other languages, however it is possible to create a Property that has a ""getter function"" to read the data, but no ""setter function"" to re-write the data. This essentially protects the identifier from being changed.', 'In Python instead of language enforcing something, people use naming conventions e.g __method for private methods and using _method for protected methods.', ""I've recently found a very succinct update to this which automatically raises meaningful error messages and prevents access via __dict__:"", ""Python doesn't have constants."", ""In addition to the two top answers (just use variables with UPPERCASE names, or use properties to make the values read-only), I want to mention that it's possible to use metaclasses in order to implement named constants.  I provide a very simple solution using metaclasses at GitHub which may be helpful if you want the values to be more informative about their type/name:"", 'Properties are one way to create constants. You can do it by declaring a getter property, but ignoring the setter. For example:', 'Edit: Added sample code for Python 3', 'You can use a namedtuple as a workaround to effectively create a constant that works the same way as a static final variable in Java (a Java ""constant""). As workarounds go, it\'s sort of elegant. (A more elegant approach would be to simply improve the Python language --- what sort of language lets you redefine math.pi? -- but I digress.)', ""PEP 591 has the 'final' qualifier. Enforcement is down to the type checker."", 'Here is an implementation of a ""Constants"" class, which creates instances with read-only (constant) attributes. E.g. can use Nums.PI to get a value that has been initialized as 3.14159, and Nums.PI = 22 raises an exception.', 'A tuple technically qualifies as a constant, as a tuple will raise an error if you try to change one of its values. If you want to declare a tuple with one value, then place a comma after its only value, like this:', ""I would make a class that overrides the __setattr__ method of the base object class and wrap my constants with that, note that I'm using python 2.7:"", 'Unfortunately the Python has no constants so yet and it is shame. ES6 already added support constants to JavaScript (https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/const) since it is a very useful thing in any programming language.\nAs answered in other answers in Python community use the convention - user uppercase variable as constants, but it does not protect against arbitrary errors in code.\nIf you like, you may be found useful a single-file solution as next\n(see docstrings how use it).', 'The Pythonic way of declaring ""constants"" is basically a module level variable:', 'We can create a descriptor object.', ""Python dictionaries are mutable, so they don't seem like a good way to declare constants:"", ""Here's a trick if you want constants and don't care their values:"", 'In python, a constant is simply a variable with a name in all capitals, with words separated by the underscore character,', ""There's no perfect way to do this. As I understand it most programmers will just capitalize the identifier, so PI = 3.142 can be readily understood to be a constant."", 'There is a cleaner way to do this with namedtuple:', 'Maybe pconst library will help you (github).', 'You can use StringVar or IntVar, etc, your constant is const_val', 'You can do it with collections.namedtuple and itertools:', '(This paragraph was meant to be a comment on those answers here and there, which mentioned namedtuple, but it is getting too long to be fit into a comment, so, here it goes.)', 'Here it is a collection of idioms that I created as an attempt to improve some of the already available answers.', 'In Python, constants do not exist, but you can indicate that a variable is a constant and must not be changed by adding CONST_ to the start of the variable name and stating that it is a constant in a comment:', 'I am trying different ways to create a real constant in Python and perhaps I found the pretty solution.', 'In my case, I needed immutable bytearrays for an implementation of a crypto library containing many literal numbers I wanted to ensure were constant.', 'I write a util lib for python const:\n kkconst - pypi \nsupport str, int, float, datetime']"
149,What's the difference between lists and tuples?,"What's the difference?

What are the advantages / disadvantages of tuples / lists?",https://stackoverflow.com/questions/626759/whats-the-difference-between-lists-and-tuples,"[""What's the difference?"", 'Apart from tuples being immutable there is also a semantic distinction that should guide their usage. Tuples are heterogeneous data structures (i.e., their entries have different meanings), while lists are homogeneous sequences. Tuples have structure, lists have order.', 'Difference between list and tuple', 'If you went for a walk, you could note your coordinates at any instant in an (x,y) tuple.', 'The key difference is that tuples are immutable.  This means that you cannot change the values in a tuple once you have created it.', 'Lists are mutable; tuples are not.', ""It's been mentioned that the difference is largely semantic: people expect a tuple and list to represent different information. But this goes further than a guideline; some libraries actually behave differently based on what they are passed. Take NumPy for example (copied from another post where I ask for more examples):"", 'Lists are for looping, tuples are for structures i.e. ""%s %s"" %tuple.', 'This is an example of Python lists:', ""The values of list can be changed any time but the values of tuples can't be change."", 'Tuples and lists are both seemingly similar sequence types in Python.', 'Lists are intended to be homogeneous sequences, while tuples are heterogeneous data structures.', 'As people have already answered here that tuples are immutable while lists are mutable, but there is one important aspect of using tuples which we must remember', 'The PEP 484 -- Type Hints says that the types of elements of a tuple can be individually typed; so that you can say Tuple[str, int, float]; but a list, with List typing class can take only one type parameter: List[str], which hints that the difference of the 2 really is that the former is heterogeneous, whereas the latter intrinsically homogeneous.', 'As people have already mentioned the differences I will write about why tuples.', 'A direction quotation from the documentation on 5.3. Tuples and Sequences:', 'First of all, they both are the non-scalar objects (also known as a compound objects) in Python.', 'The most important difference is time ! When you do not want to change the data inside the list better to use tuple ! Here is the example why use tuple !', 'Lists are mutable and tuples are immutable.\nJust consider this example.', 'Just a quick extension to list vs tuple responses:', 'List is mutable and tuples is immutable. The main difference between mutable and immutable is memory usage when you are trying to append an item.']"
150,How do I parse XML in Python?,"I have many rows in a database that contains XML and I'm trying to write a Python script to count instances of a particular node attribute.

My tree looks like:

<foo>
   <bar>
      <...",https://stackoverflow.com/questions/1912434/how-do-i-parse-xml-in-python,"[""I have many rows in a database that contains XML and I'm trying to write a Python script to count instances of a particular node attribute."", 'I suggest ElementTree.  There are other compatible implementations of the same API, such as lxml, and cElementTree in the Python standard library itself; but, in this context, what they chiefly add is even more speed -- the ease of programming part depends on the API, which ElementTree defines.', 'minidom is the quickest and pretty straight forward.', 'You can use BeautifulSoup:', 'There are many options out there. cElementTree looks excellent if speed and memory usage are an issue. It has very little overhead compared to simply reading in the file using readlines.', 'I suggest xmltodict for simplicity.', 'lxml.objectify is really simple.', 'Python has an interface to the expat XML parser.', 'I might suggest declxml.', 'Just to add another possibility, you can use untangle, as it is a simple xml-to-python-object library. Here you have an example:', 'Here a very simple but effective code using cElementTree.', 'XML:', 'This will print the value of the foobar attribute.', 'These are some pros of the two most used libraries I would have benefit to know before choosing between them.', ""I find the Python xml.dom and xml.dom.minidom quite easy. Keep in mind that DOM isn't good for large amounts of XML, but if your input is fairly small then this will work fine."", ""There's no need to use a lib specific API if you use python-benedict. Just initialize a new instance from your XML and manage it easily since it is a dict subclass."", 'A new lib, I fell in love with it after I used it. I recommend it to you.', ""If you don't want to use any external libraries or 3rd party tools, Please try below code."", 'If the source is an xml file, say like this sample']"
151,Adding new column to existing DataFrame in Python pandas,"I have the following indexed DataFrame with named columns and rows not- continuous numbers:

          a         b         c         d
2  0.671399  0.101208 -0.181532  0.241273
3  0.446172 -0.243316  ...",https://stackoverflow.com/questions/12555323/adding-new-column-to-existing-dataframe-in-python-pandas,"['I have the following indexed DataFrame with named columns and rows not- continuous numbers:', 'Use the original df1 indexes to create the series:', ""This is the simple way of adding a new column: df['e'] = e"", ""I would like to add a new column, 'e', to the existing data frame and do not change anything in the data frame. (The series always got the same length as a dataframe.)"", 'A pandas dataframe is implemented as an ordered dict of columns.', 'It seems that in recent Pandas versions the way to go is to use df.assign:', 'Doing this directly via NumPy will be the most efficient:', 'Easiest ways:-', ""If you want to set the whole new column to an initial base value (e.g. None), you can do this: df1['e'] = None"", ""I got the dreaded SettingWithCopyWarning, and it wasn't fixed by using the iloc syntax. My DataFrame was created by read_sql from an ODBC source. Using a suggestion by lowtech above, the following worked for me:"", 'If the column you are trying to add is a series variable then just :', 'If the data frame and Series object have the same index, pandas.concat also works here:', 'Foolproof:', 'To create an empty column', 'Let me just add that, just like for hum3, .loc didn\'t solve the SettingWithCopyWarning and I had to resort to df.insert(). In my case false positive was generated by ""fake"" chain indexing  dict[\'a\'][\'e\'], where \'e\' is the new column, and dict[\'a\'] is a DataFrame coming from dictionary.', 'to insert a new column at a given location (0 <= loc <= amount of columns) in a data frame, just use Dataframe.insert:', 'Before assigning a new column, if you have indexed data, you need to sort the index. At least in my case I had to:', 'One thing to note, though, is that if you do', 'I was looking for a general way of adding a column of numpy.nans to a dataframe without getting the dumb SettingWithCopyWarning.', ""To add a new column, 'e', to the existing data frame"", 'For the sake of completeness - yet another solution using DataFrame.eval() method:', ""The following is what I did... But I'm pretty new to pandas and really Python in general, so no promises."", 'If you get the SettingWithCopyWarning, an easy fix is to copy the DataFrame you are trying to add a column to.', 'this is a special case of adding a new column to a pandas dataframe. Here, I am adding a new feature/column based on an existing column data of the dataframe.', '']"
152,Find all files in a directory with extension .txt in Python,How can I find all the files in a directory having the extension .txt in python?,https://stackoverflow.com/questions/3964681/find-all-files-in-a-directory-with-extension-txt-in-python,"['How can I find all the files in a directory having the extension .txt in python?', 'You can use glob:', 'Use glob.', 'Something like that should do the job', 'Something like this will work:', 'You can simply use pathlibs glob 1:', ""Here's more versions of the same that produce slightly different results:"", 'I like os.walk():', 'path.py is another alternative: https://github.com/jaraco/path.py', 'Fast method using os.scandir in a recursive function.  Searches for all files with a specified extension in folder and sub-folders.  It is fast, even for finding 10,000s of files.', 'Try this this will find all your files recursively:', 'Python has all tools to do this:', ""To get all '.txt' file names inside 'dataPath' folder as a list in a Pythonic way:"", 'I did a test (Python 3.6.4, W7x64) to see which solution is the fastest for one folder, no subdirectories, to get a list of complete file paths for files with a specific extension.', 'This code makes my life simpler.', 'Use fnmatch: https://docs.python.org/2/library/fnmatch.html', 'To get an array of "".txt"" file names from a folder called ""data"" in the same directory I usually use this simple line of code:', ""Here's one with extend()"", 'I suggest you to use fnmatch and the upper method. In this way you can find any of the following:', 'Functional solution with sub-directories:', 'In case the folder contains a lot of files or memory is an constraint, consider using generators:', 'A copy-pastable solution similar to the one of ghostdog:', 'use Python OS module to find files with specific extension.', 'Many users have replied with os.walk answers, which includes all files but also all directories and subdirectories and their files.', 'A simple method by using for loop  :']"
153,How does the @property decorator work in Python?,"I would like to understand how the built-in function property works. What confuses me is that property can also be used as a decorator, but it only takes arguments when used as a built-in function and ...",https://stackoverflow.com/questions/17330160/how-does-the-property-decorator-work-in-python,"['I would like to understand how the built-in function property works. What confuses me is that property can also be used as a decorator, but it only takes arguments when used as a built-in function and not when used as a decorator.', 'The property() function returns a special descriptor object:', ""Documentation says it's just a shortcut for creating readonly properties. So"", 'Here is a minimal example of how @property can be implemented:', 'The first part is simple:', 'This following:', 'Below is another example on how @property can help when one has to refactor code which is taken from here (I only summarize it below):', 'I read all the posts here and realized that we may need a real life example. Why, actually, we have @property?\nSo, consider a Flask app where you use authentication system. \nYou declare a model User in models.py:', ""Let's start with Python decorators."", 'This point is been cleared by many people up there but here is a direct point which I was searching.\nThis is what I feel is important to start with the @property decorator.\neg:-', 'property is a class behind @property decorator.', 'The best explanation can be found here: \nPython @Property Explained – How to Use and When? (Full Examples)\nby Selva Prabhakaran | Posted on November 5, 2018', 'A property can be declared in two ways.', 'Here is another example:']"
154,How can I get a list of locally installed Python modules?,"I would like to get a list of Python modules, which are in my Python installation (UNIX server).

How can you get a list of Python modules installed in your computer?",https://stackoverflow.com/questions/739993/how-can-i-get-a-list-of-locally-installed-python-modules,"['I would like to get a list of Python modules, which are in my Python installation (UNIX server).', 'My 50 cents for getting a pip freeze-like list from a Python script:', 'in a Python shell/prompt.', 'Now, these methods I tried myself, and I got exactly what was advertised:  All the modules.', ""Since pip version 1.3, you've got access to:"", 'In ipython you can type ""importTab"".', 'I just use this to see currently used modules:', 'In normal shell just use', 'As of pip 10, the accepted answer will no longer work.  The development team has removed access to the get_installed_distributions routine.  There is an alternate function in the setuptools for doing the same thing.  Here is an alternate version that works with pip 10:', 'If we need to list the installed packages in the Python shell, we can use the help command as follows', 'I normally use pip list to get a list of packages (with version).', 'Very simple searching using pkgutil.iter_modules', 'Try these', 'In terminal or IPython, type:', 'Run the following in your python editor or IPython:', 'on windows, Enter this in cmd', 'I ran into a custom installed python 2.7 on OS X. It required X11 to list modules installed (both using help and pydoc).', 'This solution is primary based on modules importlib and pkgutil and work with CPython 3.4 and CPython 3.5, but has no support for the CPython 2.', ""Warning: Adam Matan discourages this use in pip > 10.0. Also, read @sinoroc's comment below"", 'Aside from using pip freeze I have been installing yolk in my virtual environments.', 'In case you have an anaconda python distribution installed, you could also use', 'For the second purpose, example code:', 'pip freeze does it all finding packages however one can simply write the following command to list all paths where python packages are.', 'There are many way to skin a cat.', 'There are many ideas, initially I am pondering on these two:', ""I needed to find the specific version of packages available by default in AWS Lambda. I did so with a mashup of ideas from this page. I'm sharing it for posterity."", 'Here is a python code solution that will return a list of modules installed. One can easily modify the code to include version numbers.', 'Installation', ""If none of the above seem to help, in my environment was broken from a system upgrade and I could not upgrade pip. While it won't give you an accurate list you can get an idea of which libraries were installed simply by looking inside your env>lib>python(version here)>site-packages> . Here you will get a good indication of modules installed."", 'For anyone wondering how to call pip list from a Python program you can use the following:', 'From the shell']"
155,if/else in a list comprehension,"How can I do the following in Python?

row = [unicode(x.strip()) for x in row if x is not None else '']
Essentially:
replace all the Nones with empty strings, and then
carry out a function.",https://stackoverflow.com/questions/4260280/if-else-in-a-list-comprehension,"['How can I do the following in Python?', ""You can totally do that. It's just an ordering issue:"", 'One way:', 'The specific problem has already been solved in previous answers, so I will address the general idea of using conditionals inside list comprehensions.', 'Here is another illustrative example:', 'The other solutions are great for a single if / else construct. However, ternary statements within list comprehensions are arguably difficult to read.', 'It has to do with how the list comprehension is performed.', ""There isn't any need for ternary if/then/else. In my opinion your question calls for this answer:"", 'Make a list from items in an iterable', 'You can combine conditional logic in a comprehension:', 'you can do this', '(venv) $ python list_comp.py \nAffichage de my_list [0, 1, 2, 3, 4, 5] \nAffichage de my_result_list [0, 5, 4, 7, 8, 9]']"
156,What IDE to use for Python? [closed],"What IDEs (""GUIs/editors"") do others use for Python coding?",https://stackoverflow.com/questions/81584/what-ide-to-use-for-python,"[""Want to improve this question? Update the question so it's on-topic for Stack Overflow."", 'Spreadsheet version']"
157,“Large data” work flows using pandas,"I have tried to puzzle out an answer to this question for many months while learning pandas.  I use SAS for my day-to-day work and it is great for it's out-of-core support.  However, SAS is horrible ...",https://stackoverflow.com/questions/14262433/large-data-work-flows-using-pandas,"[""I have tried to puzzle out an answer to this question for many months while learning pandas.  I use SAS for my day-to-day work and it is great for it's out-of-core support.  However, SAS is horrible as a piece of software for numerous other reasons."", 'I routinely use tens of gigabytes of data in just this fashion\ne.g. I have tables on disk that I read via queries, create data and append back.', ""I think the answers above are missing a simple approach that I've found very useful."", ""There is now, two years after the question, an 'out-of-core' pandas equivalent: dask. It is excellent! Though it does not support all of pandas functionality, you can get really far with it."", ""If your datasets are between 1 and 20GB, you should get a workstation with 48GB of RAM. Then Pandas can hold the entire dataset in RAM. I know its not the answer you're looking for here, but doing scientific computing on a notebook with 4GB of RAM isn't reasonable."", ""I know this is an old thread but I think the Blaze library is worth checking out.  It's built for these types of situations."", 'This is the case for pymongo.  I have also prototyped using sql server, sqlite, HDF, ORM (SQLAlchemy) in python.  First and foremost pymongo is a document based DB, so each person would be a document (dict of attributes).  Many people form a collection and you can have many collections (people, stock market, income).', 'I spotted this a little late, but I work with a similar problem (mortgage prepayment models). My solution has been to skip the pandas HDFStore layer and use straight pytables. I save each column as an individual HDF5 array in my final file.', ""One trick I found helpful for large data use cases is to reduce the volume of the data by reducing float precision to 32-bit. It's not applicable in all cases, but in many applications 64-bit precision is overkill and the 2x memory savings are worth it. To make an obvious point even more obvious:"", ""As noted by others, after some years an 'out-of-core' pandas equivalent has emerged: dask. Though dask is not a drop-in replacement of pandas and all of its functionality it stands out for several reasons:"", 'One more variation', ""It is worth mentioning here Ray as well,\nit's a distributed computation framework, that has it's own implementation for pandas in a distributed way."", 'Consider Ruffus if you go the simple path of creating a data pipeline which is broken down into multiple smaller files.', 'I recently came across a similar issue. I found simply reading the data in chunks and appending it as I write it in chunks to the same csv works well. My problem was adding a date column based on information in another table, using the value of certain columns as follows. This may help those confused by dask and hdf5 but more familiar with pandas like myself.', ""I'd like to point out the Vaex package."", 'At the moment I am working ""like"" you, just on a lower scale, which is why I don\'t have a PoC for my suggestion.', 'Why Pandas ? Have you tried Standard Python ?']"
158,Creating a singleton in Python,"This question is not for the discussion of whether or not the singleton design pattern is desirable, is an anti-pattern, or for any religious wars, but to discuss how this pattern is best implemented ...",https://stackoverflow.com/questions/6760685/creating-a-singleton-in-python,"[""This question is not for the discussion of whether or not the singleton design pattern is desirable, is an anti-pattern, or for any religious wars, but to discuss how this pattern is best implemented in Python in such a way that is most pythonic. In this instance I define 'most pythonic' to mean that it follows the 'principle of least astonishment'."", ""I would recommend Method #2, but you're better off using a metaclass than a base class. Here is a sample implementation:"", ""Modules are imported only once, everything else is overthinking. Don't use singletons and try not to use globals."", ""Use a module. It is imported only once. Define some global variables in it - they will be singleton's 'attributes'. Add some functions - the singleton's 'methods'."", 'You probably never need a singleton in Python. Just define all your data and functions in a module and you have a de facto singleton:', ""Here's a one-liner for you:"", 'Check out Stack Overflow question Is there a simple, elegant way to define singletons in Python? with several solutions.', ""Here's my own implementation of singletons. All you have to do is decorate the class; to get the singleton, you then have to use the Instance method. Here's an example:"", ""Method 3 seems to be very neat, but if you want your program to run in both Python\xa02 and Python\xa03, it doesn't work. Even protecting the separate variants with tests for the Python version fails, because the Python\xa03 version gives a syntax error in Python\xa02."", ""I'll toss mine into the ring. It's a simple decorator."", 'Well, other than agreeing with the general Pythonic suggestion on having module-level global, how about this:', 'How about this:', ""Code based on Tolli's answer."", 'It is slightly similar to the answer by fab but not exactly the same.', 'One liner (I am not proud, but it does the job):', ""If you don't need lazy initialization of the instance of the Singleton, then the following should be easy and thread-safe:"", 'Maybe I missunderstand the singleton pattern but my solution is this simple and pragmatic (pythonic?). This code fullfills two goals', 'After struggling with this for some time I eventually came up with the following, so that the config object would only be loaded once, when called up from separate modules.  The metaclass allows a global class instance to be stored in the builtins dict, which at present appears to be the neatest way of storing a proper program global.', 'Using a function attribute is also very simple', 'I will recommend an elegant solution using metaclasses', ""I prefer this solution which I found very clear and straightforward.\nIt is using double check for instance, if some other thread already created it.\nAdditional thing to consider is to make sure that deserialization isn't creating any other instances.\nhttps://gist.github.com/werediver/4396488"", ""I can't remember where I found this solution, but I find it to be the most 'elegant' from my non-Python-expert point of view:"", ""This answer is likely not what you're looking for. I wanted a singleton in the sense that only that object had its identity, for comparison to. In my case it was being used as a Sentinel Value. To which the answer is very simple, make any object mything = object() and by python's nature,  only that thing will have its identity."", 'This is my preferred way of implementing singletons:', 'This solution causes some namespace pollution at the module level (three definitions rather than just one), but I find it easy to follow.']"
159,What is the use of “assert” in Python?,"I have been reading some source code and in several places I have seen the usage of assert. 

What does it mean exactly? What is its usage?",https://stackoverflow.com/questions/5142418/what-is-the-use-of-assert-in-python,"['I have been reading some source code and in several places I have seen the usage of assert.', 'The assert statement exists in almost every programming language. It helps detect problems early in your program, where the cause is clear, rather than later as a side-effect of some other operation.', ""Watch out for the parentheses. As has been pointed out above, in Python 3, assert is still a statement, so by analogy with print(..), one may extrapolate the same to assert(..) or raise(..) but you shouldn't."", ""As other answers have noted, assert is similar to throwing an exception if a given condition isn't true. An important difference is that assert statements get ignored if you compile your code with the optimization option -O. The documentation says that assert expression can better be described as being equivalent to"", 'The goal of an assertion in Python is to inform developers about unrecoverable errors in a program.', 'Others have already given you links to documentation.', 'From docs:', 'The assert statement has two forms.', 'Assertions are a systematic way to check that the internal state of a program is as the programmer expected, with the goal of catching bugs. See the example below.', ""Here is a simple example, save this in file (let's say b.py)"", 'if the statement after assert  is true then the program continues , but if the statement after assert is false then the program gives an error. Simple as that.', 'The assert statement exists in almost every programming language. It helps detect problems early in your program, where the cause is clear, rather than later as a side-effect of some other operation. They always expect a True condition.', 'As summarized concisely on the C2 Wiki:', ""In Pycharm, if you use assert along with isinstance to declare an object's type, it will let you access the methods and attributes of the parent object while you are coding, it will auto-complete automatically."", 'If you ever want to know exactly what a reserved function does in python, type in help(enter_keyword)', 'Python assert is basically a debugging aid which test condition for internal self-check of your code.\nAssert makes debugging really easy when your code gets into impossible edge cases. Assert check those impossible cases.', 'My short explanation is:', 'As written in other answers, assert statements are used to check the state of\nthe program at a given point.', 'Assertions are statements that state a fact confidently in our program.', 'format :\n  assert Expression[,arguments]\nWhen assert encounters a statement,Python evaluates the expression.If the statement is not true,an exception is raised(assertionError).\nIf the assertion fails, Python uses ArgumentExpression as the argument for the AssertionError. AssertionError exceptions can be caught and handled like any other exception using the try-except statement, but if not handled, they will terminate the program and produce a traceback.\nExample:', 'Can be used to ensure parameters are passed in the function call.', 'Basically the assert keyword meaning is that if the condition is not true then it through an assertionerror else it continue for example in python.']"
160,Is there a built-in function to print all the current properties and values of an object?,"So what I'm looking for here is something like PHP's print_r function.

This is so I can debug my scripts by seeing what's the state of the object in question.",https://stackoverflow.com/questions/192109/is-there-a-built-in-function-to-print-all-the-current-properties-and-values-of-a,"[""So what I'm looking for here is something like PHP's print_r function."", 'You are really mixing together two different things.', 'You want vars() mixed with pprint():', ""There are many 3rd-party functions out there that add things like exception handling, national/special character printing, recursing into nested objects etc. according to their authors' preferences. But they all basically boil down to this."", ""dir has been mentioned, but that'll only give you the attributes' names.  If you want their values as well try __dict__."", 'You can use the ""dir()"" function to do this.', 'To print the current state of the object you might:', 'No. The most upvoted answer excludes some kinds of attributes, and the accepted answer shows how to get all attributes, including methods and parts of the non-public api. But there is no good complete builtin function for this.', 'Might be worth checking out --', 'I recommend using help(your_object).', ""In most cases, using __dict__ or dir() will get you the info you're wanting. If you should happen to need more details, the standard library includes the inspect module, which allows you to get some impressive amount of detail. Some of the real nuggests of info include:"", 'A metaprogramming example Dump object with magic:', 'Try ppretty', ""If you're using this for debugging, and you just want a recursive dump of everything, the accepted answer is unsatisfying because it requires that your classes have good __str__ implementations already. If that's not the case, this works much better:"", 'This prints out all the object contents recursively in json or yaml indented format:', ""I've upvoted the answer that mentions only pprint. To be clear, if you  want to see all the values in a complex data structure, then do something like:"", 'I was needing to print DEBUG info in some logs and was unable to use pprint because it would break it.  Instead I did this and got virtually the same thing.', 'To dump ""myObject"":', 'Why not something simple:', 'pprint contains a “pretty printer” for producing aesthetically pleasing representations of your data structures. The formatter produces representations of data structures that can be parsed correctly by the interpreter, and are also easy for a human to read. The output is kept on a single line, if possible, and indented when split across multiple lines.', 'Just try beeprint.', 'For everybody struggling with', 'You can try the Flask Debug Toolbar.\nhttps://pypi.python.org/pypi/Flask-DebugToolbar', 'I like working with python object built-in types keys or values.', 'This works no matter how your varibles are defined within a class, inside __init__ or outside.']"
161,How to read a text file into a string variable and strip newlines?,"I use the following code segment to read a file in python:

with open (""data.txt"", ""r"") as myfile:
    data=myfile.readlines()
Input file is:

LLKKKKKKKKMMMMMMMMNNNNNNNNNNNNN
...",https://stackoverflow.com/questions/8369219/how-to-read-a-text-file-into-a-string-variable-and-strip-newlines,"['I use the following code segment to read a file in python:', 'You could use:', 'You can read from a file in one line:', 'In Python 3.5 or later, using pathlib you can copy text file contents into a variable and close the file in one line:', 'To join all lines into a string and remove new lines, I normally use :', 'join() will join a list of strings, and rstrip() with no arguments will trim whitespace, including newlines, from the end of strings.', 'This can be done using the read() method :', 'I have fiddled around with this for a while and have prefer to use use read in combination with rstrip. Without rstrip(""\\n""), Python adds a newline to the end of the string, which in most cases is not very useful.', ""I'm surprised nobody mentioned splitlines() yet."", ""It's hard to tell exactly what you're after, but something like this should get you started:"", 'You can also strip each line and concatenate into a final string.', 'python3: Google ""list comphrension"" if the square bracket syntax is new to you.', 'you can compress this into one into two lines of code!!!', 'This is a one line, copy-pasteable solution that also closes the file object:', 'Have you tried this?', 'To remove line breaks using Python you can use replace function of a string.', ""I don't feel that anyone addressed the [ ] part of your question. When you read each line into your variable, because there were multiple lines before you replaced the \\n with '' you ended up creating a list. If you have a variable of x and print it out just by"", 'Maybe you could try this? I use this in my programs.', 'Regular expression works too:', 'This works:\nChange your file to:', 'This code will help you to read the first line and then using the list and split option you can convert the first line word separated by space to be stored in a list.', 'Try the following:']"
162,How do I check if a variable exists?,"I want to check if a variable exists. Now I'm doing something like this:

try:
   myVar
except NameError:
   # Do something.
Are there other ways without exceptions?",https://stackoverflow.com/questions/843277/how-do-i-check-if-a-variable-exists,"[""I want to check if a variable exists. Now I'm doing something like this:"", 'To check the existence of a local variable:', ""The use of variables that have yet to been defined or set (implicitly or explicitly) is almost always a bad thing in any language, since it often indicates that the logic of the program hasn't been thought through properly, and is likely to result in unpredictable behaviour."", 'A simple way is to initialize it at first saying myVar = None', ""Using try/except is the best way to test for a variable's existence. But there's almost certainly a better way of doing whatever it is you're doing than setting/testing global variables."", 'for objects/modules, you can also', ""I will assume that the test is going to be used in a function, similar to user97370's answer.  I don't like that answer because it pollutes the global namespace.  One way to fix it is to use a class instead:"", ""catch is called except in Python. other than that it's fine for such simple cases. There's the AttributeError that can be used to check if an object has an attribute."", 'A way that often works well for handling this kind of situation is to not explicitly check if the variable exists but just go ahead and wrap the first usage of the possibly non-existing variable in a try/except NameError:', 'I created a custom function.', 'Short variant:', 'This was my scenario:']"
163,What is the difference between old style and new style classes in Python?,What is the difference between old style and new style classes in Python?  When should I use one or the other?,https://stackoverflow.com/questions/54867/what-is-the-difference-between-old-style-and-new-style-classes-in-python,"['What is the difference between old style and new style classes in Python?  When should I use one or the other?', 'From New-style and classic classes:', 'Declaration-wise:', 'Important behavior changes between old and new style classes', 'Old style classes are still marginally faster for attribute lookup. This is not usually important, but it may be useful in performance-sensitive Python 2.x code:', 'Guido has written The Inside Story on New-Style Classes, a really great article about new-style and old-style class in Python.', ""Here's a very practical, true/false difference. The only difference between the two versions of the following code is that in the second version Person inherits from object. Other than that, the two versions are identical, but with different results:"", 'New-style classes inherit from object and must be written as such in Python 2.2 onwards (i.e. class Classname(object): instead of class Classname:). The core change is to unify types and classes, and the nice side-effect of this is that it allows you to inherit from built-in types.', 'New style classes may use super(Foo, self) where Foo is a class and self is the instance.']"
164,"Difference between del, remove and pop on lists",">>> a=[1,2,3]
>>> a.remove(2)
>>> a
[1, 3]
>>> a=[1,2,3]
>>> del a[1]
>>> a
[1, 3]
>>> a= [1,2,3]
>>> a.pop(1)
2
>>> a
[...",https://stackoverflow.com/questions/11520492/difference-between-del-remove-and-pop-on-lists,"['Is there any difference between the above three methods to remove an element from a list?', 'The effects of the three different methods to remove an element from a list:', 'Use del to remove an element by index, pop() to remove it by index if you need the returned value, and remove() to delete an element by value.  The last requires searching the list, and raises ValueError if no such value occurs in the list.', 'Since no-one else has mentioned it, note that del (unlike pop) allows the removal of a range of indexes because of list slicing:', 'Already answered quite well by others. This one from my end :)', 'Many best explanations are here but I will try my best to simplify more.', 'pop    - Takes Index and returns Value', 'Any operation/function on different data structures is defined for particular actions. Here in your case i.e. removing an element, delete, Pop and remove. (If you consider sets, Add another operation - discard)\nOther confusing case is while adding. Insert/Append. \nFor Demonstration, Let us Implement deque. deque is a hybrid linear data structure, where you can add elements / remove elements from both ends.(Rear and front Ends)', 'Here is a detailed answer.', 'While pop and delete both take indices to remove an element as stated in above comments. A key difference is the time complexity for them. The time complexity for pop() with no index is O(1) but is not the same case for deletion of last element.', 'The remove operation on a list is given a value to remove. It searches the list to find an item with that value and deletes the first matching item it finds. It is an error if there is no matching item, raises a ValueError.', 'Remove basically works on the value .\nDelete and pop work on the index', 'You can also use remove to remove a value by index as well.']"
165,How can I sort a dictionary by key?,"What would be a nice way to go from {2:3, 1:89, 4:5, 3:0} to {1:89, 2:3, 3:0, 4:5}?
I checked some posts but they all use the ""sorted"" operator that returns tuples.",https://stackoverflow.com/questions/9001509/how-can-i-sort-a-dictionary-by-key,"['What would be a nice way to go from {2:3, 1:89, 4:5, 3:0} to {1:89, 2:3, 3:0, 4:5}?\nI checked some posts but they all use the ""sorted"" operator that returns tuples.', ""Standard Python dictionaries are unordered. Even if you sorted the (key,value) pairs, you wouldn't be able to store them in a dict in a way that would preserve the ordering."", 'Dictionaries themselves do not have ordered items as such, should you want to print them etc to some order, here are some examples:', ""From Python's collections library documentation:"", 'For CPython/PyPy 3.6, and any Python 3.7 or higher, this is easily done with:', 'There are a number of Python modules that provide dictionary implementations which automatically maintain the keys in sorted order. Consider the sortedcontainers module which is pure-Python and fast-as-C implementations. There is also a performance comparison with other popular options benchmarked against one another.', 'Simply:', 'As others have mentioned, dictionaries are inherently unordered.  However, if the issue is merely displaying dictionaries in an ordered fashion, you can override the __str__ method in a dictionary subclass, and use this dictionary class rather than the builtin dict.  Eg.', 'Found another way:', 'In Python 3.', 'Python dictionary was unordered before Python 3.6. In CPython implementation of Python 3.6, dictionary keeps the insertion order.\nFrom Python 3.7, this will become a language feature.', 'Here I found some simplest solution to sort the python dict by key using pprint.\neg.', 'There is an easy way to sort a dictionary.', 'Will generate exactly what you want:', 'An easy way to do this:', 'You can create a new dictionary by sorting the current dictionary by key as per your question.', 'I think the easiest thing is to sort the dict by key and save the sorted key:value pair in a new dict.', 'Python dicts are un-ordered. Usually, this is not a problem since the most common use case is to do a lookup.', 'This function will sort any dictionary recursively by its key. That is, if any value in the dictionary is also a dictionary, it too will be sorted by its key. If you are running on CPython 3.6 or greater, than a simple change to use a dict rather than an OrderedDict can be made.', 'I come up with single line dict sorting.', ""Guys you are making things complicated ... it's really simple"", 'Simplest solution is that you should get a list of dict key is sorted order and then iterate over dict. For example', 'A timing comparison of the two methods in 2.7 shows them to be virtually identical:', 'Or use pandas,', 'For the way how question is formulated, the most answers here are answering it correctly.', 'My suggestion is this as it allows you to sort a dict or keep a dict sorted as you are adding items and might need to add items in the future:']"
166,How do I find the location of my Python site-packages directory?,How do I find the location of my site-packages directory?,https://stackoverflow.com/questions/122327/how-do-i-find-the-location-of-my-python-site-packages-directory,"['How do I find the location of my site-packages directory?', 'There are two types of site-packages directories, global and per user.', '(or just first item with site.getsitepackages()[0])', 'A solution that:', 'For Ubuntu,', 'This is what worked for me:', ""Let's say you have installed the package 'django'. import it and type in dir(django). It will show you, all the functions and attributes with that module. Type in the python interpreter -"", 'A modern stdlib way is using sysconfig module, available in version 2.7 and 3.2+. Unlike the current accepted answer, this method still works regardless of whether or not you have a virtual environment active.', 'As others have noted, distutils.sysconfig has the relevant settings:', 'The native system packages installed with python installation in Debian based systems can be found at :', 'All the answers (or: the same answer repeated over and over) are inadequate. What you want to do is this:', ""This works for me.\nIt will get you both dist-packages and site-packages folders.\nIf the folder is not on Python's path, it won't be\ndoing you much good anyway."", 'A side-note: The proposed solution (distutils.sysconfig.get_python_lib()) does not work when there is more than one site-packages directory (as recommended by this article). It will only return the main site-packages directory.', 'This should work on all distributions in and out of virtual environment due to it\'s ""low-tech"" nature. The os module always resides in the parent directory of \'site-packages\'', 'An additional note to the get_python_lib function mentioned already: on some platforms different directories are used for platform specific modules (eg: modules that require compilation).  If you pass plat_specific=True to the function you get the site packages for platform specific packages.', 'pip show will give all the details about a package:\nhttps://pip.pypa.io/en/stable/reference/pip_show/  [pip show][1]', ""You should try this command to determine pip's install location"", 'Answer to old question. But use ipython for this.', 'I had to do something slightly different for a project I was working on: find the relative site-packages directory relative to the base install prefix.  If the site-packages folder was in /usr/lib/python2.7/site-packages, I wanted the /lib/python2.7/site-packages part.  I have, in fact, encountered systems where site-packages was in /usr/lib64, and the accepted answer did NOT work on those systems.', 'Something that has not been mentioned which I believe is useful, if you have two versions of Python installed e.g. both 3.8 and 3.5 there might be two folders called site-packages on your machine. In that case you can specify the python version by using the following:']"
167,"What is a mixin, and why are they useful?","In ""Programming Python"", Mark Lutz mentions ""mixins"". I'm from a C/C++/C# background and I have not heard the term before. What is a mixin? 

Reading between the lines of this example (which I've ...",https://stackoverflow.com/questions/533631/what-is-a-mixin-and-why-are-they-useful,"['In ""Programming Python"", Mark Lutz mentions ""mixins"". I\'m from a C/C++/C# background and I have not heard the term before. What is a mixin?', 'A mixin is a special kind of multiple inheritance.  There are two main situations where mixins are used:', ""First, you should note that mixins only exist in multiple-inheritance languages. You can't do a mixin in Java or C#."", 'This answer aims to explain mixins with examples that are:', 'I think of them as a disciplined way of using multiple inheritance - because ultimately a mixin is just another python class that (might) follow the conventions about classes that are called mixins.', 'A mixin is a limited form of multiple inheritance. In some languages the mechanism for adding a mixin to a class is slightly different (in terms of syntax) from that of inheritance.', ""Mixins is a concept in Programming in which the class provides functionalities but it is not meant to be used for instantiation. Main purpose of Mixins is to provide functionalities which are standalone and it would be best if the mixins itself do not have inheritance with other mixins and also avoid state. In languages such as Ruby, there is some direct language support but for Python, there isn't. However, you could used multi-class inheritance to execute the functionality provided in Python."", 'I think there have been some good explanations here but I wanted to provide another perspective.', ""I'd advise against mix-ins in new Python code, if you can find any other way around it (such as composition-instead-of-inheritance, or just monkey-patching methods into your own classes) that isn't much more effort."", 'Perhaps a couple of examples will help.', ""It's not a Python example but in the D programing language the term mixin is used to refer to a construct used much the same way; adding a pile of stuff to a class."", 'I think previous responses defined very well what MixIns are. However, \nin order to better understand them, it might be useful to compare MixIns with Abstract Classes and Interfaces from the code/implementation perspective:', 'OP mentioned that he/she never heard of mixin in C++, perhaps that is because they are called Curiously Recurring Template Pattern (CRTP) in C++. Also, @Ciro Santilli mentioned that mixin is implemented via abstract base class in C++. While abstract base class can be used to implement mixin, it is an overkill as the functionality of virtual function at run-time can be achieved using template at compile time without the overhead of virtual table lookup at run-time.', 'Maybe an example from ruby can help:', ""mixin gives a way to add functionality in a class, i.e you can interact with methods defined in a module by including the module inside the desired class. Though ruby doesn't supports multiple inheritance but provides mixin as an alternative to achieve that."", 'I just used a python mixin to implement unit testing for python milters.  Normally, a milter talks to an MTA, making unit testing difficult.  The test mixin overrides methods that talk to the MTA, and create a simulated environment driven by test cases instead.', 'I read that you have a c# background. So a good starting point might be a mixin implementation for .NET.']"
168,How to get file creation & modification date/times in Python?,"I have a script that needs to do some stuff based on file creation & modification dates but has to run on Linux & Windows.

What's the best cross-platform way to get file creation & ...",https://stackoverflow.com/questions/237079/how-to-get-file-creation-modification-date-times-in-python,"['I have a script that needs to do some stuff based on file creation & modification dates but has to run on Linux & Windows.', ""Getting some sort of modification date in a cross-platform way is easy - just call os.path.getmtime(path) and you'll get the Unix timestamp of when the file at path was last modified."", 'You have a couple of choices. For one, you can use the os.path.getmtime and os.path.getctime functions:', 'The best function to use for this is os.path.getmtime(). Internally, this just uses os.stat(filename).st_mtime.', 'os.stat https://docs.python.org/2/library/stat.html#module-stat', 'There are two methods to get the mod time, os.path.getmtime() or os.stat(), but the ctime is not reliable cross-platform (see below).', 'In Python 3.4 and above, you can use the object oriented pathlib module interface which includes wrappers for much of the os module.  Here is an example of getting the file stats.', 'prints', 'os.stat returns a named tuple with st_mtime and st_ctime attributes. The modification time is st_mtime on both platforms; unfortunately, on Windows, ctime means ""creation time"", whereas on POSIX it means ""change time"". I\'m not aware of any way to get the creation time on POSIX platforms.', 'If following symbolic links is not important, you can also use the os.lstat builtin.', 'It may worth taking a look at the crtime library which implements cross-platform access to the file creation time.', ""os.stat does include the creation time.  There's just no definition of st_anything for the element of os.stat() that contains the time."", ""I was able to get creation time on posix by running the system's stat command and parsing the output.""]"
169,Count the number occurrences of a character in a string,"What's the simplest way to count the number of occurrences of a character in a string?

e.g. count the number of times 'a' appears in 'Mary had a little lamb'",https://stackoverflow.com/questions/1155617/count-the-number-occurrences-of-a-character-in-a-string,"[""What's the simplest way to count the number of occurrences of a character in a string?"", 'str.count(sub[, start[, end]])', 'You can use count() :', ""As other answers said, using the string method count() is probably the simplest, but if you're doing this frequently, check out collections.Counter:"", 'Regular expressions maybe?', 'more info here', 'Python-3.x:', 'str.count(a) is the best solution to count a single character in a string. But if you need to count more characters you would have to read the whole string as many times as characters you want to count.', 'This easy and straight forward function might help:', 'Regular expressions are very useful if you want case-insensitivity (and of course all the power of regex).', 'An alternative way to get all the character counts without using Counter(), count and regex', 'count is definitely the most concise and efficient way of counting the occurrence of a character in a string but I tried to come up with a solution using lambda, something like this :', '""Without using count to find you want character in string"" method.', 'I am a fan of the pandas library, in particular the value_counts() method. You could use it to count the occurrence of each character in your string:', ""I don't know about 'simplest' but simple comprehension could do:"", 'Python 3', 'No more than this IMHO - you can add the upper or lower methods']"
170,Best way to convert string to bytes in Python 3?,"There appear to be two different ways to convert a string to bytes, as seen in the answers to TypeError: 'str' does not support the buffer interface

Which of these methods would be better or ...",https://stackoverflow.com/questions/7585435/best-way-to-convert-string-to-bytes-in-python-3,"[""There appear to be two different ways to convert a string to bytes, as seen in the answers to TypeError: 'str' does not support the buffer interface"", 'If you look at the docs for bytes, it points you to bytearray:', ""It's easier than it is thought:"", ""The absolutely best way is neither of the 2, but the 3rd. The first parameter to encode defaults to 'utf-8' ever since Python 3.0. Thus the best way is""]"
171,How to change the order of DataFrame columns?,"I have the following DataFrame (df):

import numpy as np
import pandas as pd

df = pd.DataFrame(np.random.rand(10, 5))
I add more column(s) by assignment:

df['mean'] = df.mean(1)
How can I move the ...",https://stackoverflow.com/questions/13148429/how-to-change-the-order-of-dataframe-columns,"['I have the following DataFrame (df):', 'One easy way would be to reassign the dataframe with a list of the columns, rearranged as needed.', 'You could also do something like this:', 'Just assign the column names in the order you want them:', 'How about:', 'In your case,', 'You need to create a new list of your columns in the desired order, then use df = df[cols] to rearrange the columns in this new order.', 'You can try out the following solutions :', 'If your column names are too long to type then you could specify the new order through a list of integers with the positions:', ""The Most simple way\nSuppose you have df with columns A B C,\nyou can just df.reindex(['B','C','A'],axis=1)"", 'I ran into a similar question myself, and just wanted to add what I settled on. I liked the reindex_axis() method for changing column order. This worked:', 'This function avoids you having to list out every variable in your dataset just to order a few of them.', 'Simply do,', ""You could do the following (borrowing parts from Aman's answer):"", 'I think this is a slightly neater solution:', 'Just type the column name you want to change, and set the index for the new location.', 'Moving any column to any position:', ""Here's a way to move one existing column that will modify the existing data frame in place."", 'A pretty straightforward solution that worked for me is to use .reindex on df.columns:', 'You can use a set which is an unordered collection of unique elements to do keep the ""order of the other columns untouched"":', 'You can use reindex which can be used for both axis:', 'This question has been answered before but reindex_axis is deprecated now so I would suggest to use:', 'Just flipping helps often.', ""You can do that after you added the 'n' column into your df as follows."", 'How about using ""T""?', '@clocker: Your solution was very helpful for me, as I wanted to bring two columns in front from a dataframe where I do not know exactly the names of all columns, because they are generated from a pivot statement before.\nSo, if you are in the same situation: To bring columns in front that you know the name of and then let them follow by ""all the other columns"", I came up with the following general solution;', 'set():', ""I liked Shoresh's answer to use set functionality to remove columns when you don't know the location, however this didn't work for my purpose as I need to keep the original column order (which has arbitrary column labels)."", 'Here is a function to do this for any number of columns.', 'Hackiest method in the book', ""I believe @Aman's answer is the best if you know the location of the other column.""]"
172,Is there a simple way to delete a list element by value?,"I want to remove a value from a list if it exists in the list (which it may not).
a = [1, 2, 3, 4]
b = a.index(6)

del a[b]
print(a)

The above case (in which it does not exist) shows the following ...",https://stackoverflow.com/questions/2793324/is-there-a-simple-way-to-delete-a-list-element-by-value,"['I want to remove a value from a list if it exists in the list (which it may not).', ""To remove an element's first occurrence in a list, simply use list.remove:"", ""Usually Python will throw an Exception if you tell it to do something it can't so you'll have to do either:"", 'You can do', 'Consider:', ""Here's how to do it inplace (without list comprehension):"", ""If you know what value to delete, here's a simple way (as simple as I can think of, anyway):"", 'Another possibility is to use a set instead of a list, if a set is applicable in your application.', ""As stated by numerous other answers, list.remove() will work, but throw a ValueError if the item wasn't in the list. With python 3.4+, there's an interesting approach to handling this, using the suppress contextmanager:"", 'If your elements are distinct, then a simple set difference will do.', ""Finding a value in a list and then deleting that index (if it exists) is easier done by just using list's remove method:"", 'This example is fast and will delete all instances of a value from the list:', 'In one line:', 'Overwrite the list by indexing everything except the elements you wish to remove', 'We can also use .pop:', 'With a for loop and a condition:', ""Say for example, we want to remove all 1's from x. This is how I would go about it:"", 'This removes all instances of ""-v"" from the array sys.argv, and does not complain if no instances were found:', 'Maybe your solutions works with ints, but It Doesnt work for me with dictionarys.', 'this is my answer, just use while and for']"
173,Display number with leading zeros,"Given:

a = 1
b = 10
c = 100
How do I display a leading zero for all numbers with less than two digits?

This is the output I'm expecting:

01
10
100",https://stackoverflow.com/questions/134934/display-number-with-leading-zeros,"['Given:', 'In Python 2 (and Python 3) you can do:', 'You can use str.zfill:', 'In Python 2.6+ and 3.0+, you would use the format() string method:', 'prints:', 'Or this:', 'In Python >= 3.6, you can do this succinctly with the new f-strings that were introduced by using:', 'results in:', 'The Pythonic way to do this:', 'Or another solution.', 'Use a format string - http://docs.python.org/lib/typesseq-strings.html', 'This is how I do it:', 'You can do this with f strings.', 'Use:', 'The 5 is the number of total digits.', 'If dealing with numbers that are either one or two digits:']"
174,Add one row to pandas DataFrame,"I understand that pandas is designed to load fully populated DataFrame but I need to create an empty DataFrame then add rows, one by one.
What is the best way to do this ?

I successfully created an ...",https://stackoverflow.com/questions/10715965/add-one-row-to-pandas-dataframe,"['I understand that pandas is designed to load fully populated DataFrame but I need to create an empty DataFrame then add rows, one by one.\nWhat is the best way to do this ?', 'You can use df.loc[i], where the row with index i will be what you specify it to be in the dataframe.', 'In case you can get all data for the data frame upfront, there is a much faster approach than appending to a data frame:', 'You could use pandas.concat() or DataFrame.append(). For details and examples, see Merge, join, and concatenate.', ""It's been a long time, but I faced the same problem too. And found here a lot of interesting answers. So I was confused what method to use."", 'If you know the number of entries ex ante, you should preallocate the space by also providing the index (taking the data example from a different answer):', 'For efficient appending see How to add an extra row to a pandas dataframe and Setting With Enlargement.', 'You can append a single row as a dictionary using the ignore_index option.', 'Yes, people have already explained that you should NEVER grow a DataFrame, and that you should append your data to a list and convert it to a DataFrame once at the end. But do you understand why?', 'For the sake of Pythonic way, here add my answer:', 'You can also build up a list of lists and convert it to a dataframe -', 'This is not an answer to the OP question but a toy example to illustrate the answer of @ShikharDua above which I found very useful.', 'Figured out a simple and nice way:', 'You can use generator object to create Dataframe, which will be more memory efficient over the list.', 'Create a new record(data frame) and add to old_data_frame.\npass list of values and corresponding column names to create a new_record (data_frame)', 'Here is the way to add/append a row in pandas DataFrame', ""Instead of a list of dictionaries as in ShikharDua's answer, we can also represent our table as a dictionary of lists, where each list stores one column in row-order, given we know our columns beforehand. At the end we construct our DataFrame once."", 'if you want to add row at the end append it as a list', 'Another way to do it (probably not very performant):', 'All you need is loc[df.shape[0]] or loc[len(df)]', 'You can use for loop to iterate through values or can add arrays of values', 'Make it simple. By taking list as input which will be appended as row in data-frame:-', 'We often see the construct df.loc[subscript] = … to assign to one DataFrame row. Mikhail_Sam posted benchmarks containing, among others, this construct as well as the method using dict and create DataFrame in the end. He found the latter to be the fastest by far. But if we replace the df3.loc[i]  = … (with preallocated DataFrame) in his code with df3.values[i] = …, the outcome changes significantly, in that that method performs similar to the one using dict. So we should more often take the use of df.values[subscript] = … into consideration. However note that .values takes a zero-based subscript, which may be different from the DataFrame.index.', 'pandas.DataFrame.append', 'You can concatenate two DataFrames for this. I basically came across this problem to add a new row to an existing DataFrame with a character index(not numeric).\nSo, I input the data for a new row in a duct() and index in a list.', 'If all data in your Dataframe has the same dtype you might use a numpy array. You can write rows directly into the predefined array and convert it to a dataframe at the end.\nSeems to be even faster than converting a list of dicts.', 'This will take care of adding an item to an empty DataFrame. The issue is that df.index.max() == nan for the first index:', 'before going to add a row, we have to convert the dataframe to dictionary there you can see the keys as columns in dataframe and values of the columns are again stored in the dictionary but there key for every column is the index number in dataframe. That idea make me to write the below code.']"
175,Running shell command and capturing the output,"I want to write a function that will execute a shell command and return its output as a string, no matter, is it an error or success message. I just want to get the same result that I would have ...",https://stackoverflow.com/questions/4760215/running-shell-command-and-capturing-the-output,"['I want to write a function that will execute a shell command and return its output as a string, no matter, is it an error or success message. I just want to get the same result that I would have gotten with the command line.', 'In all officially maintained versions of Python, the simplest approach is to use the subprocess.check_output function:', 'This is way easier, but only works on Unix (including Cygwin) and Python2.7.', 'Something like that:', ""Vartec's answer doesn't read all lines, so I made a version that did:"", 'This is a tricky but super simple solution which works in many situations:', 'I had the same problem but figured out a very simple way of doing this:', 'You can use following commands to run any shell command. I have used them on ubuntu.', ""Your Mileage May Vary, I attempted @senderle's spin on Vartec's solution in Windows on Python 2.6.5, but I was getting errors, and no other solutions worked. My error was: WindowsError: [Error 6] The handle is invalid."", 'I had a slightly different flavor of the same problem with the following requirements:', 'Splitting the initial command for the subprocess might be tricky and cumbersome.', 'If you need to run a shell command on multiple files, this did the trick for me.', 'According to @senderle, if you use python3.6 like me:', 'If you use the subprocess python module, you are able to handle the STDOUT, STDERR and return code of command separately. You can see an example for the complete command caller implementation. Of course you can extend it with try..except if you want.', ""eg, execute('ls -ahl')\ndifferentiated three/four possible returns and OS platforms:"", 'The output can be redirected to a text file and then read it back.', 'just wrote a small bash script to do this using curl', 'Here a solution, working if you want to print output while process is running or not.', 'I would like to suggest simppl as an option for consideration. It is a module that is available via pypi: pip install simppl and was runs on python3.']"
176,How to move a file?,"I looked into the Python os interface, but was unable to locate a method to move a file. How would I do the equivalent of $ mv ... in Python?

>>> source_files = '/PATH/TO/FOLDER/*'
>>&...",https://stackoverflow.com/questions/8858008/how-to-move-a-file,"['I looked into the Python os interface, but was unable to locate a method to move a file. How would I do the equivalent of $ mv ... in Python?', 'os.rename(), shutil.move(), or os.replace()', ""Although os.rename() and shutil.move() will both rename files, the command that is closest to the Unix mv command is shutil.move().  The difference is that os.rename() doesn't work if the source and destination are on different disks, while shutil.move() doesn't care what disk the files are on."", ""After Python 3.4, you can also use pathlib's class Path to move file."", 'For either the os.rename or shutil.move you will need to import the module. \nNo * character is necessary to get all the files moved.', ""This is what I'm using at the moment:"", 'The accepted answer is not the right one, because the question is not about renaming a file into a file, but moving many files into a directory. shutil.move will do the work, but for this purpose os.rename is useless (as stated on comments) because destination must have an explicit file name.', 'Based on the answer described here, using subprocess is another option.', 'This is solution, which does not enables shell using mv.', 'different disk ex. C: --> D:']"
177,"differentiate null=True, blank=True in django","When we add a database field in django we generally write:

models.CharField(max_length=100, null=True, blank=True)
The same is done with ForeignKey, DecimalField etc. What is the basic difference in ...",https://stackoverflow.com/questions/8609192/differentiate-null-true-blank-true-in-django,"['When we add a database field in django we generally write:', 'null=True sets NULL (versus NOT NULL) on the column in your DB. Blank values for Django field types such as DateTimeField or ForeignKey will be stored as NULL in the DB.', 'This is how the ORM maps blank & null fields for Django 1.8', 'It\'s crucial to understand that the options in a Django model field definition serve (at least) two purposes: defining the database tables, and defining the default format and validation of model forms. (I say ""default"" because the values can always be overridden by providing a custom form.) Some options affect the database, some options affect forms, and some affect both.', 'As said in Django Model Field reference: Link', ""You may have your answer however till this day it's difficult to judge whether to put null=True or blank=True or both to a field. I personally think it's pretty useless and confusing to provide so many options to developers. Let the handle the nulls or blanks however they want."", 'Simply null=True defines database should accept NULL values, on other hand blank=True defines on form validation this field should accept blank values or not(If blank=True it accept form without a value in that field and blank=False[default value] on form validation it will show This field is required error.', 'Here is an example of the field with blank= True and null=True', 'Means there is no constraint of database for the field to be filled, so you can have an object with null value for the filled that has this option.', 'Here, is the main difference of null=True and blank=True:', 'The default values of null and blank are False.', 'If you set null=True, it will allow the value of your database column to be set as NULL. If you only set blank=True, django will set the default new value for the column equal to """".', ""When we save anything in Django admin two steps validation happens, on Django level and on Database level. We can't save text in a number field."", 'null is for database and blank is for fields validation that you want to show on user interface like textfield to get the last name of person.\nIf lastname=models.charfield (blank=true) it didnot ask user to enter last name as this is the optional field now.\nIf lastname=models.charfield (null=true)  then it means that if this field doesnot get any value from user then it will store in database as an empty string "" "".', 'This table below demonstrates the main differences:', 'The meaning of null=True and blank=True in the model also depends on how these fields were defined in the form class.', 'null - default is False \n       if True, Django will store empty as null in the database.', 'In Very simple words,', ""When you set null=true it will set null in your database if the field is not filled. If\nyou set blank='true it will not set any value to the field."", 'Simple answer would be: Null is for Database tables while Blank is for Django Forms.', ""Null is purely database-related, whereas blank is validation-related. If a field has blank=True , validation on Django's admin site will allow entry of an empty value. If a field has blank=False , the field will be required""]"
178,Should I use 'has_key()' or 'in' on Python dicts?,"I wonder what is better to do:

d = {'a': 1, 'b': 2}
'a' in d
True
or:

d = {'a': 1, 'b': 2}
d.has_key('a')
True",https://stackoverflow.com/questions/1323410/should-i-use-has-key-or-in-on-python-dicts,"['I wonder what is better to do:', 'in is definitely more pythonic.', 'in wins hands-down, not just in elegance (and not being deprecated;-) but also in performance, e.g.:', 'According to python docs:', 'Use dict.has_key() if (and only if) your code is required to be runnable by Python versions earlier than 2.3 (when key in dict was introduced).', 'There is one example where in actually kills your performance.', ""Solution to dict.has_key() is deprecated, use 'in' -- sublime text editor 3"", 'has_key is a dictionary method, but in will work on any collection, and even when __contains__ is missing, in will use any other method to iterate the collection to find out.', ""Expanding on Alex Martelli's performance tests with Adam Parkin's comments..."", 'If you have something like this:']"
179,Putting a simple if-then-else statement on one line [duplicate],"I'm just getting into Python and I really like the terseness of the syntax. However, is there an easier way of writing an if-then-else statement so it fits on one line?

For example:

if count == N:
  ...",https://stackoverflow.com/questions/2802726/putting-a-simple-if-then-else-statement-on-one-line,"[""I'm just getting into Python and I really like the terseness of the syntax. However, is there an easier way of writing an if-then-else statement so it fits on one line?"", ""That's more specifically a ternary operator expression than an if-then, here's the python syntax"", 'Moreover, you can still use the ""ordinary"" if syntax and conflate it into one line with a colon.', ""- the ternary operator. Although I'd say your solution is more readable than this."", 'General ternary syntax:', 'with your code-snippet it would become,']"
180,What is the standard Python docstring format? [closed],"I have seen a few different styles of writing docstrings in Python, is there an official or ""agreed-upon"" style?",https://stackoverflow.com/questions/3898572/what-is-the-standard-python-docstring-format,"['Want to improve this question? Update the question so it can be answered with facts and citations by editing this post.', 'Python docstrings can be written following several formats as the other posts showed. However the default Sphinx docstring format was not mentioned and is based on reStructuredText (reST). You can get some information about the main formats in this blog post.', 'The Google style guide contains an excellent Python style guide. It includes conventions for readable docstring syntax that offers better guidance than PEP-257. For example:', 'Docstring conventions are in PEP-257 with much more detail than PEP-8.', 'As apparantly no one mentioned it: you can also use the Numpy Docstring Standard. It is widely used in the scientific community.', 'PEP-8 is the official python coding standard. It contains a section on docstrings, which refers to PEP-257 -- a complete specification for docstrings.', ""It's Python; anything goes. Consider how to publish your documentation. Docstrings are invisible except to readers of your source code."", ""I suggest using Vladimir Keleshev's pep257 Python program to check your docstrings against PEP-257 and the Numpy Docstring Standard for describing parameters, returns, etc.""]"
181,Getting key with maximum value in dictionary?,"I have a dictionary: keys are strings, values are integers.

Example: 

stats = {'a':1000, 'b':3000, 'c': 100}
I'd like to get 'b' as an answer, since it's the key with a higher value.

I did the ...",https://stackoverflow.com/questions/268272/getting-key-with-maximum-value-in-dictionary,"['I have a dictionary: keys are strings, values are integers.', 'You can use operator.itemgetter for that:', 'I have tested MANY variants, and this is the fastest way to return the key of dict with the max value:', ""If you need to know only a key with the max value you can do it without iterkeys or iteritems because iteration through dictionary in Python is iteration through it's keys."", 'Example:', 'Here is another one:', ""If you don't care about value (I'd be surprised, but) you can do:"", 'You can use:', 'Given that more than one entry my have the max value. I would make a list of the keys that have the max value as their value.', 'To get the maximum key/value of the dictionary stats:', 'Per the iterated solutions via comments in the selected answer...', 'I got here looking for how to return mydict.keys() based on the value of mydict.values(). Instead of just the one key returned, I was looking to return the top x number of values.', 'I was not satisfied with any of these answers. max always picks the first key with the max value. The dictionary could have multiple keys with that value.', 'With collections.Counter you could do', 'A heap queue is a generalised solution which allows you to extract the top n keys ordered by value:', 'max((value, key) for key, value in stats.items())[1]', 'Much simpler to understand approach:', ""+1 to @Aric Coady's simplest solution. \nAnd also one way to random select one of keys with max value in the dictionary:"", 'How about:', 'For scientific python users, here is a simple solution using Pandas:', 'max(stats, key=stats.get) if stats else None', ""I tested the accepted answer AND @thewolf's fastest solution against a very basic loop and the loop was faster than both:"", 'In the case you have more than one key with the same value, for example:']"
182,Checking whether a variable is an integer or not [duplicate],How do I check whether a variable is an integer?,https://stackoverflow.com/questions/3501382/checking-whether-a-variable-is-an-integer-or-not,"['How do I check whether a variable is an integer?', 'If you need to do this, do', 'All proposed answers so far seem to miss the fact that a double (floats in python are actually doubles) can also be an integer (if it has nothing after the decimal point).  I use the built-in is_integer() method on doubles to check this.', ""Here's a summary of the different methods mentioned here:"", ""If you really need to check then it's better to use abstract base classes rather than concrete classes. For an integer that would mean:"", 'See here for more.', 'Why not try something like:', 'Rather than over complicate things, why not just a simple', 'A simple method I use in all my software is this. It checks whether the variable is made up of numbers.', ""it's really astounding to see such a heated discussion coming up when such a basic, valid and, i believe, mundane question is being asked."", 'Found a related question here on SO itself.', ""If you want to check that a string consists of only digits, but converting to an int won't help, you can always just use regex."", 'why not just check if the value you want to check is equal to itself cast as an integer as shown below?', 'You can also use str.isdigit. Try looking up help(str.isdigit)', ""If the variable is entered like a string (e.g. '2010'):"", 'Here is a simple example how you can determine an integer', 'In the presence of numpy check like ..', 'If you just need the value, operator.index (__index__ special method) is the way to go in my opinion. Since it should work for all types that can be safely cast to an integer. I.e. floats fail, integers, even fancy integer classes that do not implement the Integral abstract class work by duck typing.', ""If you want to check with no regard for Python version (2.x vs 3.x), use six (PyPI) and it's integer_types attribute:"", 'If you are reading from a file and you have an array or dictionary with values of multiple datatypes, the following will be useful.\nJust check whether the variable can be type casted to int(or any other datatype you want to enforce) or not.', 'use the int function to help', 'If you have not int you can do just this:', 'A simple way to do this is to directly check if the remainder on division by 1 is 0 or not.', 'A more general approach that will attempt to check for both integers and integers given as strings will be', 'It is very simple to check in python. You can do like this:', 'I was writing a program to check if a number was square and I encountered this issue, the \ncode I used was:', 'You can do this.', 'Consider the case x = n**(1.0/m), where n=10**5, m=5. \nIn Python, x will be 10.000000000000002, which is only not integer because of floating point arithmetic operations.', 'Call this function:']"
183,What are “named tuples” in Python?,"Reading the changes in Python 3.1, I found something... unexpected:
  The sys.version_info tuple is now a named tuple:
I never heard about named tuples before, and I thought elements could either be ...",https://stackoverflow.com/questions/2970608/what-are-named-tuples-in-python,"['Reading the changes in Python 3.1, I found something... unexpected:', 'Named tuples are basically easy-to-create, lightweight object types.  Named tuple instances can be referenced using object-like variable dereferencing or the standard tuple syntax.  They can be used similarly to struct or other common record types, except that they are immutable.  They were added in Python 2.6 and Python 3.0, although there is a recipe for implementation in Python 2.4.', 'namedtuple is a factory function for making a tuple class. With that class we can create tuples that are callable by name also.', 'A named tuple is a tuple.', 'namedtuples are a great feature, they are perfect container for data. When you have to ""store"" data you would use tuples or dictionaries, like:', 'named tuples allow backward compatibility with code that checks for the version like this', 'is one of the easiest ways to clean up your code and make it more readable. It self-documents what is happening in the tuple. Namedtuples instances are just as memory efficient as regular tuples as they do not have per-instance dictionaries, making them faster than dictionaries.', 'What is namedtuple ?', 'In Python inside there is a good use of container called a named tuple, it can be used to create a definition of class and has all the features of the original tuple.', 'Another way (a new way) to use named tuple is using NamedTuple from typing package: Type hints in namedtuple', 'Try this:', 'Everyone else has already answered it, but I think I still have something else to add.']"
184,How do I install a Python package with a .whl file?,"I'm having trouble installing a Python package on my Windows machine, and would like to install it with Christoph Gohlke's Window binaries. (Which, to my experience, alleviated much of the fuss for ...",https://stackoverflow.com/questions/27885397/how-do-i-install-a-python-package-with-a-whl-file,"[""I'm having trouble installing a Python package on my Windows machine, and would like to install it with Christoph Gohlke's Window binaries. (Which, to my experience, alleviated much of the fuss for many other package installations). However, only .whl files are available."", ""I just used the following which was quite simple. First open a console then cd to where you've downloaded your file like some-package.whl and use"", 'First, make sure you have updated pip to enable wheel support:', ""There are several file versions on the great Christoph Gohlke's site."", 'I am in the same boat as the OP.', 'You have to run pip.exe from the command prompt on my computer. \nI type C:/Python27/Scripts/pip2.exe install numpy', ""On Windows you can't just upgrade using pip install --upgrade pip, because the pip.exe is in use and there would be an error replacing it. Instead, you should upgrade pip like this:"", 'To be able to install wheel files with a simple doubleclick on them you can do one the following:', 'EDIT: THIS NO LONGER IS A PART OF PIP', 'In-case if you unable to install specific package directly using PIP.', 'I downloaded NumPy from here\n    https://pypi.python.org/pypi/numpy', 'You can install the .whl file, using pip install filename. Though to use it in this form, it should be in the same directory as your command line, otherwise specify the complete filename, along with its address like pip install C:\\Some\\PAth\\filename.', 'What I did was first updating the pip by using the command: \npip install --upgrade pip and then I also installed wheel by using command: pip install wheel and then it worked perfectly Fine.', ""New Python users on Windows often forget to add Python's \\Scripts directory to the PATH variable during the installation. I recommend to use the Python launcher and execute pip as a script with the -m switch. Then you can install the wheels for a specific Python version (if more than one are installed) and the Scripts directory doesn't have to be in the PATH. So open the command line, navigate (with the cd command) to the folder where the .whl file is located and enter:"", 'I would be suggesting you the exact way how to install .whl file.\nInitially I faced many issues but then I solved it, Here is my trick to install .whl files.', 'Download the package (.whl).', ""There's a slight difference between accessing the .whl file in python2 and python3.In python3 you need to install wheel first and then you can access .whl files."", 'On the MacOS, with pip installed via MacPorts into the MacPorts python2.7, I had to use @Dunes solution:']"
185,Why are Python lambdas useful? [closed],"I'm trying to figure out Python lambdas.  Is lambda one of those ""interesting"" language items that in real life should be forgotten? 

I'm sure there are some edge cases where it might be needed, but ...",https://stackoverflow.com/questions/890128/why-are-python-lambdas-useful,"['Want to improve this question? Update the question so it focuses on one problem only by editing this post.', 'Are you talking about lambda functions? Like', 'lambda is just a fancy way of saying function. Other than its name, there is nothing obscure, intimidating or cryptic about it. When you read the following line, replace lambda by function in your mind:', 'The two-line summary:', 'A lambda is part of a very important abstraction mechanism which deals with higher order functions. To get proper understanding of its value, please watch high quality lessons from Abelson and Sussman, and read the book SICP', ""I doubt lambda will go away.\nSee Guido's post about finally giving up trying to remove it. Also see an outline of the conflict."", ""lambdas are extremely useful in GUI programming. For example, lets say you're creating a group of buttons and you want to use a single paramaterized callback rather than a unique callback per button. Lambda lets you accomplish that with ease:"", 'In Python, lambda is just a way of defining functions inline,', 'I find lambda useful for a list of functions that do the same, but for different circumstances.', 'Pretty much anything you can do with lambda you can do better with either named functions or list and generator expressions.', ""I've been using Python for a few years and I've never run in to a case where I've needed lambda. Really, as the tutorial states, it's just for syntactic sugar."", ""I can't speak to python's particular implementation of lambda, but in general lambda functions are really handy.  They're a core technique (maybe even THE technique) of functional programming, and they're also very useuful in object-oriented programs.  For certain types of problems, they're the best solution, so certainly shouldn't be forgotten!"", ""Lambda function it's a non-bureaucratic way to create a function."", ""One of the nice things about lambda that's in my opinion understated is that it's way of deferring an evaluation for simple forms till the value is needed. Let me explain."", 'Lambdas are actually very powerful constructs that stem from ideas in functional programming, and it is something that by no means will be easily revised, redefined or removed in the near future of Python. They help you write code that is more powerful as it allows you to pass functions as parameters, thus the idea of functions as first-class citizens.', 'As stated above, the lambda operator in Python defines an anonymous function, and in Python functions are closures. It is important not to confuse the concept of closures with the operator lambda, which is merely syntactic methadone for them.', 'Lambdas are deeply linked to functional programming style in general. The idea that you can solve problems by applying a function to some data, and merging the results, is what google uses to implement most of its algorithms.', 'First congrats that managed to figure out lambda. In my opinion this is really powerful construct to act with. The trend these days towards functional programming languages is surely an indicator that it neither should be avoided nor it will be redefined in the near future.', ""I'm just beginning Python and ran head first into Lambda- which took me a while to figure out."", 'I use lambdas to avoid code duplication. It would make the function easily comprehensible\nEg:', ""I started reading David Mertz's book today 'Text Processing in Python.' While he has a fairly terse description of Lambda's the examples in the first chapter combined with the explanation in Appendix A made them jump off the page for me (finally) and all of a sudden I understood their value.  That is not to say his explanation will work for you and I am still at the discovery stage so I will not attempt to add to these responses other than the following:\nI am new to Python\nI am new to OOP\nLambdas were a struggle for me\nNow that I read Mertz, I think I get them and I see them as very useful as I think they allow a cleaner approach to programming."", 'A useful case for using lambdas is to improve the readability of long list comprehensions.\nIn this example loop_dic is short for clarity but imagine loop_dic being very long. If you would just use a plain value that includes i instead of the lambda version of that value you would get a NameError.', ""I can give you an example where I actually needed lambda serious.  I'm making a graphical program, where the use right clicks on a file and assigns it one of three options.  It turns out that in Tkinter (the GUI interfacing program I'm writing this in), when someone presses a button, it can't be assigned to a command that takes in arguments.  So if I chose one of the options and wanted the result of my choice to be:"", 'I use it quite often, mainly as a null object or to partially bind parameters to a function.', ""I use lambda to create callbacks that include parameters. It's cleaner writing a lambda in one line than to write a method to perform the same functionality."", ""I'm a python beginner, so to getter a clear idea of lambda I compared it with a 'for' loop; in terms of efficiency.\nHere's the code (python 2.7) -"", ""Lambda is a procedure constructor. You can synthesize programs at run-time, although Python's lambda is not very powerful. Note that few people understand that kind of programming.""]"
186,Why use pip over easy_install? [closed],"A tweet reads: 
  Don't use easy_install, unless you
  like stabbing yourself in the face.
  Use pip.
Why use pip over easy_install? Doesn't the fault lie with PyPI and package authors mostly? If an ...",https://stackoverflow.com/questions/3220404/why-use-pip-over-easy-install,"['Want to improve this question? Update the question so it can be answered with facts and citations by editing this post.', ""Many of the answers here are out of date for 2015 (although the initially accepted one from Daniel Roseman is not). Here's the current state of things:"", ""From Ian Bicking's own introduction to pip:"", 'Another—as of yet unmentioned—reason for favoring pip is because it is the new hotness and will continue to be used in the future.', 'Two reasons, there may be more:', 'REQUIREMENTS files.', ""pip won't install binary packages and isn't well tested on Windows."", 'UPDATE: setuptools has absorbed distribute as opposed to the other way around, as some thought. setuptools is up-to-date with the latest distutils changes and the wheel format. Hence, easy_install and pip are more or less on  equal footing now.', ""As an addition to fuzzyman's reply:"", 'Just met one special case that I had to use easy_install instead of pip, or I have to pull the source codes directly.']"
187,How to copy a dictionary and only edit the copy,"Can someone please explain this to me? This doesn't make any sense to me.

I copy a dictionary into another and edit the second and both are changed. Why is this happening?

>>> dict1 = {""...",https://stackoverflow.com/questions/2465921/how-to-copy-a-dictionary-and-only-edit-the-copy,"[""Can someone please explain this to me? This doesn't make any sense to me."", 'Python never implicitly copies objects. When you set dict2 = dict1, you are making them refer to the same exact dict object, so when you mutate it, all references to it keep referring to the object in its current state.', 'When you assign dict2 = dict1, you are not making a copy of dict1, it results in dict2 being just another name for dict1.', 'While dict.copy() and dict(dict1) generates a copy, they are only shallow copies. If you want a deep copy, copy.deepcopy(dict1) is required. An example:', 'On python 3.5+ there is an easier way to achieve a shallow copy by using the ** unpackaging operator. Defined by Pep 448.', 'The best and the easiest ways to create a copy of a dict in both Python 2.7 and 3 are...', 'You can also just make a new dictionary with a dictionary comprehension.  This avoids importing copy.', 'In addition to the other provided solutions, you can use ** to integrate the dictionary into an empty dictionary, e.g.,', 'Assignment statements in Python do not copy objects, they create bindings between a target and an object.', 'In Depth:', 'This confused me too, initially, because I was coming from a C background.', 'You can copy and edit the newly constructed copy in one go by calling the dict constructor with additional keyword arguments:', 'Every variable in python (stuff like dict1 or str or __builtins__ is a pointer to some hidden platonic ""object"" inside the machine.', ""dict1 is a symbol that references an underlying dictionary object. Assigning dict1 to dict2 merely assigns the same reference. Changing a key's value via the dict2 symbol changes the underlying object, which also affects dict1. This is confusing."", 'dict2 = dict1 does not copy the dictionary. It simply gives you the programmer a second way (dict2) to refer to the same dictionary.', 'There are many ways to copy Dict object, I simply use', 'As others have explained, the built-in dict does not do what you want. But in Python2 (and probably 3 too) you can easily create a ValueDict class that copies with = so you can be sure that the original will not change.', 'the following code, which is on dicts which follows json syntax more than 3 times faster than deepcopy', 'i ran into a peculiar behavior when trying to deep copy dictionary property of class w/o assigning it to variable', 'Copying by using a for loop:', 'You can use directly:']"
188,How to remove items from a list while iterating?,"I'm iterating over a list of tuples in Python, and am attempting to remove them if they meet certain criteria. 

for tup in somelist:
    if determine(tup):
         code_to_remove_tup
What should I ...",https://stackoverflow.com/questions/1207406/how-to-remove-items-from-a-list-while-iterating,"[""I'm iterating over a list of tuples in Python, and am attempting to remove them if they meet certain criteria."", ""You can use a list comprehension to create a new list containing only the elements you don't want to remove:"", ""The answers suggesting list comprehensions are ALMOST correct -- except that they build a completely new list and then give it the same name the old list as, they do NOT modify the old list in place. That's different from what you'd be doing by selective removal, as in @Lennart's suggestion -- it's faster, but if your list is accessed via multiple references the fact that you're just reseating one of the references and NOT altering the list object itself can lead to subtle, disastrous bugs."", 'You need to take a copy of the list and iterate over it first, or the iteration will fail with what may be unexpected results.', ""You need to go backwards otherwise it's a bit like sawing off the tree-branch that you are sitting on :-)"", 'Overview of workarounds', 'Your best approach for such an example would be a list comprehension', 'For those that like functional programming:', 'I needed to do this with a huge list, and duplicating the list seemed expensive, especially since in my case the number of deletions would be few compared to the items that remain. I took this low-level approach.', 'It might be smart to also just create a new list if the current list item meets the desired criteria.', 'This answer was originally written in response to a question which has since been marked as duplicate:\nRemoving coordinates from list on python', 'If you want to do anything else during the iteration, it may be nice to get both the index (which guarantees you being able to reference it, for example if you have a list of dicts) and the actual list item contents.', 'Most of the answers here want you to create a copy of the list. I had a use case where the list was quite long (110K items) and it was smarter to keep reducing the list instead.', ""You can try for-looping in reverse so for some_list you'll do something like:"", 'You might want to use filter() available as the built-in.', 'One possible solution, useful if you want not only remove some things, but also do something with all elements in a single loop:', 'for loop will be iterate through index..', 'I needed to do something similar and in my case the problem was memory - I needed to merge multiple dataset objects within a list, after doing some stuff with them, as a new object, and needed to get rid of each entry I was merging to avoid duplicating all of them and blowing up memory. In my case having the objects in a dictionary instead of a list worked fine:', 'TLDR:', ""The other answers are correct that it is usually a bad idea to delete from a list that you're iterating. Reverse iterating avoids the pitfalls, but it is much more difficult to follow code that does that, so usually you're better off using a list comprehension or filter."", 'The most effective method is list comprehension, many people show their case, of course, it is also a good way to get an iterator through filter.', 'If you want to delete elements from a list while iterating, use a while-loop so you can alter the current index and end index after each deletion.', 'I can think of three approaches to solve your problem. As an example, I will create a random list of tuples somelist = [(1,2,3), (4,5,6), (3,6,6), (7,8,9), (15,0,0), (10,11,12)]. The condition that I choose is sum of elements of a tuple = 15. In the final list we will only have those tuples whose sum is not equal to 15.', 'For anything that has the potential to be really big, I use the following.', ""In some situations, where you're doing more than simply filtering a list one item at time, you want your iteration to change while iterating."", 'If you will use the new list later, you can simply set the elem to None, and then judge it in the later loop, like this', 'uppose a list of number and you want to remove all no which are divisible by 3,']"
189,How to iterate through two lists in parallel?,"I have two iterables in Python, and I want to go over them in pairs:
foo = (1, 2, 3)
bar = (4, 5, 6)

for (f, b) in some_iterator(foo, bar):
    print(""f: "", f, ""; b: "", b)

It ...",https://stackoverflow.com/questions/1663807/how-to-iterate-through-two-lists-in-parallel,"['I have two iterables in Python, and I want to go over them in pairs:', 'zip stops when the shorter of foo or bar stops.', 'You want the zip function.', ""You should use 'zip' function. Here is an example how your own zip function can look like"", ""Building on the answer by @unutbu, I have compared the iteration performance of two identical lists when using Python 3.6's zip() functions, Python's enumerate() function, using a manual counter (see count() function), using an index-list, and during a special scenario where the elements of one of the two lists (either foo or bar) may be used to index the other list. Their performances for printing and creating a new list, respectively, were investigated using the timeit() function where the number of repetitions used was 1000 times. One of the Python scripts that I had created to perform these investigations is given below. The sizes of the foo and bar lists had ranged from 10 to 1,000,000 elements."", 'You can bundle the nth elements into a tuple or list using comprehension, then pass them out with a generator function.', ""Here's how to do it with list comprehension:""]"
190,How does Python's super() work with multiple inheritance?,"I'm pretty much new in Python object oriented programming and I have trouble
understanding the super() function (new style classes) especially when it comes to multiple inheritance.
For example if you ...",https://stackoverflow.com/questions/3277367/how-does-pythons-super-work-with-multiple-inheritance,"[""I'm pretty much new in Python object oriented programming and I have trouble\nunderstanding the super() function (new style classes) especially when it comes to multiple inheritance."", 'This is detailed with a reasonable amount of detail by Guido himself in his blog post Method Resolution Order (including two earlier attempts).', 'Your code, and the other answers, are all buggy. They are missing the super() calls in the first two classes that are required for co-operative subclassing to work.', ""I wanted to elaborate the answer by lifeless a bit because when I started reading about how to use super() in a multiple inheritance hierarchy in Python, I did't get it immediately."", ""This is known as the Diamond Problem, the page has an entry on Python, but in short, Python will call the superclass's methods from left to right."", 'This is to how I solved to issue of having multiple inheritance with different variables for initialization and having multiple MixIns with the same function call.  I had to explicitly add variables to passed **kwargs and add a MixIn interface to be an endpoint for super calls.', ""I understand this doesn't directly answer the super() question, but I feel it's relevant enough to share."", ""Assuming everything descends from object (you are on your own if it doesn't), Python computes a method resolution order (MRO) based on your class inheritance tree.  The MRO satisfies 3 properties:"", ""About @calfzhou's comment, you can use, as usually, **kwargs:"", 'Another not yet covered point is passing parameters for initialization of classes. Since the destination of super depends on the subclass the only good way to pass parameters is packing them all together. Then be careful to not have the same parameter name with different meanings.', 'Output is', ""In learningpythonthehardway I learn something called super() an in-built function if not mistaken. Calling super() function can help the inheritance to pass through the parent and 'siblings' and help you to see clearer. I am still a beginner but I love to share my experience on using this super() in python2.7."", 'I would like to add to what @Visionscaper says at the top:', 'In python 3.5+ inheritance looks predictable and very nice for me.\nPlease looks at this code:', 'Maybe there\'s still something that can be added, a small example with Django rest_framework, and decorators.  This provides an answer to the implicit question: ""why would I want this anyway?""', 'Posting this answer for my future referance.', 'Consider calling super().Foo() called from a sub-class. The Method Resolution Order (MRO) method is the order in which method calls are resolved.']"
191,How to get the home directory in Python?,"I need to get the location of the home directory of the current logged-on user. Currently, I've been using the following on Linux:

os.getenv(""HOME"")
However, this does not work on Windows. What is ...",https://stackoverflow.com/questions/4028904/how-to-get-the-home-directory-in-python,"[""I need to get the location of the home directory of the current logged-on user. Currently, I've been using the following on Linux:"", 'You want to use os.path.expanduser.\nThis will ensure it works on all platforms:', 'Here is a linux way cd .. if you need to use that instead note:(if you are in a sub directory then it will take to the directory)']"
192,How do I download a file over HTTP using Python?,"I have a small utility that I use to download an MP3 file from a website on a schedule and then builds/updates a podcast XML file which I've added to iTunes.

The text processing that creates/updates ...",https://stackoverflow.com/questions/22676/how-do-i-download-a-file-over-http-using-python,"[""I have a small utility that I use to download an MP3 file from a website on a schedule and then builds/updates a podcast XML file which I've added to iTunes."", 'Use urllib.request.urlopen():', 'One more, using urlretrieve:', 'In 2012, use the python requests library', ""The wb in open('test.mp3','wb') opens a file (and erases any existing file) in binary mode so you can save data with it instead of just text."", 'urllib.request.urlopen', 'use wget module:', 'An improved version of the PabloG code for Python 2/3:', 'Simple yet Python 2 & Python 3 compatible way comes with six library:', 'Wrote wget library in pure Python just for this purpose. It is pumped up urlretrieve with these features as of version 2.0.', 'Following are the most commonly used calls for downloading files in python:', 'I agree with Corey, urllib2 is more complete than urllib and should likely be the module used if you want to do more complex things, but to make the answers more complete, urllib is a simpler module if you want just the basics:', 'In python3 you can use urllib3 and shutil libraires.\nDownload them by using pip or pip3 (Depending whether python3 is default or not)', 'If you have wget installed, you can use parallel_sync.', 'You can get the progress feedback with urlretrieve as well:', 'Just for the sake of completeness, it is also possible to call any program for retrieving files using the subprocess package. Programs dedicated to retrieving files are more powerful than Python functions like urlretrieve. For example, wget can download directories recursively (-R), can deal with FTP, redirects, HTTP proxies, can avoid re-downloading existing files (-nc), and aria2 can do multi-connection downloads which can potentially speed up your downloads.', 'If speed matters to you, I made a small performance test for the modules urllib and wget, and regarding wget I tried once with status bar and once without. I took three different 500MB files to test with (different files- to eliminate the chance that there is some caching going on under the hood). Tested on debian machine, with python2.', 'Source code can be:', 'You can use PycURL on Python 2 and 3.', 'I wrote the following, which works in vanilla Python 2 or Python 3.', ""This may be a little late, But I saw pabloG's code and couldn't help adding a os.system('cls') to make it look AWESOME! Check it out :"", 'urlretrieve and requests.get are simple, however the reality not.\nI have fetched data for couple sites, including text and images, the above two probably solve most of the tasks. but for a more universal solution I suggest the use of urlopen. As it is included in Python 3 standard library, your code could run on any machine that run Python 3 without pre-installing site-package', 'I wanted do download all the files from a webpage. I tried wget but it was failing so I decided for the Python route and I found this thread.', 'Late answer, but for python>=3.6 you can use:', 'Another way is to call an external process such as curl.exe. Curl by default displays a progress bar, average download speed, time left, and more all formatted neatly in a table.\nPut curl.exe in the same directory as your script']"
193,What does the 'b' character do in front of a string literal?,"Apparently, the following is the valid syntax:

my_string = b'The string'
I would like to know:
What does this b character in front of the string mean?
What are the effects of using it?
What are ...",https://stackoverflow.com/questions/6269765/what-does-the-b-character-do-in-front-of-a-string-literal,"['Apparently, the following is the valid syntax:', 'To quote the Python 2.x documentation:', 'Python 3.x makes a clear distinction between the types:', 'The b denotes a byte string.', ""From server side, if we send any response, it will be sent in the form of byte type, so it will appear in the client as b'Response from server'"", ""Here's an example where the absence of b would throw a TypeError exception in Python 3.x"", 'It turns it into a bytes literal (or str in 2.x), and is valid for 2.6+.', 'In addition to what others have said, note that a single character in unicode can consist of multiple bytes.', 'You can use JSON to convert it to dictionary']"
194,Change column type in pandas,"I want to convert a table, represented as a list of lists, into a Pandas DataFrame. As an extremely simplified example:

a = [['a', '1.2', '4.2'], ['b', '70', '0.03'], ['x', '5', '0']]
df = pd....",https://stackoverflow.com/questions/15891038/change-column-type-in-pandas,"['I want to convert a table, represented as a list of lists, into a Pandas DataFrame. As an extremely simplified example:', 'You have four main options for converting types in pandas:', 'How about this?', 'this below code will change datatype of column.', ""When I've only needed to specify specific columns, and I want to be explicit, I've used (per DOCS LOCATION):"", 'Here is a function that takes as its arguments a DataFrame and a list of columns and coerces all data in the columns to numbers.', 'How about creating two dataframes, each with different data types for their columns, and then appending them together?', ""Here's a chart that summarises some of the most important conversions in pandas."", 'Starting pandas 1.0.0, we have pandas.DataFrame.convert_dtypes. You can even control what types to convert!', ""I thought I had the same problem but actually I have a slight difference that makes the problem easier to solve. For others looking at this question it's worth checking the format of your input list. In my case the numbers are initially floats not strings as in the question:""]"
195,"Should I put #! (shebang) in Python scripts, and what form should it take?","Should I put the shebang in my Python scripts? In what form?

#!/usr/bin/env python 
or

#!/usr/local/bin/python
Are these equally portable? Which form is used most?

Note: the tornado project uses ...",https://stackoverflow.com/questions/6908143/should-i-put-shebang-in-python-scripts-and-what-form-should-it-take,"['Should I put the shebang in my Python scripts? In what form?', ""The shebang line in any script determines the script's ability to be executed like a standalone executable without typing python beforehand in the terminal or when double clicking it in a file manager (when configured properly). It isn't necessary but generally put there so when someone sees the file opened in an editor, they immediately know what they're looking at. However, which shebang line you use IS important."", ""It's really just a matter of taste. Adding the shebang means people can invoke the script directly if they want (assuming it's marked as executable); omitting it just means python has to be invoked manually."", 'Should I put the shebang in my Python scripts?', 'If you have more than one version of Python and the script needs to run under a specific version, the she-bang can ensure the right one is used when the script is executed directly, for example:', 'You should add a shebang if the script is intended to be executable. You should also install the script with an installing software that modifies the shebang to something correct so it will work on the target platform. Examples of this is distutils and Distribute.', 'The purpose of shebang is for the script to recognize the interpreter type when you want to execute the script from the shell. \nMostly, and not always, you execute scripts by supplying the interpreter externally.\nExample usage: python-x.x script.py', 'Sometimes, if the answer is not very clear (I mean you cannot decide if yes or no), then it does not matter too much, and you can ignore the problem until the answer is clear.', 'When I installed Python 3.6.1 on Windows 7 recently, it also installed the Python Launcher for Windows, which is supposed to handle the shebang line.  However, I found that the Python Launcher did not do this: the shebang line was ignored and Python 2.7.13 was always used (unless I executed the script using py -3).', 'If you have different modules installed and need to use a specific \npython install, then shebang appears to be limited at first. However,\nyou can do tricks like the below to allow the shebang to be invoked\nfirst as a shell script and then choose python. This is very flexible\nimo:', 'Start off by verifying the proper shebang string to use:', 'This is really a question about whether the path to the Python interpreter should be absolute or Logical (/usr/bin/env) in respect to portability.', 'Use first']"
196,How to make a class JSON serializable,"How to make a Python class serializable?  

A simple class:

class FileItem:
    def __init__(self, fname):
        self.fname = fname
What should I do to be able to get output of:

>>> ...",https://stackoverflow.com/questions/3768895/how-to-make-a-class-json-serializable,"['How to make a Python class serializable?', 'Do you have an idea about the expected output? For example, will this do?', 'Here is a simple solution for a simple feature:', 'For more complex classes you could consider the tool jsonpickle:', 'Most of the answers involve changing the call to json.dumps(), which is not always possible or desirable (it may happen inside a framework component for example).', ""I like Onur's answer but would expand to include an optional toJSON() method for objects to serialize themselves:"", 'Another option is to wrap JSON dumping in its own class:', 'Just add to_json method to your class like this:', ""If you're using Python3.5+, you could use jsons. It will convert your object (and all its attributes recursively) to a dict."", 'I came across this problem the other day and implemented a more general version of an Encoder for Python objects that can handle nested objects and inherited fields:', 'if use standard json, u need to define a default function', ""json is limited in terms of objects it can print, and jsonpickle (you may need a pip install jsonpickle) is limited in terms it can't indent text. If you would like to inspect the contents of an object whose class you can't change, I still couldn't find a straighter way than:"", 'This class can do the trick, it converts object to standard json .', 'jaraco gave a pretty neat answer. I needed to fix some minor things, but this works:', 'This has worked well for me:', ""If you don't mind installing a package for it, you can use json-tricks:"", 'jsonweb seems to be the best solution for me. See http://www.jsonweb.info/en/latest/', 'Here is my 3 cents ...\nThis demonstrates explicit json serialization for a tree-like python object.\nNote: If you actually wanted some code like this you could use the twisted \nFilePath class.', ""I ran into this problem when I tried to store Peewee's model into PostgreSQL JSONField."", 'This function uses recursion to iterate over every part of the dictionary and then calls the repr() methods of classes that are not build-in types.', ""Building on Quinten Cabo's answer:"", ""Kyle Delaney's comment is correct so i tried to use the answer https://stackoverflow.com/a/15538391/1497139 as well as an improved version of https://stackoverflow.com/a/10254820/1497139"", 'I came up with my own solution. Use this method, pass any document (dict,list, ObjectId etc) to serialize.', ""I liked Lost Koder's method the most. I ran into issues when trying to serialize more complex objects whos members/methods aren't serializable. Here's my implementation that works on more objects:"", ""If you are able to install a package, I'd recommend trying dill, which worked just fine for my project. A nice thing about this package is that it has the same interface as pickle, so if you have already been using pickle in your project you can simply substitute in dill and see if the script runs, without changing any code. So it is a very cheap solution to try!"", ""I see no mention here of serial versioning or backcompat, so I will post my solution which I've been using for a bit. I probably have a lot more to learn from, specifically Java and Javascript are probably more mature than me here but here goes"", 'To add another option: You can use the attrs package and the asdict method.', ""In addition to the Onur's answer, You possibly want to deal with datetime type like below. (in order to handle: 'datetime.datetime' object has no attribute 'dict' exception.)"", 'First we need to make our object JSON-compliant, so we can dump it using the standard JSON module. I did it this way:']"
197,How do I get the full path of the current file's directory?,"I want to get the current file's directory path.
I tried:

>>> os.path.abspath(__file__)
'C:\\python27\\test.py'
But how can I retrieve the directory's path?

For example:

'C:\\python27\\'",https://stackoverflow.com/questions/3430372/how-do-i-get-the-full-path-of-the-current-files-directory,"[""I want to get the current file's directory path.\nI tried:"", 'For the directory of the script being run:', 'Using Path is the recommended way since Python 3:', 'In Python 3.x I do:', 'Try this:', 'You can use os and os.path library easily as follows', 'IPython has a magic command %pwd to get the present working directory. It can be used in following way:', 'USEFUL PATH PROPERTIES IN PYTHON:', 'I found the following commands will all return the full path of the parent directory of a Python 3.6 script.', 'If you just want to see the current working directory', 'To keep the migration consistency across platforms (macOS/Windows/Linux), try:', 'I have made a function to use when running python under IIS in CGI in order to get the current folder:', ""Let's assume you have the following directory structure: -"", 'System: MacOS']"
198,List comprehension vs. lambda + filter,"I happened to find myself having a basic filtering need: I have a list and I have to filter it by an attribute of the items.

My code looked like this:

my_list = [x for x in my_list if x.attribute == ...",https://stackoverflow.com/questions/3013449/list-comprehension-vs-lambda-filter,"['I happened to find myself having a basic filtering need: I have a list and I have to filter it by an attribute of the items.', 'It is strange how much beauty varies for different people. I find the list comprehension much clearer than filter+lambda, but use whichever you find easier.', 'This is a somewhat religious issue in Python. Even though Guido considered removing map, filter and reduce from Python 3, there was enough of a backlash that in the end only reduce was moved from built-ins to functools.reduce.', ""Since any speed difference is bound to be miniscule, whether to use filters or list comprehensions comes down to a matter of taste. In general I'm inclined to use comprehensions (which seems to agree with most other answers here), but there is one case where I prefer filter."", 'Although filter may be the ""faster way"", the ""Pythonic way"" would be not to care about such things unless performance is absolutely critical (in which case you wouldn\'t be using Python!).', ""I thought I'd just add that in python 3, filter() is actually an iterator object, so you'd have to pass your filter method call to list() in order to build the filtered list. So in python 2:"", 'An important difference is that list comprehension will return a list while the filter returns a filter, which you cannot manipulate like a list (ie: call len on it, which does not work with the return of filter).', ""I find the second way more readable. It tells you exactly what the intention is: filter the list.\nPS: do not use 'list' as a variable name"", 'Filter is just that. It filters out the elements of a list. You can see the definition mentions the same(in the official docs link I mentioned before). Whereas, list comprehension is something that produces a new list after acting upon something on the previous list.(Both filter and list comprehension creates new list and not perform operation in place of the older list. A new list here is something like a list with, say, an entirely new data type. Like converting integers to string ,etc)', 'generally filter is slightly faster if using a builtin function.', ""Here's a short piece I use when I need to filter on something after the list comprehension.  Just a combination of filter, lambda, and lists (otherwise known as the loyalty of a cat and the cleanliness of a dog)."", 'In addition to the accepted answer, there is a corner case when you should use filter instead of a list comprehension. If the list is unhashable you cannot directly process it with a list comprehension. A real world example is if you use pyodbc to read results from a database. The fetchAll() results from cursor is an unhashable list. In this situation, to directly manipulating on the returned results, filter should be used:', ""It took me some time to get familiarized with the higher order functions filter and map. So i got used to them and i actually liked filter as it was explicit that it filters by keeping whatever is truthy and I've felt cool that I knew some functional programming terms."", 'Curiously on Python 3, I see filter performing faster than list comprehensions.', 'My take']"
199,Fastest way to check if a value exists in a list,"What is the fastest way to know if a value exists in a list (a list with millions of values in it) and what its index is?
I know that all values in the list are unique as in this example.
The first ...",https://stackoverflow.com/questions/7571635/fastest-way-to-check-if-a-value-exists-in-a-list,"['What is the fastest way to know if a value exists in a list (a list with millions of values in it) and what its index is?', 'Clearest and fastest way to do it.', 'As stated by others, in can be very slow for large lists. Here are some comparisons of the performances for in, set and bisect. Note the time (in second) is in log scale.', 'You could put your items into a set. Set lookups are very efficient.', 'Usage', ""This will only be a good idea if a doesn't change and thus we can do the dict() part once and then use it repeatedly. If a does change, please provide more detail on what you are doing."", 'The original question was:', 'It sounds like your application might gain advantage from the use of a Bloom Filter data structure.', ""Be aware that the in operator tests not only equality (==) but also identity (is), the in logic for lists is roughly equivalent to the following (it's actually written in C and not Python though, at least in CPython):"", 'Or use __contains__:', 'This is not the code, but the algorithm for very fast searching.', 'Because the question is not always supposed to be understood as the fastest technical way - I always suggest the most straightforward fastest way to understand/write: a list comprehension, one-liner', 'Code to check whether two elements exist in array whose product equals k:']"
200,How do I remove/delete a folder that is not empty?,"I am getting an 'access is denied' error when I attempt to delete a folder that is not empty. I used the following command in my attempt: os.remove(""/folder_name""). 

What is the most effective way of ...",https://stackoverflow.com/questions/303200/how-do-i-remove-delete-a-folder-that-is-not-empty,"['I am getting an \'access is denied\' error when I attempt to delete a folder that is not empty. I used the following command in my attempt: os.remove(""/folder_name"").', 'Standard Library Reference: shutil.rmtree.', 'From the python docs on os.walk():', 'from python 3.4 you may use :', 'From docs.python.org:', 'If ignore_errors is set, errors are ignored; otherwise, if onerror is set, it is called to handle the error with arguments (func, path, exc_info) where func is os.listdir, os.remove, or os.rmdir; path is the argument to that function that caused it to fail; and exc_info is a tuple returned by sys.exc_info(). If ignore_errors is false and onerror is None, an exception is raised.enter code here', ""Base on kkubasik's answer, check if folder exists before remove, more robust"", 'if you are sure, that you want to delete the entire dir tree, and are no more interested in contents of dir, then crawling for entire dir tree is stupidness... just call native OS command from python to do that. It will be faster, efficient and less memory consuming.', 'Just some python 3.5 options to complete the answers above. (I would have loved to find them here).', 'I\'d like to add a ""pure pathlib"" approach:', 'Ten years later and using Python 3.7 and Linux there are still different ways to do this:', ""If you don't want to use the shutil module you can just use the os module."", ""To delete a folder even if it might not exist (avoiding the race condition in Charles Chow's answer) but still have errors when other things go wrong (e.g. permission problems, disk read error, the file isn't a directory)"", 'With os.walk I would propose the solution which consists of 3 one-liner Python calls:', 'You can use os.system command for simplicity:', 'I have found a very easy way to Delete any folder(Even NOT Empty) or file on WINDOWS OS.', 'For Windows, if directory is not empty, and you have read-only files or you get errors like', 'In my case the only way to delete was by using all possibilities because my code was supposed to run either by cmd.exe or powershell.exe. If it is your case, just create a function with this code and you will be fine:']"
201,pg_config executable not found,"I am having trouble installing psycopg2. I get the following error when I try to pip install psycopg2:

Error: pg_config executable not found.

Please add the directory containing pg_config to the ...",https://stackoverflow.com/questions/11618898/pg-config-executable-not-found,"['I am having trouble installing psycopg2. I get the following error when I try to pip install psycopg2:', 'pg_config is in postgresql-devel (libpq-dev in Debian/Ubuntu, libpq-devel on Centos/Cygwin/Babun.)', 'On Mac OS X, I solved it using the homebrew package manager', 'Have you installed python-dev?\nIf you already have, try also installing libpq-dev', 'Also on OSX. Installed Postgress.app from http://postgresapp.com/ but had the same issue.', 'On alpine, the library containing pg_config is postgresql-dev. To install, run:', 'This is what worked for me on CentOS, first install:', 'You should add python requirements used in Postgres on Ubuntu. Run:', 'Just to sum up, I also faced exactly same problem. After reading a lot of stackoverflow posts and online blogs, the final solution which worked for me is this:', 'You can install pre-compiled binaries on any platform with pip or conda:', 'sudo apt-get install libpq-dev works for me on Ubuntu 15.4', 'On Linux Mint sudo apt-get install libpq-dev worked for me.', 'UPDATE /etc/yum.repos.d/CentOS-Base.repo, [base] and [updates] sections\nADD exclude=postgresql*', 'For those running OS X, this solution worked for me:', 'Try to add it to PATH:', ""Ali's solution worked for me but I was having trouble finding the bin folder location. A quick way to find the path on Mac OS X is to open psql (there's a quick link in the top menu bar). This will open a separate terminal window and on the second line the path of your Postgres installation will appear like so:"", 'You need to upgrade your pip before installing psycopg2. Use this command', ""I'm going to leave this here for the next unfortunate soul who can't get around this problem despite all the provided solutions. Simply use sudo pip3 install psycopg2-binary"", 'On Mac OS X and If you are using Postgres App (http://postgresapp.com/):', ""On Windows,\nYou may want to install the Windows port of Psycopg, which is recommended in psycopg's documentation."", 'Just solved the problem in Cent OS 7 by:', 'Installing python-psycopg2 solved it for me on Arch Linux:', 'On MacOS, the simplest solution will be to symlink the correct binary, that is under the Postgres package.', 'Here, for OS X completeness: if you install PostgreSQL from MacPorts, pg_config will be in /opt/local/lib/postgresql94/bin/pg_config.', 'sudo yum install postgresql-devel   (centos6X)', 'To those on macOS Catalina using the zsh shell who have also installed the postgres app:', 'For mac users, extend your path variable to include PostgreSQL like this export PATH=$PATH:/Library/PostgreSQL/12/bin.', ""If you're trying to add a psycopg2 dependency in your virtual environment that will allow your python project to connect to your docker or kubernetes pod that's running postgresql separately, on your Mac and are not really interested in installing postgresql on your Mac just so that you can get pg_config, here's what you do instead:"", 'I am pretty sure you\'ve experienced the same ""problem"" i did, therefore I\'ll offer you the extremely easy solution...', 'This is how I managed to install psycopg2']"
202,Get difference between two lists,"I have two lists in Python, like these:

temp1 = ['One', 'Two', 'Three', 'Four']
temp2 = ['One', 'Two']
I need to create a third list with items from the first list which aren't present in the second ...",https://stackoverflow.com/questions/3462143/get-difference-between-two-lists,"['I have two lists in Python, like these:', 'Beware that', 'The existing solutions all offer either one or the other of:', 'Can be done using python XOR operator.', 'The difference between two lists (say list1 and list2) can be found using the following simple function.', 'In case you want the difference recursively, I have written a package for python:\nhttps://github.com/seperman/deepdiff', 'most simple way,', 'If you are really looking into performance, then use numpy!', ""i'll toss in since none of the present solutions yield a tuple:"", 'I wanted something that would take two lists and could do what diff in bash does. Since this question pops up first when you search for ""python diff two lists"" and is not very specific, I will post what I came up with.', 'Try this:', ""this could be even faster than Mark's list comprehension:"", ""Here's a Counter answer for the simplest case."", 'Here are a few simple, order-preserving ways of diffing two lists of strings.', 'This is another solution:', 'You could use a naive method if the elements of the difflist are sorted and sets.', 'I am little too late in the game for this but you can do a comparison of performance of some of the above mentioned code with this, two of the fastest contenders are,', ""If you run into TypeError: unhashable type: 'list' you need to turn lists or sets into tuples, e.g."", ""Let's say we have two lists"", 'single line version of arulmr solution', 'if you want something more like a changeset... could use Counter', 'We can calculate intersection minus union of lists:', 'This can be solved with one line.\nThe question is given two lists (temp1 and temp2) return their difference in a third list (temp3).', 'Here is an simple way to distinguish two lists (whatever the contents are), you can get the result as shown below :', 'I prefer to use converting to sets and then using the ""difference()"" function. The full code is :', 'e.g. if list1 = [10, 15, 20, 25, 30, 35, 40] and list2 = [25, 40, 35] then the returned list will be output = [10, 20, 30, 15]']"
203,How to import other Python files?,"How do I import other files in Python?
How exactly can I import a specific python file like import file.py?
How can I import a folder instead of a specific file?
I want to load a Python file ...",https://stackoverflow.com/questions/2349991/how-to-import-other-python-files,"['How do I import other files in Python?', 'importlib was added to Python 3 to programmatically import a module. \nIt is just a wrapper around __import__, see the docs.', ""Don't just hastily pick the first import strategy that works for you or else you'll have to rewrite the codebase later on when you find it doesn't meet your needs."", ""To import a specific Python file at 'runtime' with a known name:"", 'You do not have many complex methods to import a python file from one folder to another. Just create a __init__.py file to declare this folder is a python package and then go to your host file where you want to import just type', 'First case: You want to import file A.py in file B.py, these two files are in the same folder, like this:', 'Import doc .. -- Link for reference', 'and', 'If the function defined is in a file x.py:', ""How I import is import the file and use shorthand of it's name."", 'the best way to import .py files is by way of __init__.py. the simplest thing to do, is to create an empty file named __init__.py in the same directory that your.py file is located.', ""I'd like to add this note I don't very clearly elsewhere; inside a module/package, when loading from files, the module/package name must be prefixed with the mymodule. Imagine mymodule being layout like this:"", 'You can also do this: from filename import something', 'In case the module you want to import is not in a sub-directory, then try the following and run app.py from the deepest common parent directory:', 'This is how I did to call a function from a python file, that is flexible for me to call any functions.', 'There are couple of ways of including your python script with name abc.py', 'Just to import python file in another python file', ""This may sound crazy but you can just create a symbolic link to the file you want to import if you're just creating a wrapper script to it."", 'One very unknown feature of Python is the ability to import zip files:', ""There are many ways, as listed above, but I find that I just want to import he contents of a file, and don't want to have to write lines and lines and have to import other modules. So, I came up with a way to get the contents of a file, even with the dot syntax (file.property) as opposed to merging the imported file with yours.\n\nFirst of all, here is my file which I'll import, data.py""]"
204,How to sort a list of objects based on an attribute of the objects?,"I've got a list of Python objects that I'd like to sort by an attribute of the objects themselves.  The list looks like:

>>> ut
[<Tag: 128>, <Tag: 2008>, <Tag: <>, <...",https://stackoverflow.com/questions/403421/how-to-sort-a-list-of-objects-based-on-an-attribute-of-the-objects,"[""I've got a list of Python objects that I'd like to sort by an attribute of the objects themselves.  The list looks like:"", 'More on sorting by keys.', 'A way that can be fastest, especially if your list has a lot of records, is to use operator.attrgetter(""count""). However, this might run on an pre-operator version of Python, so it would be nice to have a fallback mechanism. You might want to do the following, then:', 'Readers should notice that the key= method:', 'Object-oriented approach', 'It looks much like a list of Django ORM model instances.', 'Add rich comparison operators to the object class, then use sort() method of the list.\nSee rich comparison in python.', ""If the attribute you want to sort by is a property, then you can avoid importing operator.attrgetter and use the property's fget method instead.""]"
205,"Extract file name from path, no matter what the os/path format","Which Python library can I use to extract filenames from paths, no matter what the operating system or path format could be?

For example, I'd like all of these paths to return me c:

a/b/c/
a/b/c
\a\...",https://stackoverflow.com/questions/8384737/extract-file-name-from-path-no-matter-what-the-os-path-format,"['Which Python library can I use to extract filenames from paths, no matter what the operating system or path format could be?', ""Using os.path.split or os.path.basename as others suggest won't work in all cases: if you're running the script on Linux and attempt to process a classic windows-style path, it will fail."", ""Actually, there's a function that returns exactly what you want"", 'os.path.split\nis the function you are looking for', 'In python 3', 'tail is what you want, the filename.', 'this will return : paint.exe', 'In your example you will also need to strip slash from right the right side to return c:', 'If you want to get the filename automatically you can do', 'If your file path not ended with ""/"" and directories separated by ""/"" then use the following code. As we know generally path doesn\'t end with ""/"".', 'This is working for linux and windows as well with standard library', ""Here's a regex-only solution, which seems to work with any OS path on any OS."", 'Maybe just my all in one solution without important some new(regard the tempfile for creating temporary files :D )', 'I have never seen double-backslashed paths, are they existing? The built-in feature of python module os fails for those. All others work, also the caveat given by you with os.path.normpath():', 'The Windows separator can be in a Unix filename or Windows Path.  The Unix separator can only exist in the Unix path.  The presence of a Unix separator indicates a non-Windows path.', 'For completeness sake, here is the pathlib solution for python 3.2+:', 'In both Python 2 and 3, using the module pathlib2:']"
206,Converting unix timestamp string to readable date,"I have a string representing a unix timestamp (i.e. ""1284101485"") in Python, and I'd like to convert it to a readable date. When I use time.strftime, I get a TypeError:

>>>import time
>&...",https://stackoverflow.com/questions/3682748/converting-unix-timestamp-string-to-readable-date,"['I have a string representing a unix timestamp (i.e. ""1284101485"") in Python, and I\'d like to convert it to a readable date. When I use time.strftime, I get a TypeError:', 'Use datetime module:', 'Taken from http://seehuhn.de/pages/pdate', 'The most voted answer suggests using fromtimestamp which is error prone since it uses the local timezone. To avoid issues a better approach is to use UTC:', 'There are two parts:', 'For a human readable timestamp from a UNIX timestamp, I have used this in scripts before:', 'In Python 3.6+:', 'You can convert the current time like this', 'Other than using time/datetime package, pandas can also be used to solve the same problem.Here is how we can use pandas to convert timestamp to readable date:', 'Get the readable date from timestamp with time also, also you can change the format of the date.', 'Another way that this can be done using gmtime and format function;', 'i just successfully used:', 'quick and dirty one liner:', 'You can use easy_date to make it easy:']"
207,Python's equivalent of && (logical-and) in an if-statement,"Here's my code:

def front_back(a, b):
  # +++your code here+++
  if len(a) % 2 == 0 && len(b) % 2 == 0:
    return a[:(len(a)/2)] + b[:(len(b)/2)] + a[(len(a)/2):] + b[(len(b)/2):] 
  else:
  ...",https://stackoverflow.com/questions/2485466/pythons-equivalent-of-logical-and-in-an-if-statement,"[""Here's my code:"", 'You would want and instead of &&.', 'Python uses and and or conditionals.', ""I'm getting an error in the IF conditional. What am I doing wrong?"", 'Two comments:', 'I went with a purlely mathematical solution:', 'You use and and or to perform logical operations like in C, C++. Like literally and is && and or is ||.', 'Probably this is not best code for this task, but is working -', 'maybe with & instead % is more fast and mantain readibility', 'Use of ""and"" in conditional. I often use this when importing in Jupyter Notebook:', ""A single & (not double &&) is enough or as the top answer suggests you can use 'and'.\nI also found this in pandas""]"
208,How to return dictionary keys as a list in Python?,"In Python 2.7, I could get dictionary keys, values, or items as a list:

>>> newdict = {1:0, 2:0, 3:0}
>>> newdict.keys()
[1, 2, 3]
Now, in Python >= 3.3, I get something like this:
...",https://stackoverflow.com/questions/16819222/how-to-return-dictionary-keys-as-a-list-in-python,"['In Python 2.7, I could get dictionary keys, values, or items as a list:', 'Try list(newdict.keys()).', 'Python >= 3.5 alternative: unpack into a list literal [*newdict]', ""list(newdict) works in both Python 2 and Python 3, providing a simple list of the keys in newdict. keys() isn't necessary. (:"", 'A bit off on the ""duck typing"" definition -- dict.keys() returns an iterable object, not a list-like object. It will work anywhere an iterable will work -- not any place a list will. a list is also an iterable, but an iterable is NOT a list (or sequence...)', 'You can also use a list comprehension:', 'Converting to a list without using the keys method makes it more readable:', ""If you need to store the keys separately, here's a solution that requires less typing than every other solution presented thus far, using Extended Iterable Unpacking (python3.x+)."", 'I can think of 2 ways in which we can extract the keys from the dictionary.']"
209,Get unique values from a list in python [duplicate],"I want to get the unique values from the following list:

['nowplaying', 'PBS', 'PBS', 'nowplaying', 'job', 'debate', 'thenandnow']
The output which I require is:

['nowplaying', 'PBS', 'job', '...",https://stackoverflow.com/questions/12897374/get-unique-values-from-a-list-in-python,"['I want to get the unique values from the following list:', 'First declare your list properly, separated by commas. You can get the unique values by converting the list to a set.', 'To be consistent with the type I would use:', 'If we need to keep the elements order, how about this:', 'A Python list:', 'What type is your output variable?', 'Maintaining order:', 'Options to remove duplicates may include the following generic data structures:', 'Getting unique elements from List', 'If you are using numpy in your code (which might be a good choice for larger amounts of data), check out numpy.unique:', ""set - unordered collection of unique elements. List of elements can be passed to set's constructor. So, pass list with duplicate elements, we get set with unique elements and transform it back to list then get list with unique elements. I can say nothing about performance and memory overhead, but I hope, it's not so important with small lists."", 'Same order unique list using only a list compression.', 'By using basic property of Python Dictionary:', 'First thing, the example you gave is not a valid list.', 'As a bonus, Counter is a simple way to get both the unique values and the count for each value:', 'set can help you filter out the elements from the list that are duplicates. It will work well for str, int or tuple elements, but if your list contains dict or other list elements, then you will end up with TypeError exceptions.', 'To get unique values from your list use code below:', 'I am surprised that nobody so far has given a direct order-preserving answer:', 'In addition to the previous answers, which say you can convert your list to set, you can do that in this way too', ""If you want to get unique elements from a list and keep their original order, then you may employ OrderedDict data structure from Python's standard library:"", 'You can use sets. Just to be clear, I am explaining what is the difference between a list and a set. \nsets are unordered collection of unique elements.Lists are ordered collection of elements.\nSo,', 'My solution to check contents for uniqueness but preserve the original order:', 'use set to de-duplicate a list, return as list', 'Set is a collection of un-ordered and unique elements. So, you can use set as below to get a unique list:', ""I know this is an old question, but here's my unique solution: class inheritance!:"", 'For long arrays', ""Try this function, it's similar to your code but it's a dynamic range."", 'Use the following function:']"
210,error: Unable to find vcvarsall.bat,"I tried to install the Python package dulwich:
pip install dulwich
But I get a cryptic error message:

error: Unable to find vcvarsall.bat
The same happens if I try installing the package manually:
...",https://stackoverflow.com/questions/2817869/error-unable-to-find-vcvarsall-bat,"['I tried to install the Python package dulwich:', 'Update: Comments point out that the instructions here may be dangerous. Consider using the Visual C++ 2008 Express edition or the purpose-built Microsoft Visual C++ Compiler for Python (details) and NOT using the original answer below. Original error message means the required version of Visual C++ is not installed.', ""I found the solution. \nI had the exact same problem, and error, installing 'amara'. I had mingw32 installed, but distutils needed to be configured."", 'You can install compiled version from http://www.lfd.uci.edu/~gohlke/pythonlibs/', 'Run python.exe to display which version of VC++ it was compiled with (example shown below).', 'What\'s going on? Python modules can be part written in C or C++ (typically for speed). If you try to install such a package with Pip (or setup.py), it has to compile that C/C++ from source. Out the box, Pip will brazenly assume you the compiler Microsoft Visual C++ installed. If you don\'t have it, you\'ll see this cryptic error message ""Error: Unable to find vcvarsall.bat"".', ""You'll need to install a Microsoft compiler, compatible with the compiler used to build Python. This means you need Visual C++ 2008 (or newer, with some tweaking)."", ""I just had this same problem, so I'll tell my story here hoping it helps someone else with the same issues and save them the couple of hours I just spent:"", 'Looks like its looking for VC compilers, so you could try to mention compiler type with -c mingw32, since you have msys', 'I have python 2.73 and windows 7 .The solution that worked for me was:', 'Look in the setup.py file of the package you are trying to install. If it is an older package it may be importing distutils.core.setup() rather than setuptools.setup().', 'Maybe somebody can be interested, the following worked for me for the py2exe package.\n(I have windows 7 64 bit and portable python 2.7, Visual Studio 2005 Express with Windows SDK for Windows 7 and .NET Framework 4)', 'I spent almost 2 days figuring out how to fix this problem in my python 3.4 64 bit version: Python 3.4.3 (v3.4.3:9b73f1c3e601, Feb 24 2015, 22:44:40) [MSC v.1600 64 bit (AMD64)] on win32', 'I wanted to run pysph on Windows 10 under Python 2.7 and got vcvarsall.bat was not found (from distutils)', 'I encountered this issue when I tried to install numpy library on my python 3.5. The solution is to install VS2015. I had VS2008, 2012, 2013, none of which is compatible with python 3.5. Apparently newer version of python has dependency on newer versions of VS.', 'I tried all the above answers, and found all of them not to work, this was perhaps I was using Windows 8 and had installed Visual Studio 2012. In this case, this is what you do.', 'You can download the free Visual C++ 2008 Express Edition from http://go.microsoft.com/?linkid=7729279, which will set the VS90COMNTOOLS environment variable during installation and therefore build with a compatible compiler.', ""I had this problem using Python 3.4.1 on Windows 7 x64, and unfortunately the packages I needed didn't have suitable exe or wheels that I could use. This system requires a few 'workarounds', which are detailed below (and TLDR at bottom)."", 'Below steps fixed this issue for me, I was trying to create setup with cython extension.', ""Use this link to download and install Visual C++ 2015 Build Tools. It will automatically download visualcppbuildtools_full.exe and install Visual C++ 14.0 without actually installing Visual Studio. After the installation completes, retry pip install and you won't get the error again."", 'I tried many solutions but only one worked for me, the install of Microsoft Visual Studio 2008 Express C++.', 'If you have mingw installed', 'Is Microsoft Visual C++ Compiler for Python 2.7 at http://www.microsoft.com/en-us/download/details.aspx?id=44266 not a solution?', 'The easiest way to solve this in 2016 is to install Chocolatey and then the  vcpython27 package. Open Powershell:', 'calling import setuptools will monkey patch distutils to force compatibility with Visual Studio. Calling vcvars32.bat manually will setup the virtual environment and prevent other common errors the compiler will throw. For VS 2017 the file is located at', ""I don't know if it is too late, but I found Microsoft Visual C++ Compiler for Python 2.7 which reads"", 'I got the same problem and have solved it at the moment.', ""If you're looking to install pyodbc on a Windows box that doesn't have Visual Studio installed another option is to manually install pyodbc using the binary distribution."", 'With Python 3.4, the dependency is on Visual Studio 2010. Installing Visual C++ 2010 Express fixed the problem for me.', 'You can use easy_install instead of pip it works for me.', 'The answer given by @monkey is one of the correct ones, but it is incomplete.']"
211,pip install mysql-python fails with EnvironmentError: mysql_config not found,"This is the error I get

(mysite)zjm1126@zjm1126-G41MT-S2:~/zjm_test/mysite$ pip install mysql-python
Downloading/unpacking mysql-python
  Downloading MySQL-python-1.2.3.tar.gz (70Kb): 70Kb downloaded
...",https://stackoverflow.com/questions/5178292/pip-install-mysql-python-fails-with-environmenterror-mysql-config-not-found,"['This is the error I get', 'It seems mysql_config is missing on your system or the installer could not find it.\nBe sure mysql_config is really installed.', 'In Mac OS, I simply ran this in terminal to fix:', 'Seemed to do the trick.', 'There maybe various answers for the above issue, below is a aggregated solution.', 'If you are on MAC\nInstall this globally', 'You can use the MySQL Connector/Python', 'For centos users:', 'I was trying to install mysql-python on an Amazon EC2 Linux instance and I had to install these :', 'For anyone that is using MariaDB instead of MySQL, the solution is to install the libmariadbclient-dev package and create a symbolic link to the config file with the correct name.', 'Try sudo apt-get build-dep python-mysqldb', 'Due to changes within osx mavericks & xcode development tools you may get the error on installation', 'this works for me', 'for mariadb install libmariadbclient-dev instead of libmysqlclient-dev', 'You should install the mysql first:', 'I had the same problem in the Terraform:light container. It is based on Alpine.', 'sometimes the error depends on the actual cause. we had a case where mysql-python was installed through the python-mysqldb debian package.', 'Sequence to be followed.', ""Had a similar issue trying to install on OS X Server 10.6.8. Here's what I had to do.\nUsing:"", 'Your sudo path does not know about your local path... go into superuser mode, add the path, and install it from there.', 'if you install MySQL-python in your virtual env, you should check the pip version, if the version is older than 9.0.1, please update it', 'on MacOS Mojave, mysql_config is found at /usr/local/bin/ rather than /usr/local/mysql/bin as pointed above, so no need to add anything to path.']"
212,How to make IPython notebook matplotlib plot inline,"I am trying to use IPython notebook on MacOS X with Python 2.7.2 and IPython 1.1.0.

I cannot get matplotlib graphics to show up inline.

import matplotlib
import numpy as np
import matplotlib.pyplot ...",https://stackoverflow.com/questions/19410042/how-to-make-ipython-notebook-matplotlib-plot-inline,"['I am trying to use IPython notebook on MacOS X with Python 2.7.2 and IPython 1.1.0.', 'I used %matplotlib inline in the first cell of the notebook and it works. I think you should try:', 'If your matplotlib version is above 1.4, it is also possible to use', 'Ctrl + Enter', 'Use the %pylab inline magic command.', 'To make matplotlib inline by default in Jupyter (IPython 3):', ""I have to agree with foobarbecue (I don't have enough recs to be able to simply insert a comment under his post):"", 'I found a workaround that is quite satisfactory.  I installed Anaconda Python and this now works out of the box for me.', 'I did the anaconda install but matplotlib is not plotting', 'I had the same problem when I was running the plotting commands in separate cells in Jupyter:', ""You can simulate this problem with a syntax mistake, however, %matplotlib inline won't resolve the issue.""]"
213,Remove all whitespace in a string,"I want to eliminate all the whitespace from a string, on both ends, and in between words.

I have this Python code:

def my_handle(self):
    sentence = ' hello  apple  '
    sentence.strip()
But ...",https://stackoverflow.com/questions/8270092/remove-all-whitespace-in-a-string,"['I want to eliminate all the whitespace from a string, on both ends, and in between words.', 'If you want to remove leading and ending spaces, use str.strip():', 'To remove only spaces use str.replace:', 'An alternative is to use regular expressions and match these strange white-space characters too. Here are some examples:', '""Whitespace"" includes space, tabs, and CRLF. So an elegant and one-liner string function we can use is str.translate:', 'For removing whitespace from beginning and end, use strip.', 'MaK already pointed out the ""translate"" method above. And this variation works with Python 3 (see this Q&A).', 'Be careful:', 'In addition, strip has some variations:', 'eliminate all the whitespace from a string, on both ends, and in between words.', 'try this.. instead of using re i think using split with strip is much better']"
214,Emulate a do-while loop in Python?,"I need to emulate a do-while loop in a Python program. Unfortunately, the following straightforward code does not work:

list_of_ints = [ 1, 2, 3 ]
iterator = list_of_ints.__iter__()
element = None

...",https://stackoverflow.com/questions/743164/emulate-a-do-while-loop-in-python,"['I need to emulate a do-while loop in a Python program. Unfortunately, the following straightforward code does not work:', 'I am not sure what you are trying to do. You can implement a do-while loop like this:', ""Here's a very simple way to emulate a do-while loop:"", 'My code below might be a useful implementation, highlighting the main difference between do-while vs while as I understand it.', '->', 'Exception will break the loop, so you might as well handle it outside the loop.', 'Here is a crazier solution of a different pattern -- using coroutines. The code is still very similar, but with one important difference; there are no exit conditions at all! The coroutine (chain of coroutines really) just stops when you stop feeding it with data.', ""The way I've done this is as follows..."", 'for a do - while loop containing try statements', 'Quick hack:', 'Python 3.8 has the answer.', ""Why don't you just do"", 'See if this helps :', ""If you're in a scenario where you are looping while a resource is unavaliable or something similar that throws an exception, you could use something like"", 'For me a typical while loop will be something like this:', 'The built-in iter function does specifically that:']"
215,Why does Python code run faster in a function?,"def main():
    for i in xrange(10**8):
        pass
main()
This piece of code in Python runs in  (Note: The timing is done with the time function in BASH in Linux.)

real    0m1.841s
user    0m1....",https://stackoverflow.com/questions/11241523/why-does-python-code-run-faster-in-a-function,"['This piece of code in Python runs in  (Note: The timing is done with the time function in BASH in Linux.)', 'You might ask why it is faster to store local variables than globals. This is a CPython implementation detail.', 'Inside a function, the bytecode is:', 'Aside from local/global variable store times, opcode prediction makes the function faster.']"
216,How to drop rows of Pandas DataFrame whose value in a certain column is NaN,"I have this DataFrame and want only the records whose EPS column is not NaN:

>>> df
                 STK_ID  EPS  cash
STK_ID RPT_Date                   
601166 20111231  601166  NaN   NaN
...",https://stackoverflow.com/questions/13413590/how-to-drop-rows-of-pandas-dataframe-whose-value-in-a-certain-column-is-nan,"['I have this DataFrame and want only the records whose EPS column is not NaN:', ""Don't drop, just take the rows where EPS is not NA:"", 'This question is already resolved, but...', 'I know this has already been answered, but just for the sake of a purely pandas solution to this specific question as opposed to the general description from Aman (which was wonderful) and in case anyone else happens upon this:', 'You can use this:', 'Simplest of all solutions:', 'You could use dataframe method notnull or inverse of isnull, or numpy.isnan:', 'Simple and easy way', 'yet another solution which uses the fact that np.nan != np.nan:', ""This is an old question which has been beaten to death but I do believe there is some more useful information to be surfaced on this thread. Read on if you're looking for the answer to any of the following questions:"", 'Another version:', ""In datasets having large number of columns its even better to see how many columns contain null values and how many don't."", ""It  may be added at that '&' can be used to add additional conditions e.g.""]"
217,Multiprocessing vs Threading Python [duplicate],"I am trying to understand the advantages of multiprocessing over threading. I know that multiprocessing gets around the Global Interpreter Lock, but what other advantages are there, and can threading ...",https://stackoverflow.com/questions/3044580/multiprocessing-vs-threading-python,"['I am trying to understand the advantages of multiprocessing over threading. I know that multiprocessing gets around the Global Interpreter Lock, but what other advantages are there, and can threading not do the same thing?', 'The threading module uses threads, the multiprocessing module uses processes. The difference is that threads run in the same memory space, while processes have separate memory. This makes it a bit harder to share objects between processes with multiprocessing. Since threads use the same memory, precautions have to be taken or two threads will write to the same memory at the same time. This is what the global interpreter lock is for.', 'Here are some pros/cons I came up with.', ""Threading's job is to enable applications to be responsive. Suppose you have a database connection and you need to respond to user input. Without threading, if the database connection is busy the application will not be able to respond to the user. By splitting off the database connection into a separate thread you can make the application more responsive. Also because both threads are in the same process, they can access the same data structures - good performance, plus a flexible software design."", 'Python documentation quotes', ""The key advantage is isolation. A crashing process won't bring down other processes, whereas a crashing thread will probably wreak havoc with other threads."", 'Another thing not mentioned is that it depends on what OS you are using where speed is concerned. In Windows processes are costly so threads would be better in windows but in unix processes are faster than their windows variants so using processes in unix is much safer plus quick to spawn.', 'As mentioned in the question, Multiprocessing in Python is the only real way to achieve true parallelism. Multithreading cannot achieve this because the GIL prevents threads from running in parallel.', 'Other answers have focused more on the multithreading vs multiprocessing aspect, but in python Global Interpreter Lock (GIL) has to be taken into account. When more number (say k) of threads are created, generally they will not increase the performance by  k  times, as it will still be running as a single threaded application. GIL is a global lock which locks everything out and allows only single thread execution  utilizing only a single core. The performance does increase in places where C extensions like numpy, Network, I/O are being used, where a lot of background work is done and GIL is released.  So when threading is used, there is only a single operating system level thread while python creates pseudo-threads which are completely managed by threading itself but are essentially running as a single process. Preemption takes place between these pseudo threads. If the CPU runs at maximum capacity, you may want to switch to multiprocessing.\nNow in case of self-contained instances of execution, you can instead opt for pool. But in case of overlapping data, where you may want processes communicating you should use multiprocessing.Process.', 'MULTIPROCESSING', ""Threads share the same memory space to guarantee that two threads don't share the same memory location so special precautions must be taken the CPython interpreter handles this using a mechanism called GIL, or the Global Interpreter Lock"", 'Process may have multiple threads. These threads may share memory and are the units of execution within a process.', 'As I learnd in university most of the answers above are right. In PRACTISE on different platforms (always using python) spawning multiple threads ends up like spawning one process. The difference is the multiple cores share the load instead of only 1 core processing everything at 100%. So if you spawn for example 10 threads on a 4 core pc, you will end up getting only the 25% of the cpus power!! And if u spawn 10 processes u will end up with the cpu processing at 100% (if u dont have other limitations). Im not a expert in all the new technologies. Im answering with own real experience background']"
218,Behaviour of increment and decrement operators in Python,"I notice that a pre-increment/decrement operator can be applied on a variable (like ++count). It compiles, but it does not actually change the value of the variable!

What is the behavior of the pre-...",https://stackoverflow.com/questions/1485841/behaviour-of-increment-and-decrement-operators-in-python,"['I notice that a pre-increment/decrement operator can be applied on a variable (like ++count). It compiles, but it does not actually change the value of the variable!', ""++ is not an operator. It is two + operators. The + operator is the identity operator, which does nothing. (Clarification: the + and - unary operators only work on numbers, but I presume that you wouldn't expect a hypothetical ++ operator to work on strings.)"", 'When you want to increment or decrement, you typically want to do that on an integer. Like so:', ""While the others answers are correct in so far as they show what a mere + usually does (namely, leave the number as it is, if it is one), they are incomplete in so far as they don't explain what happens."", 'Python does not have these operators, but if you really need them you can write a function having the same functionality.', 'In Python, a distinction between expressions and statements is rigidly\n  enforced, in contrast to languages such as Common Lisp, Scheme, or\n  Ruby.', 'Python does not have unary increment/decrement operators (--/++). Instead, to increment a value, use', ""Yeah, I missed ++ and -- functionality as well. A few million lines of c code engrained that kind of thinking in my old head, and rather than fight it... Here's a class I cobbled up that implements:"", 'In python 3.8+ you can do :', 'There are no post/pre increment/decrement operators in python like in languages like C.']"
219,How to print the full traceback without halting the program?,"I'm writing a program that parses 10 websites, locates data files, saves the files, and then parses them to make data that can be readily used in the NumPy library. There are tons of errors this file ...",https://stackoverflow.com/questions/3702675/how-to-print-the-full-traceback-without-halting-the-program,"[""I'm writing a program that parses 10 websites, locates data files, saves the files, and then parses them to make data that can be readily used in the NumPy library. There are tons of errors this file encounters through bad links, poorly formed XML, missing entries, and other things I've yet to categorize. I initially made this program to handle errors like this:"", 'Some other answer have already pointed out the traceback module.', ""traceback.format_exc() or sys.exc_info() will yield more info if that's what you want."", ""If you're debugging and just want to see the current stack trace, you can simply call:"", ""When you don't want to halt your program on an error, you need to handle that error with a try/except:"", ""First, don't use prints for logging, there is astable, proven and well-thought out stdlib module to do that: logging. You definitely should use it instead."", ""In addition to @Aaron Hall's answer, if you are logging, but don't want to use logging.exception() (since it logs at the ERROR level), you can use a lower level and pass exc_info=True. e.g."", ""I don't see this mentioned in any of the other answers. If you're passing around an Exception object for whatever reason..."", 'To get the precise stack trace, as a string, that would have been raised if no try/except were there to step over it, simply place this in the except block that catches the offending exception.', 'A remark about this answer\'s comments: print(traceback.format_exc()) does a better job for me than traceback.print_exc(). With the latter, the hello is sometimes strangely ""mixed"" with the traceback text, like if both want to write to stdout or stderr at the same time, producing weird output (at least when building from inside a text editor and viewing the output in the ""Build results"" panel).', 'You will need to put the try/except inside the most innerloop where the error may occur, i.e.', 'Get the full traceback as a string from the exception object with traceback.format_exception', 'You want the traceback module. It will let you print stack dumps like Python normally does. In particular, the print_last function will print the last exception and a stack trace.', 'If you have an Error object already, and you want to print the whole thing, you need to make this slightly awkward call:', 'This is my solution to write the error in a log file and also on console:', 'python 3 solution']"
220,mkdir -p functionality in Python [duplicate],"Is there a way to get functionality similar to mkdir -p on the shell from within Python.  I am looking for a solution other than a system call.  I am sure the code is less than 20 lines, and I am ...",https://stackoverflow.com/questions/600268/mkdir-p-functionality-in-python,"['Is there a way to get functionality similar to mkdir -p on the shell from within Python.  I am looking for a solution other than a system call.  I am sure the code is less than 20 lines, and I am wondering if someone has already written it?', 'For Python ≥ 3.5, use pathlib.Path.mkdir:', ""In Python >=3.2, that's"", 'This is easier than trapping the exception:', 'Recently, I found this distutils.dir_util.mkpath:', 'mkdir -p gives you an error if the file already exists:', 'With Pathlib from python3 standard library:', ""As mentioned in the other solutions, we want to be able to hit the file system once while mimicking the behaviour of mkdir -p.  I don't think that this is possible to do, but we should get as close as possible."", ""I think Asa's answer is essentially correct, but you could extend it a little to act more like mkdir -p, either:"", 'Function declaration;', ""I've had success with the following personally, but my function should probably be called something like 'ensure this directory exists':"", ""based on @Dave C's answer but with a bug fixed where part of the tree already exists""]"
221,Python integer incrementing with ++ [duplicate],"I've always laughed to myself when I've looked back at my VB6 days and thought, ""What modern language doesn't allow incrementing with double plus signs?"":

number++
To my surprise, I can't find ...",https://stackoverflow.com/questions/2632677/python-integer-incrementing-with,"['I\'ve always laughed to myself when I\'ve looked back at my VB6 days and thought, ""What modern language doesn\'t allow incrementing with double plus signs?"":', ""Python doesn't support ++, but you can do:"", ""Simply put, the ++ and -- operators don't exist in Python because they wouldn't be operators, they would have to be statements. All namespace modification in Python is a statement, for simplicity and consistency. That's one of the design decisions. And because integers are immutable, the only way to 'change' a variable is by reassigning it."", 'You can do:', ""Yes. The ++ operator is not available in Python. Guido doesn't like these operators."", 'The main reason ++ comes in handy in C-like languages is for keeping track of indices. In Python, you deal with data in an abstract way and seldom increment through indices and such. The closest-in-spirit thing to ++ is the next method of iterators.', ""Take a look at Behaviour of increment and decrement operators in Python for an explanation of why this doesn't work."", 'Here there is an explanation:\nhttp://bytes.com/topic/python/answers/444733-why-there-no-post-pre-increment-operator-python']"
222,How do you test that a Python function throws an exception?,How does one write a unittest that fails only if a function doesn't throw an expected exception?,https://stackoverflow.com/questions/129507/how-do-you-test-that-a-python-function-throws-an-exception,"[""How does one write a unittest that fails only if a function doesn't throw an expected exception?"", 'Use TestCase.assertRaises (or TestCase.failUnlessRaises) from the unittest module, for example:', 'Since Python 2.7 you can use context manager to get ahold of the actual Exception object thrown:', 'The code in my previous answer can be simplified to:', 'How do you test that a Python function throws an exception?', 'Your code should follow this pattern (this is a unittest module style test):', 'from: http://www.lengrand.fr/2011/12/pythonunittest-assertraises-raises-error/', 'You can build your own contextmanager to check if the exception was raised.', ""As I haven't seen any detailed explanation on how to check if we got a specific exception among a list of accepted one using context manager, or other exception details I will add mine (checked on python 3.8)."", 'I use doctest[1] almost everywhere because I like the fact that I document and test my functions at the same time.', 'I just discovered that the Mock library provides an assertRaisesWithMessage() method (in its unittest.TestCase subclass), which will check not only that the expected exception is raised, but also that it is raised with the expected message:', 'There are a lot of answers here. The code shows how we can create an Exception, how we can use that exception in our methods, and finally, how you can verify in a unit test, the correct exceptions being raised.', 'You can use assertRaises from the unittest module', 'You can use context manager to run the faulty function and assert it raises the exception with a certain message using assertRaisesMessage', 'While all the answers are perfectly fine, I was looking for a way to test if a function raised an exception without relying on unit testing frameworks and having to write test classes.']"
223,How do I unload (reload) a Python module?,"I have a long-running Python server and would like to be able to upgrade a service without restarting the server. What's the best way do do this?

if foo.py has changed:
    unimport foo  <-- How ...",https://stackoverflow.com/questions/437589/how-do-i-unload-reload-a-python-module,"[""I have a long-running Python server and would like to be able to upgrade a service without restarting the server. What's the best way do do this?"", 'You can reload a module when it has already been imported by using the reload builtin function (Python 3.4+ only):', 'In Python 3.0–3.3 you would use: imp.reload(module)', 'It can be especially difficult to delete a module if it is not pure Python.', ""reload(module), but only if it's completely stand-alone. If anything else has a reference to the module (or any object belonging to the module), then you'll get subtle and curious errors caused by the old code hanging around longer than you expected, and things like isinstance not working across different versions of the same code."", 'For Python 2 use built-in function reload():', 'The following code allows you Python 2/3 compatibility:', ""The accepted answer doesn't handle the from X import Y case. This code handles it and the standard import case as well:"", 'This is the modern way of reloading a module:', ""If you are not in a server, but developing and need to frequently reload a module, here's a nice tip."", 'For those like me who want to unload all modules (when running in the Python interpreter under Emacs):', 'Enthought Traits has a module that works fairly well for this. https://traits.readthedocs.org/en/4.3.0/_modules/traits/util/refresh.html', 'Those who are using python 3 and reload from importlib.', ""Other option. See that Python default importlib.reload will just reimport the library passed as an argument. It won't reload the libraries that your lib import. If you changed a lot of files and have a somewhat complex package to import, you must do a deep reload."", '2018-02-01', 'The solution from before is good for just getting the reset information, but it will not change all the references (more than reload but less then required). To actually set all the references as well, I had to go into the garbage collector, and rewrite the references there. Now it works like a charm!', 'for me for case of Abaqus it is the way it works.\nImagine your file is Class_VerticesEdges.py', ""Removing modules from sys.modules requires 'None' types to be deleted as well."", 'Another way could be to import the module in a function. This way when the function completes the module gets garbage collected.', 'I got a lot of trouble trying to reload something inside Sublime Text, but finally I could wrote this utility to reload modules on Sublime Text based on the code sublime_plugin.py uses to reload modules.']"
224,How to convert list to string [duplicate],How can I convert a list to a string using Python?,https://stackoverflow.com/questions/5618878/how-to-convert-list-to-string,"['How can I convert a list to a string using Python?', ""By using ''.join""]"
225,What __init__ and self do in Python?,"I'm learning the Python programming language and I've came across something I don't fully understand. 

In a method like:

def method(self, blah):
    def __init__(?):
        ....
    ....
What does ...",https://stackoverflow.com/questions/625083/what-init-and-self-do-in-python,"[""I'm learning the Python programming language and I've came across something I don't fully understand."", 'In this code:', 'Yep, you are right, these are oop constructs.', ""In the hope it might help a little, here's a simple example I used to understand the difference between a variable declared inside a class, and a variable declared inside an __init__ function:"", 'In short:', '__init__ does act like a constructor. You\'ll need to pass ""self"" to any class functions as the first argument if you want them to behave as non-static methods. ""self"" are instance variables for your class.', 'Attribute references use the standard syntax used for all attribute references in Python: obj.name. Valid attribute names are all the names that were in the class’s namespace when the class object was created. So, if the class definition looked like this:', 'Try out this code. Hope it helps many C programmers like me to Learn Py.', 'Had trouble undestanding this myself. Even after reading the answers here.', ""note that self could actually be any valid python identifier.  For example, we could just as easily write, from Chris B's example:"", ""Basically, you need to use the 'self' keyword when using a variable in multiple functions within the same class. As for init, it's used to setup default values incase no other functions from within that class are called."", ""The 'self' is a reference to the class instance"", 'What does self do? What is it meant to be? Is it mandatory?', 'Just a demo for the question.', 'In this code:', 'What does self do? What is it meant to be? Is it mandatory?', 'Here, the guy has written pretty well and simple: https://www.jeffknupp.com/blog/2014/06/18/improve-your-python-python-classes-and-object-oriented-programming/']"
226,How can I check file size in Python?,"I am writing a Python script in Windows. I want to do something based on the file size. For example, if the size is greater than 0, I will send an email to somebody, otherwise continue to other things....",https://stackoverflow.com/questions/2104080/how-can-i-check-file-size-in-python,"['I am writing a Python script in Windows. I want to do something based on the file size. For example, if the size is greater than 0, I will send an email to somebody, otherwise continue to other things.', 'You need the st_size property of the object returned by os.stat. You can get it by either using pathlib (Python 3.4+):', 'Using os.path.getsize:', 'The other answers work for real files, but if you need something that works for ""file-like objects"", try this:', 'Result:', 'Using pathlib (added in Python 3.4 or a backport available on PyPI):', 'There is a bitshift trick I use if I want to to convert from bytes to any other unit. If you do a right shift by 10 you basically shift it by an order (multiple).', 'Strictly sticking to the question, the Python code (+ pseudo-code) would be:', 'You can check a file size by using', 'You can use the stat() method from the os module. You can provide it with a path in the form of a string, bytes or even a PathLike object. It works with file descriptors as well.', 'we have two options Both include importing os module']"
227,Relative imports in Python 3,"I want to import a function from another file in the same directory.

Sometimes it works for me with from .mymodule import myfunction but sometimes I get a:

SystemError: Parent module '' not loaded, ...",https://stackoverflow.com/questions/16981921/relative-imports-in-python-3,"['I want to import a function from another file in the same directory.', 'unfortunately, this module needs to be inside the package, and it also\n  needs to be runnable as a script, sometimes. Any idea how I could\n  achieve that?', 'From PEP 328', ""Put this inside your package's __init__.py file:"", 'I ran into this issue.  A hack workaround is importing via an if/else block like follows:', ""Hopefully, this will be of value to someone out there - I went through half a dozen stackoverflow posts trying to figure out relative imports similar to whats posted above here. I set up everything as suggested but I was still hitting ModuleNotFoundError: No module named 'my_module_name'"", 'I needed to run python3 from the main project directory to make it work.', 'For PyCharm users:', 'To obviate this problem, I devised a solution with the repackage package, which has worked for me for some time. It adds the upper directory to the lib path:', 'if both packages are in your import path (sys.path), and the module/class you want is in example/example.py, then to access the class without relative import try:', 'I was getting this ImportError: attempted relative import with no known parent package', 'I think the best solution is to create a package for your module:\nHere is more info on how to do it.', 'If none of the above worked for you, you can specify the module explicitly.', ""I had a similar problem: I needed a Linux service and cgi plugin which use common constants to cooperate. The 'natural' way to do this is to place them in the init.py of the package, but I cannot start the cgi plugin with the -m parameter."", 'Moving the file from which you are importing to an outside directory helps.\nThis is extra useful when your main file makes any other files in its own directory.\nEx:\nBefore:\nProject\n|---dir1\n|-------main.py\n|-------module1.py\nAfter:\nProject\n|---module1.py\n|---dir1\n|-------main.py']"
228,Convert a String representation of a Dictionary to a dictionary?,"How can I convert the str representation of a dict, such as the following string, into a dict?

s = ""{'muffin' : 'lolz', 'foo' : 'kitty'}""
I prefer not to use eval. What else can I use?

The main ...",https://stackoverflow.com/questions/988228/convert-a-string-representation-of-a-dictionary-to-a-dictionary,"['How can I convert the str representation of a dict, such as the following string, into a dict?', 'Starting in Python 2.6 you can use the built-in ast.literal_eval:', 'https://docs.python.org/3.8/library/json.html', 'using json.loads:', ""To OP's example:"", ""If the string can always be trusted, you could use eval (or use literal_eval as suggested; it's safe no matter what the string is.) Otherwise you need a parser. A JSON parser (such as simplejson) would work if he only ever stores content that fits with the JSON scheme."", 'Use json. the ast library consumes a lot of memory and and slower. I have a process that needs to read a text file of 156Mb. Ast with 5 minutes delay for the conversion dictionary json and 1 minutes using 60% less memory!', 'To summarize:', 'no any libs are used:']"
229,How to remove the first Item from a list?,"I have the list [0, 1, 2, 3, 4] I'd like to make it into [1, 2, 3, 4]. How do I go about this?",https://stackoverflow.com/questions/4426663/how-to-remove-the-first-item-from-a-list,"[""I have the list [0, 1, 2, 3, 4] I'd like to make it into [1, 2, 3, 4]. How do I go about this?"", 'Python List', 'Slicing:', 'More on this here.', 'you would just do this', 'With list slicing, see the Python tutorial about lists for more details:', 'Then just delete it:', 'You can use list.reverse() to reverse the list, then list.pop() to remove the last element, for example:', 'You can also use list.remove(a[0]) to pop out the first element in the list.', 'If you are working with numpy you need to use the delete method:', 'There is a datastructure called  ""deque"" or double ended queue which is faster and efficient than a list. You can use your list and convert it to deque and do the required transformations in it. You can also convert the deque back to list.']"
230,python setup.py uninstall,"I have installed a python package with python setup.py install.

How do I uninstall it?",https://stackoverflow.com/questions/1550226/python-setup-py-uninstall,"['I have installed a python package with python setup.py install.', 'Note: Avoid using python setup.py install use pip install .', 'For me, the following mostly works:', 'The #1 answer has problems:', 'First record the files you have installed. You can repeat this command, even if you have previously run setup.py install:', ""Now python gives you the choice to install pip during the installation (I am on Windows, and at least python does so for Windows!). Considering you had chosen to install pip during installation of python (you don't actually have to choose because it is default), pip is already installed for you. Then, type in pip in command prompt, you should see a help come up. You can find necessary usage instructions there. E.g. pip list shows you the list of installed packages. You can use"", 'Not exactly answering the question, but something that helps me every day:', ""The lazy way: simply uninstall from the Windows installation menu (if you're using Windows), or from the rpm command, provided you first re-install it after creating a distribution package."", 'Go to your python package directory and remove your .egg file,\ne.g.:\nIn python 2.5(ubuntu): /usr/lib/python2.5/site-packages/', 'Probably you can do this as an alternative :-', 'I think you can open the setup.py, locate the package name, and then ask pip to uninstall it.', ""Extending on what Martin said, recording the install output and a little bash scripting does the trick quite nicely.  Here's what I do..."", 'If you still have files that are supposed to be deleted after re-installing a package, make sure the folder build is also deleted. Therefore, assuming that pkg is the package you want to delete:', 'At {virtualenv}/lib/python2.7/site-packages/ (if not using virtualenv then {system_dir}/lib/python2.7/dist-packages/)', 'I had run ""python setup.py install"" at some point in the past accidentally in my global environment, and had much difficulty uninstalling. These solutions didn\'t help. ""pip uninstall "" didn\'t work with ""Can\'t uninstall \'splunk-appinspect\'. No files were found to uninstall."" ""sudo pip uninstall "" didn\'t work ""Cannot uninstall requirement splunk-appinspect, not installed"". I tried uninstalling pip, deleting the pip cache, searching my hard drive for the package, etc...', 'It might be better to remove related files by using bash to read commands, like the following:', 'I had run python setup.py install once in my PyCharm, it installs all the packages into my conda base environment. Later when I want to remove all these packages, pip uninstall does not work. I had to delete them from /anaconda3/lib/python3.7/site-packages manually :(']"
231,Maximum and Minimum values for ints,"I am looking for minimum and maximum values for integers in python. For eg., in Java, we have Integer.MIN_VALUE and Integer.MAX_VALUE. Is there something like this in python?",https://stackoverflow.com/questions/7604966/maximum-and-minimum-values-for-ints,"['I am looking for minimum and maximum values for integers in python. For eg., in Java, we have Integer.MIN_VALUE and Integer.MAX_VALUE. Is there something like this in python?', ""In Python 3, this question doesn't apply. The plain int type is unbounded."", ""If you just need a number that's bigger than all others, you can use"", 'The sys.maxint constant has been removed from Python 3.0 onward, instead use sys.maxsize.', 'In Python integers will automatically switch from a fixed-size int representation into a variable width long representation once you pass the value sys.maxint, which is either 231 - 1 or 263 - 1 depending on your platform. Notice the L that gets appended here:', 'For Python 3, it is', ""You may use 'inf' like this:"", 'If you want the max for array or list indices (equivalent to size_t in C/C++), you can use numpy:', 'I rely heavily on commands like this.', 'sys.maxsize is not the actually the maximum integer value which is supported. You can double maxsize and multiply it by itself and it stays a valid and correct value.']"
232,How to print an exception in Python?,"try:
    something here
except:
    print('the whatever error occurred.')
How can I print the error/exception in my except: block?",https://stackoverflow.com/questions/1483429/how-to-print-an-exception-in-python,"['How can I print the error/exception in my except: block?', 'For Python 2.6 and later and Python 3.x:', 'The traceback module provides methods for formatting and printing exceptions and their tracebacks, e.g. this would print exception like the default handler does:', ""In Python 2.6 or greater it's a bit cleaner:"", 'In case you want to pass error strings, here is an example from Errors and Exceptions (Python 2.6)', ""(I was going to leave this as a comment on @jldupont's answer, but I don't have enough reputation.)"", 'Instead of using the basic print() function, the more flexible logging module can be used to log the exception. The logging module offers a lot extra functionality, e.g. logging messages into a given log file, logging messages with timestamps and additional information about where the logging happened. (For more information check out the official documentation.)', 'One has pretty much control on which information from the traceback to be displayed/logged when catching exceptions.', ""One liner error raising can be done with assert statements if that's what you want to do. This will help you write statically fixable code and check errors early.""]"
233,How to subtract a day from a date?,I have a Python datetime.datetime object. What is the best way to subtract one day?,https://stackoverflow.com/questions/441147/how-to-subtract-a-day-from-a-date,"['I have a Python datetime.datetime object. What is the best way to subtract one day?', 'You can use a timedelta object:', 'Subtract datetime.timedelta(days=1)', 'If your Python datetime object is timezone-aware than you should be careful to avoid errors around DST transitions (or changes in UTC offset for other reasons):', 'Just to Elaborate an alternate method and a Use case for which it is helpful:', 'Also just another nice function i like to use when i want to compute i.e. first/last day of the last month or other relative timedeltas etc. ...', 'Genial arrow module exists']"
234,Get the data received in a Flask request,"I want to be able to get the data sent to my Flask app. I've tried accessing request.data but it is an empty string. How do you access request data?

from flask import request

@app.route('/', methods=...",https://stackoverflow.com/questions/10434599/get-the-data-received-in-a-flask-request,"[""I want to be able to get the data sent to my Flask app. I've tried accessing request.data but it is an empty string. How do you access request data?"", ""The docs describe the attributes available on the request.  In most common cases request.data will be empty because it's used as a fallback:"", ""To get the raw data, use request.data. This only works if it couldn't be parsed as form data, otherwise it will be empty and request.form will have the parsed data."", 'For URL query parameters, use request.args.', ""Here's an example of parsing posted JSON data and echoing it back."", 'If you post JSON with content type application/json, use request.get_json() to get it in Flask. If the content type is not correct, None is returned. If the data is not JSON, an error is raised.', 'To get the raw post body regardless of the content type, use request.get_data(). If you use request.data, it calls request.get_data(parse_form_data=True), which will populate the request.form MultiDict and leave data empty.', 'To get request.form as a normal dictionary , use request.form.to_dict(flat=False).', 'To get JSON posted without the application/json content type, use request.get_json(force=True).', 'Use request.get_json() to get posted JSON data.', 'The raw data is passed in to the Flask application from the WSGI server as request.stream. The length of the stream is in the Content-Length header.', 'To parse JSON, use request.get_json().', 'To post JSON with jQuery in JavaScript, use JSON.stringify to dump the data, and set the content type to application/json.', 'Here\'s an example of posting form data to add a user to a database. Check request.method == ""POST"" to check if the form was submitted. Use keys from request.form to get the form data. Render an HTML template with a <form> otherwise. The fields in the form should have name attributes that match the keys in request.form.', ""If the body is recognized as form data, it will be in request.form. If it's JSON, it will be in request.get_json(). Otherwise the raw data will be in request.data. If you're not sure how data will be submitted, you can use an or chain to get the first one with data."", 'If the content type is recognized as form data, request.data will parse that into request.form and return an empty string.', ""When posting form data with an HTML form, be sure the input tags have name attributes, otherwise they won't be present in request.form."", 'My problem was similar. I got a payload POST request when a user clicked a button from my slackbot. The Content-Type was application/x-www-form-urlencoded. I used Flask, Python3.', 'This is great to use but remember that it comes in as a string and will need iterated through.']"
235,Converting from a string to boolean in Python?,"Does anyone know how to do convert from a string to a boolean in Python? I found this link. But it doesn't look like a proper way to do it.  I.e. using built-in functionality, etc.

The reason I'm ...",https://stackoverflow.com/questions/715417/converting-from-a-string-to-boolean-in-python,"[""Does anyone know how to do convert from a string to a boolean in Python? I found this link. But it doesn't look like a proper way to do it.  I.e. using built-in functionality, etc."", 'Really, you just compare the string to whatever you expect to accept as representing true, so you can do this:', 'Use:', 'Then call it like so:', 'The JSON parser is also useful for in general converting strings to reasonable python types.', 'Starting with Python 2.6, there is now ast.literal_eval:', 'If you know the string will be either ""True"" or ""False"", you could just use eval(s).', 'This version keeps the semantics of constructors like int(value) and provides an easy way to define acceptable string values.', ""Here's is my version. It checks against both positive and negative values lists, raising an exception for unknown values. And it does not receive a string, but any type should do."", 'UPDATE', 'you could always do something like', ""I don't agree with any solution here, as they are too permissive. This is not normally what you want when parsing a string."", 'A cool, simple trick (based on what @Alan Marchiori posted), but using yaml:', 'A dict (really, a defaultdict) gives you a pretty easy way to do this trick:', 'You probably already have a solution but for others who are looking for a method to convert a value to a boolean value using ""standard"" false values including None, [], {}, and """" in addition to false, no , and 0.', 'Yet another option', 'I use', 'The usual rule for casting to a bool is that a few special literals (False, 0, 0.0, (), [], {}) are false and then everything else is true, so I recommend the following:', ""To use 'eval' for parsing is a bad habit because arbitrary code can be executed. In some situations it may represent a security problem."", 'This is the version I wrote. Combines several of the other solutions into one.', 'If you know that your input will be either ""True"" or ""False"" then why not use:', ""I like to use the ternary operator for this, since it's a bit more succinct for something that feels like it shouldn't be more than 1 line."", ""I realize this is an old post, but some of the solutions require quite a bit of code, here's what I ended up using:"", 'If you like me just need boolean from variable which is string. You can use distils as mentioned earlier by @jzwiener. However I could not import and use the module as he suggested.', 'Use package str2bool pip install str2bool', 'here\'s a hairy, built in way to get many of the same answers.  Note that although python considers """" to be false and all other strings to be true, TCL has a very different idea about things.', 'idea: check if you want the string to be evaluated to False; otherwise bool() returns True for any non-empty string.', ""Here's something I threw together to evaluate the truthiness of a string:"", 'I just had to do this... so maybe late to the party - but someone may find it useful', ""If you have control over the entity that's returning true/false, one option is to have it return 1/0 instead of true/false, then:"", 'By using Python\'s built-in eval() function and the .capitalize() method, you can convert any ""true""  / ""false"" string (regardless of initial capitalization) to a true Python boolean.']"
236,Usage of __slots__?,"What is the purpose of __slots__ in Python — especially with respect to when I would want to use it, and when not?",https://stackoverflow.com/questions/472000/usage-of-slots,"['What is the purpose of __slots__ in Python — especially with respect to when I would want to use it, and when not?', 'The special attribute __slots__ allows you to explicitly state which instance attributes you expect your object instances to have, with the expected results:', 'Quoting Jacob Hallen:', 'You would want to use __slots__ if you are going to instantiate a lot (hundreds, thousands) of objects of the same class. __slots__ only exists as a memory optimization tool.', ""Each python object has a __dict__ atttribute which is a dictionary containing all other attributes. e.g. when you type self.attr python is actually doing self.__dict__['attr']. As you can imagine using a dictionary to store attribute takes some extra space & time for accessing it."", 'In addition to the other answers, here is an example of using __slots__:', 'Slots are very useful for library calls to eliminate the ""named method dispatch"" when making function calls.  This is mentioned in the SWIG documentation.  For high performance libraries that want to reduce function overhead for commonly called functions using slots is much faster.', 'An attribute of a class instance has 3 properties: the instance, the name of the attribute, and the value of the attribute.', 'A very simple example of __slot__ attribute.', 'Another somewhat obscure use of __slots__ is to add attributes to an object proxy from the ProxyTypes package, formerly part of the PEAK project. Its ObjectWrapper allows you to proxy another object, but intercept all interactions with the proxied object. It is not very commonly used (and no Python 3 support), but we have used it to implement a thread-safe blocking wrapper around an async implementation based on tornado that bounces all access to the proxied object through the ioloop, using thread-safe concurrent.Future objects to synchronise and return results.', 'You have — essentially — no use for __slots__.', 'The original question was about general use cases not only about memory.\nSo it should be mentioned here that you also get better performance when instantiating large amounts of objects - interesting e.g. when parsing large documents into objects or from a database.']"
237,How to overcome “datetime.datetime not JSON serializable”?,"I have a basic dict as follows:

sample = {}
sample['title'] = ""String""
sample['somedate'] = somedatetimehere
When I try to do jsonify(sample) I get:

TypeError: datetime.datetime(2012, 8, 8, 21, 46, ...",https://stackoverflow.com/questions/11875770/how-to-overcome-datetime-datetime-not-json-serializable,"['I have a basic dict as follows:', 'The original answer accommodated the way MongoDB ""date"" fields were represented as:', 'My quick & dirty JSON dump that eats dates and everything:', 'Building on other answers, a simple solution based on a specific serializer that just converts datetime.datetime and datetime.date objects to strings.', 'I have just encountered this problem and my solution is to subclass json.JSONEncoder:', 'Convert the date to a string', 'For others who do not need or want to use the pymongo library for this.. you can achieve datetime JSON conversion easily with this small snippet:', 'Here is my solution:', 'if you are using python3.7, then the best solution is using\ndatetime.isoformat() and\ndatetime.fromisoformat(); they work with both naive and\naware datetime objects:', 'I have an application with a similar issue; my approach was to JSONize the datetime value as a 6-item list (year, month, day, hour, minutes, seconds); you could go to microseconds as a 7-item list, but I had no need to:', 'The json.dumps method can accept an optional parameter called default which is expected to be a function. Every time JSON tries to convert a value it does not know how to convert it will call the function we passed to it. The function will receive the object in question, and it is expected to return the JSON representation of the object.', 'My solution (with less verbosity, I think):', 'This Q repeats time and time again - a simple way to patch the json module such that serialization would support datetime.', 'You should use .strftime() method on .datetime.now() method to making it as a serializable method.', 'Here is a simple solution to over come ""datetime not JSON serializable""\nproblem.', 'You have to supply a custom encoder class with the cls parameter of json.dumps. To quote from the docs:', 'The simplest way to do this is to change the part of the dict that is in datetime format to isoformat. That value will effectively be a string in isoformat which json is ok with.', 'Actually it is quite simple.\nIf you need to often serialize dates, then work with them as strings. You can easily convert them back as datetime objects if needed.', 'Try this one with an example to parse it:', 'If you are using the result in a view be sure to return a proper response. According to the API, jsonify does the following:', 'My solution ...', 'Here is my full solution for converting datetime to JSON and back..', 'Convert the date  to  string', 'Generally there are several ways to serialize datetimes, like:', 'I got the same error message while writing the serialize decorator inside a Class  with sqlalchemy. So instead of :', 'A quick fix if you want your own formatting', 'If you are on both sides of the communication you can use repr() and eval() functions along with json.', 'I had encountered same problem when externalizing django model object to dump as JSON.\nHere is how you can solve it.', 'Usage of above utility:', 'This library superjson can do it. And you can easily custom json serializer for your own Python Object by following this instruction https://superjson.readthedocs.io/index.html#extend.', ""I faced this issue today, I found something called pickle. It's a built-in library for serializing python objects and also load it from a pickle file.""]"
238,How to print number with commas as thousands separators?,"I am trying to print an integer in Python 2.6.1 with commas as thousands separators. For example, I want to show the number 1234567 as 1,234,567. How would I go about doing this? I have seen many ...",https://stackoverflow.com/questions/1823058/how-to-print-number-with-commas-as-thousands-separators,"['I am trying to print an integer in Python 2.6.1 with commas as thousands separators. For example, I want to show the number 1234567 as 1,234,567. How would I go about doing this? I have seen many examples on Google, but I am looking for the simplest practical way.', 'Per Format Specification Mini-Language,', 'I got this to work:', ""For inefficiency and unreadability it's hard to beat:"", ""I'm surprised that no one has mentioned that you can do this with f-strings in Python 3.6 as easy as this:"", 'Here is the locale grouping code after removing irrelevant parts and cleaning it up a little:', ""Here's a one-line regex replacement:"", ""This is what I do for floats.  Although, honestly, I'm not sure which versions it works for - I'm using 2.7:"", ""You can also use '{:n}'.format( value ) for a locale representation. I think this is the simpliest way for a locale solution."", 'Slightly expanding the answer of Ian Schneider:', ""I'm sure there must be a standard library function for this, but it was fun to try to write it myself using recursion so here's what I came up with:"", 'From the comments to activestate recipe 498181 I reworked this:', ""The accepted answer is fine, but I actually prefer format(number,','). Easier for me to interpret and remember."", '--', 'from Python version 2.6 you can do this:', 'I am a Python beginner, but an experienced programmer. I have Python 3.5, so I can just use the comma, but this is nonetheless an interesting programming exercise. Consider the case of an unsigned integer. The most readable Python program for adding thousands separators appears to be:', ""Here's one that works for floats too:"", 'One liner for Python 2.5+ and Python 3 (positive int only):', ""I'm using python 2.5 so I don't have access to the built-in formatting."", ""I have found some issues with the dot separator in the previous top voted answers. I have designed a universal solution where you can use whatever you want as a thousand separator without modifying the locale. I know it's not the most elegant solution, but it gets the job done. Feel free to improve it !"", 'This does money along with the commas', 'I have a python 2 and python 3 version of this code. I know that the question was asked for python 2 but now (8 years later lol) people will probably be using python 3. Python 3 Code:', 'this is baked into python per PEP -> https://www.python.org/dev/peps/pep-0378/', 'Here is another variant using a generator function that works for integers:', 'Just subclass long (or float, or whatever). This is highly practical, because this way you can still use your numbers in math ops (and therefore existing code), but they will all print nicely in your terminal.', 'Italy:', 'For floats:']"
239,How to check if type of a variable is string?,"Is there a way to check if the type of a variable in python is a string, like:

isinstance(x,int);
for integer values?",https://stackoverflow.com/questions/4843173/how-to-check-if-type-of-a-variable-is-string,"['Is there a way to check if the type of a variable in python is a string, like:', 'In Python 2.x, you would do', ""I know this is an old topic, but being the first one shown on google and given that I don't find any of the answers satisfactory, I'll leave this here for future reference:"", 'In Python 3.x or Python 2.7.6', 'you can do:', 'The type module also exists if you are checking more than ints and strings. \nhttp://docs.python.org/library/types.html', 'Edit based on better answer below.  Go down about 3 answers and find out about the coolness of basestring.', ""since basestring isn't defined in Python3, this little trick might help to make the code compatible:"", 'Python 2 / 3 including unicode', 'Also I want notice that if you want to check whether the type of a variable is a specific kind, you can compare the type of the variable to the type of a known object.', ""Lots of good suggestions provided by others here, but I don't see a good cross-platform summary.  The following should be a good drop in for any Python program:"", 'So,', 'Alternative way for Python 2, without using basestring:', 'returns True', 'Here is my answer to support both Python 2 and Python 3 along with these requirements:', 'If you do not want to depend on external libs, this works both for Python 2.7+ and Python 3 (http://ideone.com/uB4Kdc):', 'You can simply use the isinstance function to make sure that the input data is of format string or unicode. Below examples will help you to understand easily.', 'This is how I do it:', ""I've seen:""]"
240,How to properly ignore exceptions,"When you just want to do a try-except without handling the exception, how do you do it in Python?

Is the following the right way to do it?

try:
    shutil.rmtree(path)
except:
    pass",https://stackoverflow.com/questions/730764/how-to-properly-ignore-exceptions,"['When you just want to do a try-except without handling the exception, how do you do it in Python?', 'or', ""It's generally considered best-practice to only catch the errors you are interested in. In the case of shutil.rmtree it's probably OSError:"", 'When you just want to do a try catch without handling the exception, how do you do it in Python?', ""First I quote the answer of Jack o'Connor from this thread. The referenced thread got closed so I write here:"", 'For completeness:', 'There are several ways of doing this.', ""FYI the else clause can go after all exceptions and will only be run if the code in the try doesn't cause an exception."", 'When you just want to do a try catch without handling the exception,\n  how do you do it in Python?', 'I needed to ignore errors in multiple commands and fuckit did the trick', 'In Python, we handle exceptions similar to other language, but the difference is some syntax difference, for example,', 'I usually just do:']"
241,What is the naming convention in Python for variable and function names?,"Coming from a C# background the naming convention for variables and method names are usually either camelCase or PascalCase:

// C# example
string thisIsMyVariable = ""a""
public void ThisIsMyMethod()
...",https://stackoverflow.com/questions/159720/what-is-the-naming-convention-in-python-for-variable-and-function-names,"['Coming from a C# background the naming convention for variables and method names are usually either camelCase or PascalCase:', 'See Python PEP 8: Function and Variable Names:', 'The Google Python Style Guide has the following convention:', 'David Goodger (in ""Code Like a Pythonista"" here)  describes the PEP 8 recommendations as follows:', 'As the Style Guide for Python Code admits,', ""There is PEP 8, as other answers show, but PEP 8 is only the styleguide for the standard library, and it's only taken as gospel therein. One of the most frequent deviations of PEP 8 for other pieces of code is the variable naming, specifically for methods. There is no single predominate style, although considering the volume of code that uses mixedCase, if one were to make a strict census one would probably end up with a version of PEP 8 with mixedCase. There is little other deviation from PEP 8 that is quite as common."", 'As mentioned, PEP 8 says to use lower_case_with_underscores for variables, methods and functions.', ""further to what @JohnTESlade has answered. Google's python style guide has some pretty neat recommendations,"", ""Most python people prefer underscores, but even I am using python since more than 5 years right now, I still do not like them. They just look ugly to me, but maybe that's all the Java in my head."", ""Personally I try to use CamelCase for classes, mixedCase methods and functions. Variables are usually underscore separated (when I can remember). This way I can tell at a glance what exactly I'm calling, rather than everything looking the same."", 'There is a paper about this: http://www.cs.kent.edu/~jmaletic/papers/ICPC2010-CamelCaseUnderScoreClouds.pdf', ""The coding style is usually part of an organization's internal policy/convention standards, but I think in general, the all_lower_case_underscore_separator style (also called snake_case) is most common in python."", ""I personally use Java's naming conventions when developing in other programming languages as it is consistent and easy to follow. That way I am not continuously struggling over what conventions to use which shouldn't be the hardest part of my project!"", ""Typically, one follow the conventions used in the language's standard library.""]"
242,How do you remove duplicates from a list whilst preserving order?,"Is there a built-in that removes duplicates from list in Python, whilst preserving order? I know that I can use a set to remove duplicates, but that destroys the original order. I also know that I can ...",https://stackoverflow.com/questions/480214/how-do-you-remove-duplicates-from-a-list-whilst-preserving-order,"['Is there a built-in that removes duplicates from list in Python, whilst preserving order? I know that I can use a set to remove duplicates, but that destroys the original order. I also know that I can roll my own like this:', 'Here you have some alternatives: http://www.peterbe.com/plog/uniqifiers-benchmark', 'Edit 2016', 'In Python 2.7, the new way of removing duplicates from an iterable while keeping it in the original order is:', ""unique → ['1', '2', '3', '6', '4', '5']"", 'Not to kick a dead horse (this question is very old and already has lots of good answers), but here is a solution using pandas that is quite fast in many circumstances and is dead simple to use.', 'In Python 3.7 and above, dictionaries are guaranteed to remember their key insertion order. The answer to this question summarizes the current state of affairs.', ""The list doesn't even have to be sorted, the sufficient condition is that equal values are grouped together."", 'I think if you wanna maintain the order,', 'Just to add another (very performant) implementation of such a functionality from an external module1: iteration_utilities.unique_everseen:', 'For another very late answer to another very old question:', ""For no hashable types (e.g. list of lists), based on MizardX's:"", '5 x faster reduce variant but more sophisticated', 'here is a simple way to do it:', ""Borrowing the recursive idea used in definining Haskell's nub function for lists, this would be a recursive approach:"", ""You can reference a list comprehension as it is being built by the symbol '_[1]'. For example, the following function unique-ifies a list of elements without changing their order by referencing its list comprehension."", ""MizardX's answer gives a good collection of multiple approaches."", 'pandas users should check out pandas.unique.', 'You could do a sort of ugly list comprehension hack.', 'Relatively effective approach with _sorted_ a numpy arrays:', 'A generator expression that uses the O(1) look up of a set to determine whether or not to include an element in the new list.', 'A simple recursive solution:', 'Eliminating the duplicate values in a sequence, but preserve the order of the remaining items. Use of general purpose generator function.', 'If you need one liner then maybe this would help:', 'If you routinely use pandas, and aesthetics is preferred over performance, then consider the built-in function pandas.Series.drop_duplicates:', 'this will preserve order and run in O(n) time. basically the idea is to create a hole wherever there is a duplicate found and sink it down to the bottom. makes use of a read and write pointer. whenever a duplicate is found only the read pointer advances and write pointer stays on the duplicate entry to overwrite it.', 'A solution without using imported modules or sets:', 'This method is quadratic, because we have a linear lookup into the list for every element of the list (to that we have to add the cost of rearranging the list because of the del s).', ""zmk's approach uses list comprehension which is very fast, yet keeps the order naturally. For applying to case sensitive strings it can be easily modified. This also preserves the original case."", 'One liner list comprehension:', 'Credit to @wjandrea for dict.fromdict method idea:']"
243,Shuffling a list of objects,"I have a list of objects and I want to shuffle them. I thought I could use the random.shuffle method, but this seems to fail when the list is of objects. Is there a method for shuffling objects or ...",https://stackoverflow.com/questions/976882/shuffling-a-list-of-objects,"['I have a list of objects and I want to shuffle them. I thought I could use the random.shuffle method, but this seems to fail when the list is of objects. Is there a method for shuffling objects or another way around this?', ""random.shuffle should work.  Here's an example, where the objects are lists:"", 'As you learned the in-place shuffling was the problem. I also have problem frequently, and often seem to forget how to copy a list, too. Using sample(a, len(a)) is the solution, using len(a) as the sample size. See https://docs.python.org/3.6/library/random.html#random.sample for the Python documentation.', 'It took me some time to get that too. But the documentation for shuffle is very clear:', 'If you happen to be using numpy already (very popular for scientific and financial applications) you can save yourself an import.', 'It works fine for me.  Make sure to set the random method.', 'If you have multiple lists, you might want to define the permutation (the way you shuffle the list / rearrange the items in the list) first and then apply it to all lists:', 'This alternative may be useful for some applications where you want to swap the ordering function.', 'In some cases when using numpy arrays, using random.shuffle created duplicate data in the array.', 'For one-liners, userandom.sample(list_to_be_shuffled, length_of_the_list) with an example:', ""'print func(foo)' will print the return value of 'func' when called with 'foo'.\n'shuffle' however has None as its return type, as the list will be modified in place, hence it prints nothing.\nWorkaround:"", 'One can define a function called shuffled (in the same sense of sort vs sorted)', 'shuffle  is in place, so do not print result, which is None, but the list.', 'You can go for this:', 'you could build a function that takes a list as a parameter and returns a shuffled version of the list:', 'you can either use shuffle or sample . both of which come from random module.', 'Make sure you are not naming your source file random.py, and that there is not a file in your working directory called random.pyc..  either could cause your program to try and import your local random.py file instead of pythons random module.', 'The shuffling process is ""with replacement"", so the occurrence of each item may change! At least when when items in your list is also list.', 'Plan: Write out the shuffle without relying on a library to do the heavy lifting. Example: Go through the list from the beginning starting with element 0; find a new random position for it, say 6, put 0’s value in 6 and 6’s value in 0. Move on to element 1 and repeat this process, and so on through the rest of the list', 'It works fine. I am trying it here with functions as list objects:']"
244,Is there any way to kill a Thread?,Is it possible to terminate a running thread without setting/checking any flags/semaphores/etc.?,https://stackoverflow.com/questions/323972/is-there-any-way-to-kill-a-thread,"['Is it possible to terminate a running thread without setting/checking any flags/semaphores/etc.?', 'It is generally a bad pattern to kill a thread abruptly, in Python and in any language. Think of the following cases:', 'There is no official API to do that, no.', 'A multiprocessing.Process can p.terminate()', 'If you are trying to terminate the whole program you can set the thread as a ""daemon"". see\nThread.daemon', 'As others have mentioned, the norm is to set a stop flag. For something lightweight (no subclassing of Thread, no global variable), a lambda callback is an option. (Note the parentheses in if stop().)', 'This is based on thread2 -- killable threads (Python recipe)', 'You should never forcibly kill a thread without cooperating with it.', 'In Python, you simply cannot kill a Thread directly.', 'You can kill a thread by installing trace into the thread that will exit the thread.   See attached link for one possible implementation.', ""If you are explicitly calling time.sleep() as part of your thread (say polling some external service), an improvement upon Phillipe's method is to use the timeout in the event's wait() method wherever you sleep()"", 'It is better if you don\'t kill a thread.\nA way could be to introduce a ""try"" block into the thread\'s cycle and to throw an exception when you want to stop the thread (for example a break/return/... that stops your for/while/...). \nI\'ve used this on my app and it works...', ""I'm way late to this game, but I've been wrestling with a similar question and the following appears to both resolve the issue perfectly for me AND lets me do some basic thread state checking and cleanup when the daemonized sub-thread exits:"", 'It is definitely possible to implement a Thread.stop method as shown in the following example code:', 't is your Thread object.', 'Following workaround can be used to kill a thread:', 'One thing I want to add is that if you read official documentation in threading lib Python, it\'s recommended to avoid use of ""demonic"" threads, when you don\'t want threads end abruptly, with the flag that Paolo Rovelli mentioned.', 'There is a library built for this purpose, stopit. Although some of the same cautions listed herein still apply, at least this library presents a regular, repeatable technique for achieving the stated goal.', ""While it's rather old, this might be a handy solution for some:"", 'This seems to work with pywin32 on windows 7', 'Pieter Hintjens -- one of the founders of the ØMQ-project -- says, using ØMQ and avoiding synchronization primitives like locks, mutexes, events etc., is the sanest and securest way to write multi-threaded programs:', 'Asuming, that you want to have multiple threads of the same function, this is IMHO the easiest implementation to stop one by id:', ""Just to build up on @SCB's idea (which was exactly what I needed) to create a KillableThread  subclass with a customized function:"", ""As mentioned in @Kozyarchuk's answer, installing trace works. Since this answer contained no code, here is a working ready-to-use example:"", 'If you really need the ability to kill a sub-task, use an alternate implementation. multiprocessing and gevent both support indiscriminately killing a ""thread"".', 'You can execute your command in a process and then kill it using the process id.\nI needed to sync between two thread one of which  doesn’t return by itself.', 'Start the sub thread with setDaemon(True).', 'This is a bad answer, see the comments']"
245,Using Python 3 in virtualenv,"Using virtualenv, I run my projects with the default version of Python (2.7). On one project, I need to use Python 3.4. 

I used brew install python3 to install it on my Mac. Now, how do I create a ...",https://stackoverflow.com/questions/23842713/using-python-3-in-virtualenv,"['Using virtualenv, I run my projects with the default version of Python (2.7). On one project, I need to use Python 3.4.', 'simply run', 'Python 3 has a built-in support for virtual environments - venv. It might be better to use that instead. Referring to the docs:', ""I'v tried pyenv and it's very handy for switching python versions (global, local in folder or in the virtualenv):"", 'Install prerequisites.', 'worked for me.', ""You can specify specific Version of Python while creating environment.\nIt's mentioned in virtualenv.py"", ""I had the same ERROR message. tbrisker's solution did not work in my case. Instead this solved the issue:"", 'This is all you need, in order to run a virtual environment in python / python3', 'In addition to the other answers, I recommend checking what instance of virtualenv you are executing:', 'Python now comes with its own implementation of virtual environment, by the name of ""venv"". I would suggest using that, instead of virtualenv.', 'In python3.6 I tried \npython3 -m venv myenv, \nas per the documentation, but it was taking so long. So the very simple and quick command is \npython -m venv yourenv\nIt worked for me on python3.6.', 'On Mac I had to do the following to get it to work.', 'If you install python3 (brew install python3) along with virtualenv burrito, you can then do  mkvirtualenv -p $(which python3) env_name', 'virtualenv --python=/usr/local/bin/python3 <VIRTUAL ENV NAME>\nthis will add python3\n path for your virtual enviroment.', 'The below simple commands can create a virtual env with version 3.5', 'It worked for me', 'For those having troubles while working with Anaconda3 (Python 3).', ""I tried all the above stuff, it still didn't work. So as a brute force, I just re-installed the anaconda, re-installed the virtualenv... and it worked."", 'I wanted to keep python 2.7.5 as default version on Centos 7 but have python 3.6.1 in a virtual environment running alongside other virtual environments in python 2.x', 'On Windows command line, the following worked for me. First find out where your python executables are located:', 'For those of you who are using pipenv and want to install specific version:', 'I got the same error due to it being a conflict with miniconda3 install so when you type ""which virtualenv"" and if you\'ve installed miniconda and it\'s pointing to that install you can either remove it (if your like me and haven\'t moved to it yet) or change your environment variable to point to the install you want.']"
246,How to get a function name as a string?,"In Python, how do I get a function name as a string, without calling the function?

def my_function():
    pass

print get_function_name_as_string(my_function) # my_function is not in quotes
should ...",https://stackoverflow.com/questions/251464/how-to-get-a-function-name-as-a-string,"['In Python, how do I get a function name as a string, without calling the function?', 'Using __name__ is the preferred method as it applies uniformly. Unlike func_name, it works on built-in functions as well:', ""To get the current function's or method's name from inside it, consider:"", 'There are also other fun properties of functions. Type dir(func_name) to list them. func_name.func_code.co_code is the compiled function, stored as a string.', ""This function will return the caller's function name."", ""If you're interested in class methods too, Python 3.3+ has __qualname__ in addition to __name__."", 'I  like using a function decorator.\nI added a class, which also times the function time. Assume gLog is a standard python logger:', 'where', ""As an extension of @Demyn's answer, I created some utility functions which print the current function's name and current function's arguments:"", 'sys._getframe() is not guaranteed to be available in all implementations of Python (see ref) ,you can use the traceback module to do the same thing, eg.', 'You just want to get the name of the function here is a simple code for that.\nlet say you have these functions defined', ""I've seen a few answers that utilized decorators, though I felt a few were a bit verbose. Here's something I use for logging function names as well as their respective input and output values. I've adapted it here to just print the info rather than creating a log file and adapted it to apply to the OP specific example."", 'Try']"
247,Convert hex string to int in Python,"How do I convert a hex string to an int in Python? 

I may have it as ""0xffff"" or just ""ffff"".",https://stackoverflow.com/questions/209513/convert-hex-string-to-int-in-python,"['How do I convert a hex string to an int in Python?', ""Without the 0x prefix, you need to specify the base explicitly, otherwise there's no way to tell:"", 'int(hexString, 16) does the trick, and works with and without the 0x prefix:', 'For any given string s:', 'I may have it as ""0xffff"" or just ""ffff"".', ""Adding to Dan's answer above: if you supply the int() function with a hex string, you will have to specify the base as 16 or it will not think you gave it a valid value. Specifying base 16 is unnecessary for hex numbers not contained in strings."", 'The worst way:', 'Or ast.literal_eval (this is safe, unlike eval):', ""The formatter option '%x' % seems to work in assignment statements as well for me. (Assuming Python 3.0 and later)"", 'Handles hex, octal, binary, int, and float', 'If you are using the python interpreter, you can just type 0x(your hex value) and the interpreter will convert it automatically for you.', ""In Python 2.7, int('deadbeef',10) doesn't seem to work."", ""with '0x' prefix, you might also use eval function""]"
248,Relative imports for the billionth time,"I've been here:

http://www.python.org/dev/peps/pep-0328/
http://docs.python.org/2/tutorial/modules.html#packages
Python packages: relative imports
python relative import example code does not work
...",https://stackoverflow.com/questions/14132789/relative-imports-for-the-billionth-time,"[""I've been here:"", 'Script vs. Module', 'This is really a problem within python. The origin of confusion is that people mistakenly takes the relative import as path relative which is not.', ""Here's a general recipe, modified to fit as an example, that I am using right now for dealing with Python libraries written as packages, that contain interdependent files, where I want to be able to test parts of them piecemeal.  Let's call this lib.foo and say that it needs access to lib.fileA for functions f1 and f2, and lib.fileB for class Class3."", ""So after carping about this along with many others, I came across a note posted by Dorian B in this article that solved the specific problem I was having where I would develop modules and classes for use with a web service, but I also want to be able to test them as I'm coding, using the debugger facilities in PyCharm. To run tests in a self-contained class, I would include the following at the end of my class file:"", 'Here is one solution that I would not recommend, but might be useful in some situations where modules were simply not generated:', 'I had a similar problem where I didn\'t want to change the Python module search \npath and needed to load a module relatively from a script (in spite of ""scripts can\'t import relative with all"" as BrenBarn explained nicely above).', '__name__ changes depending on whether the code in question is run in the global namespace or as part of an imported module.', ""@BrenBarn's answer says it all, but if you're like me it might take a while to understand.  Here's my case and how @BrenBarn's answer applies to it, perhaps it will help you."", ""Relative imports use a module's name attribute to determine that module's position in the package hierarchy. If the module's name does not contain any package information (e.g. it is set to 'main') then relative imports are resolved as if the module were a top level module, regardless of where the module is actually located on the file system."", 'To make Python not return to me ""Attempted relative import in non-package"".\npackage/']"
249,"What are the differences between the urllib, urllib2, urllib3 and requests module?","In Python, what are the differences between the urllib, urllib2, urllib3 and requests modules? Why are there three? They seem to do the same thing...",https://stackoverflow.com/questions/2018026/what-are-the-differences-between-the-urllib-urllib2-urllib3-and-requests-modul,"['In Python, what are the differences between the urllib, urllib2, urllib3 and requests modules? Why are there three? They seem to do the same thing...', ""I know it's been said already, but I'd highly recommend the requests Python package."", ""urllib2 provides some extra functionality, namely the urlopen() function can allow you to specify headers (normally you'd have had to use httplib in the past, which is far more verbose.) More importantly though, urllib2 provides the Request class, which allows for a more declarative approach to doing a request:"", 'urllib and urllib2 are both Python modules that do URL request related stuff but offer different functionalities.', ""Just to add to the existing answers, I don't see anyone mentioning that python requests is not a native library. If you are ok with adding dependencies, then requests is fine. However, if you are trying to avoid adding dependencies, urllib is a native python library that is already available to you."", 'One considerable difference is about porting Python2 to Python3. urllib2 does not exist for python3 and its methods ported to urllib.\nSo you are using that heavily and want to migrate to Python3 in future, consider using urllib.\nHowever 2to3 tool will automatically do most of the work for you.', 'This is my understanding of what the relations are between the various ""urllibs"":', ""I like the urllib.urlencode function, and it doesn't appear to exist in urllib2."", 'To get the content of a url:', ""You should generally use urllib2, since this makes things a bit easier at times by accepting Request objects and will also raise a URLException on protocol errors. With Google App Engine though, you can't use either. You have to use the URL Fetch API that Google provides in its sandboxed Python environment."", ""A key point that I find missing in the above answers is that urllib returns an object of type <class http.client.HTTPResponse> whereas requests returns <class 'requests.models.Response'>."", 'I think all answers are pretty good. But fewer details about urllib3.urllib3 is a very powerful HTTP client for python.\nFor installing both of the following commands will work,']"
250,Python `if x is not None` or `if not x is None`? [closed],"I've always thought of the if not x is None version to be more clear, but Google's style guide and PEP-8 both use if x is not None. Is there any minor performance difference (I'm assuming not), and is ...",https://stackoverflow.com/questions/2710940/python-if-x-is-not-none-or-if-not-x-is-none,"['Want to improve this question? Add details and clarify the problem by editing this post.', ""There's no performance difference, as they compile to the same bytecode:"", ""Both Google and Python's style guide is the best practice:"", 'Code should be written to be understandable to the programmer first, and the compiler or interpreter second. The ""is not"" construct resembles English more closely than ""not is"".', ""TLDR: The bytecode compiler parses them both to x is not None - so for readability's sake, use if x is not None."", 'The answer is simpler than people are making it.', 'The is not operator is preferred over negating the result of is for stylistic reasons. ""if x is not None:"" reads just like English, but ""if not x is None:"" requires understanding of the operator precedence and does not read like english.', 'Personally, I use', 'if not x is None is more similar to other programming languages, but if x is not None definitely sounds more clear (and is more grammatically correct in English) to me.', 'I would prefer the more readable form x is not y\nthan I would think how to eventually write the code handling precedence of the operators in order to produce much more readable code.']"
251,How to use a decimal range() step value?,"Is there a way to step between 0 and 1 by 0.1? 

I thought I could do it like the following, but it failed:

for i in range(0, 1, 0.1):
    print i
Instead, it says that the step argument cannot be ...",https://stackoverflow.com/questions/477486/how-to-use-a-decimal-range-step-value,"['Is there a way to step between 0 and 1 by 0.1?', ""Rather than using a decimal step directly, it's much safer to express this in terms of how many points you want. Otherwise, floating-point rounding error is likely to give you a wrong result."", ""Python's range() can only do integers, not floating point. In your specific case, you can use a list comprehension instead:"", ""Building on 'xrange([start], stop[, step])', you can define a generator that accepts and produces any type you choose (stick to types supporting + and <):"", 'Increase the magnitude of i for the loop and then reduce it when you need it.', 'NumPy is a bit overkill, I think.', ""scipy has a built in function arange which generalizes Python's range() constructor to satisfy your requirement of float handling."", ""Similar to R's seq function, this one returns a sequence in any order given the correct step value. The last value is equal to the stop value."", ""The range() built-in function returns a sequence of integer values, I'm afraid, so you can't use it to do a decimal step."", 'in Python 2.7x gives you the result of:', ""Here's a solution using itertools:"", 'And if you do this often, you might want to save the generated list r', 'My versions use the original range function to create multiplicative indices for the shift. This allows same syntax to the original range function.\nI have made two versions, one using float, and one using Decimal, because I found that in some cases I wanted to avoid the roundoff drift introduced by the floating point arithmetic.', 'more_itertools is a third-party library that implements a numeric_range tool:', ""This is my solution to get ranges with float steps.\nUsing this function it's not necessary to import numpy, nor install it.\nI'm pretty sure that it could be improved and optimized. Feel free to do it and post it here."", 'For completeness of boutique, a functional solution:', 'Suprised no-one has yet mentioned the recommended solution in the Python 3 docs:', 'You can use this function:', 'Best Solution: no rounding error', 'Add auto-correction for the possibility of an incorrect sign on step:', 'My solution:', 'The trick to avoid round-off problem is to use a separate number to move through the range, that starts and half the step ahead of start.', 'It can be done using Numpy library. arange() function allows steps in float. But, it returns a numpy array which can be converted to list using tolist() for our convenience.', 'My answer is similar to others using map(), without need of NumPy, and without using lambda (though you could).    To get a list of float values from 0.0 to t_max in steps of dt:', 'start and stop are inclusive rather than one or the other (usually stop is excluded) and without imports, and using generators', ""I know I'm late to the party here, but here's a trivial generator solution that's working in 3.6:"", 'Lots of the solutions here still had floating point errors in Python 3.6 and didnt do exactly what I personally needed.', 'To counter the float precision issues, you could use the Decimal module.', 'Here is my solution which works fine with float_range(-1, 0, 0.01) and works without floating point representation errors. It is not very fast, but works fine:', 'I am only a beginner, but I had the same problem, when simulating some calculations. Here is how I attempted to work this out, which seems to be working with decimal steps.']"
252,What is the difference between pip and conda?,"I know pip is a package manager for python packages. However, I saw the installation on IPython's website use conda to install IPython.

Can I use pip to install IPython? Why should I use conda as ...",https://stackoverflow.com/questions/20994716/what-is-the-difference-between-pip-and-conda,"[""I know pip is a package manager for python packages. However, I saw the installation on IPython's website use conda to install IPython."", 'Quoting from the Conda blog:', 'Here is a short rundown:', 'The other answers give a fair description of the details, but I want to highlight some high-level points.', 'Not to confuse you further, \nbut you can also use pip within your conda environment, which validates the general vs. python specific managers comments above.', ""Quote from Conda for Data Science article onto Continuum's website:"", 'Quoting from Conda: Myths and Misconceptions (a comprehensive description):', 'For WINDOWS users', 'pip is a package manager.', 'Can I use pip to install iPython?', 'To answer the original question,\nFor installing packages, PIP and Conda are different ways to accomplish the same thing. Both are standard applications to install packages. The main difference is the source of the package files.', 'pip is for Python only', 'I may have found one further difference of a minor nature. I have my python environments under /usr rather than /home or whatever. In order to install to it, I would have to use sudo install pip. For me, the undesired side effect of sudo install pip was slightly different than what are widely reported elsewhere: after doing so, I had to run python with sudo in order to import any of the sudo-installed packages. I gave up on that and eventually found I could use sudo conda to install packages to an environment under /usr which then imported normally without needing sudo permission for python. I even used sudo conda to fix a broken pip rather than using sudo pip uninstall pip or sudo pip --upgrade install pip.']"
253,What is the purpose and use of **kwargs?,"What are the uses for **kwargs in Python?

I know you can do an objects.filter on a table and pass in a **kwargs argument.  

Can I also do this for specifying time deltas i.e. timedelta(hours = ...",https://stackoverflow.com/questions/1769403/what-is-the-purpose-and-use-of-kwargs,"['What are the uses for **kwargs in Python?', 'You can use **kwargs to let your functions take an arbitrary number of keyword arguments (""kwargs"" means ""keyword arguments""):', '** unpacks dictionaries.', 'kwargs is just a dictionary that is added to the parameters.', 'On the basis that a good sample is sometimes better than a long discourse I will write two functions using all python variable argument passing facilities (both positional and named arguments). You should easily be able to see what it does by yourself:', 'Motif: *args and **kwargs serves as a placeholder for the arguments that need to be passed to a function call', 'So being said that let me explain ""named arguments"" first and then ""arbitrary number of named arguments"" kwargs.', 'As an addition, you can also mix different ways of usage when calling kwargs functions:', ""Here's a simple function that serves to explain the usage:"", 'kwargs are a syntactic sugar to pass name arguments as dictionaries(for func), or dictionaries as named arguments(to func)', 'Here is an example that I hope is helpful:', 'Keyword Arguments are often shortened to kwargs in Python. In computer programming,', 'This is the simple example to understand about python unpacking,', 'In Java, you use constructors to overload classes and allow for multiple input parameters. In python, you can use kwargs to provide similar behavior.']"
254,How to get an absolute file path in Python,"Given a path such as ""mydir/myfile.txt"", how do I find the file's absolute path relative to the current working directory in Python? E.g. on Windows, I might end up with:

""C:/example/cwd/mydir/myfile....",https://stackoverflow.com/questions/51520/how-to-get-an-absolute-file-path-in-python,"['Given a path such as ""mydir/myfile.txt"", how do I find the file\'s absolute path relative to the current working directory in Python? E.g. on Windows, I might end up with:', 'Also works if it is already an absolute path:', 'You could use the new Python 3.4 library pathlib. (You can also get it for Python 2.6 or 2.7 using pip install pathlib.) The authors wrote: ""The aim of this library is to provide a simple hierarchy of classes to handle filesystem paths and the common operations users do over them.""', 'Install a third-party path module (found on PyPI), it wraps all the os.path functions and other related functions into methods on an object that can be used wherever strings are used:', 'Today you can also use the unipath package which was based on path.py: http://sluggo.scrapping.cc/python/unipath/', 'Update for Python 3.4+ pathlib that actually answers the question:', ""Note that expanduser is necessary (on Unix) in case the given expression for the file (or directory) name and location may contain a leading ~/(the tilde refers to the user's home directory), and expandvars takes care of any other environment variables (like $HOME)."", 'This always gets the right filename of the current script, even when it is called from within another script. It is especially useful when using subprocess.', 'if you are on a mac', 'In case someone is using python and linux and looking for full path to file:']"
255,How to use glob() to find files recursively?,"This is what I have:

glob(os.path.join('src','*.c'))
but I want to search the subfolders of src. Something like this would work:

glob(os.path.join('src','*.c'))
glob(os.path.join('src','*','*.c'))
...",https://stackoverflow.com/questions/2186525/how-to-use-glob-to-find-files-recursively,"['This is what I have:', 'pathlib.Path.rglob', 'Similar to other solutions, but using fnmatch.fnmatch instead of glob, since os.walk already listed the filenames:', ""I've modified the glob module to support ** for recursive globbing, e.g:"", 'Starting with Python 3.4, one can use the glob() method of one of the Path classes in the new pathlib module, which supports ** wildcards. For example:', 'fnmatch gives you exactly the same patterns as glob, so this is really an excellent replacement for glob.glob with very close semantics.  An iterative version (e.g. a generator), IOW a replacement for glob.iglob, is a trivial adaptation (just yield the intermediate results as you go, instead of extending a single results list to return at the end).', 'For python >= 3.5 you can use **, recursive=True :', ""You'll want to use os.walk to collect filenames that match your criteria. For example:"", ""Here's a solution with nested list comprehensions, os.walk and simple suffix matching instead of glob:"", 'Consider pathlib.rglob().', 'Recently I had to recover my pictures with the extension .jpg. I ran photorec and recovered 4579 directories 2.2 million files within, having tremendous variety of extensions.With the script below I was able to select 50133 files havin .jpg extension within minutes:', 'based on other answers this is my current working implementation, which retrieves nested xml files in a root directory:', 'Johan and Bruno provide excellent solutions on the minimal requirement as stated. I have just released Formic which implements Ant FileSet and Globs which can handle this and more complicated scenarios. An implementation of your requirement is:', 'For python 3.5 and later', 'Another way to do it using just the glob module. Just seed the rglob method with a starting base directory and a pattern to match and it will return a list of matching file names.', 'Or with a list comprehension:', 'Just made this.. it will print files and directory in hierarchical way', 'That one uses fnmatch or regular expression:', 'In addition to the suggested answers, you can do this with some lazy generation and list comprehension magic:', ""Simplified version of Johan Dahlin's answer, without fnmatch."", 'Here is my solution using list comprehension to search for multiple file extensions recursively in a directory and all subdirectories:', 'This is a working code on Python 2.7. As part of my devops work, I was required to write a script which would move the config files marked with live-appName.properties to appName.properties. There could be other extension files as well like live-appName.xml.', ""In case this may interest anyone, I've profiled the top three proposed methods.\nI have about ~500K files in the globbed folder (in total), and 2K files that match the desired pattern."", 'I modified the top answer in this posting.. and recently created this script which will loop through all files in a given directory (searchdir) and the sub-directories under it... and prints filename, rootdir, modified/creation date, and size.', 'Here is a solution that will match the pattern against the full path and not just the base filename.', 'I needed a solution for python 2.x that works fast on large directories.\nI endet up with this:', 'If the files are on a remote file system or inside an archive, you can use an implementation of the fsspec AbstractFileSystem class.  For example, to list all the files in a zipfile:']"
256,Writing a pandas DataFrame to CSV file,"I have a dataframe in pandas which I would like to write to a CSV file. I am doing this using:

df.to_csv('out.csv')
And getting the error:

UnicodeEncodeError: 'ascii' codec can't encode character u'...",https://stackoverflow.com/questions/16923281/writing-a-pandas-dataframe-to-csv-file,"['I have a dataframe in pandas which I would like to write to a CSV file. I am doing this using:', 'To delimit by a tab you can use the sep argument of to_csv:', 'When you are storing a DataFrame object into a csv file using the to_csv method, you probably wont be needing to store the preceding indices of each row of the DataFrame object.', 'To write a pandas DataFrame to a CSV file, you will need DataFrame.to_csv. This function offers many arguments with reasonable defaults that you will more often than not need to override to suit your specific use case. For example, you might want to use a different separator, change the datetime format, or drop the index when writing. to_csv has arguments you can pass to address these requirements.', ""Something else you can try if you are having issues encoding to 'utf-8' and want to go cell by cell you could try the following."", 'Sometimes you face these problems if you specify UTF-8 encoding also.\nI recommend you to specify encoding while reading file and same encoding while writing to file.\nThis might solve your problem.', 'Example of export in file with full path on Windows and in case your file has headers:', 'it could be not the answer for this case, but as I had the same error-message with .to_csvI tried .toCSV(\'name.csv\') and the error-message was different (""SparseDataFrame\' object has no attribute \'toCSV\'). So the problem was solved by turning dataframe to dense dataframe']"
257,List comprehension vs map,Is there a reason to prefer using map() over list comprehension or vice versa?  Is either of them generally more efficient or considered generally more pythonic than the other?,https://stackoverflow.com/questions/1247486/list-comprehension-vs-map,"['Is there a reason to prefer using map() over list comprehension or vice versa?  Is either of them generally more efficient or considered generally more pythonic than the other?', ""map may be microscopically faster in some cases (when you're NOT making a lambda for the purpose, but using the same function in map and a listcomp). List comprehensions may be faster in other cases and most (not all) pythonistas consider them more direct and clearer."", 'Cases', 'An objective reason why you should prefer them even though they\'re not ""Pythonic"" is this:\nThey require functions/lambdas as arguments, which introduce a new scope.', 'Actually, map and list comprehensions behave quite differently in the Python 3 language. Take a look at the following Python 3 program:', ""If you plan on writing any asynchronous, parallel, or distributed code, you will probably prefer map over a list comprehension -- as most asynchronous, parallel, or distributed packages provide a map function to overload python's map.  Then by passing the appropriate map function to the rest of your code, you may not have to modify your original serial code to have it run in parallel (etc)."", ""I find list comprehensions are generally more expressive of what I'm trying to do than map - they both get it done, but the former saves the mental load of trying to understand what could be a complex lambda expression."", 'Here is one possible case:', 'So since Python 3, map() is an iterator, you need to keep in mind what do you need: an iterator or list object.', ""I ran a quick test comparing three methods for invoking the method of an object. The time difference, in this case, is negligible and is a matter of the function in question (see @Alex Martelli's response). Here, I looked at the following methods:"", 'I tried the code by @alex-martelli but found some discrepancies', 'I consider that the most Pythonic way is to use a list comprehension instead of map and filter. The reason is that list comprehensions are clearer than map and filter.']"
258,Use a list of values to select rows from a pandas dataframe [duplicate],"Lets say I have the following pandas dataframe:

df = DataFrame({'A' : [5,6,3,4], 'B' : [1,2,3, 5]})
df

     A   B
0    5   1
1    6   2
2    3   3
3    4   5
I can subset based on a specific value:
...",https://stackoverflow.com/questions/12096252/use-a-list-of-values-to-select-rows-from-a-pandas-dataframe,"['Lets say I have the following pandas dataframe:', 'You can use isin method:']"
259,Find which version of package is installed with pip,"Using pip, is it possible to figure out which version of a package is currently installed?

I know about pip install XYZ --upgrade but I am wondering if there is anything like pip info XYZ.  If not ...",https://stackoverflow.com/questions/10214827/find-which-version-of-package-is-installed-with-pip,"['Using pip, is it possible to figure out which version of a package is currently installed?', 'As of pip 1.3, there is a pip show command.', 'I just sent a pull request in pip with the enhancement Hugo Tavares said:', 'Pip 1.3 now also has a list command:', 'and with --outdated as an extra argument, you will get the Current and Latest versions of the packages you are using :', 'You can also install yolk and then run yolk -l which also gives some nice output.  Here is what I get for my little virtualenv:', 'You can use the grep command to find out.', 'The easiest way is this:', ""There's also a tool called pip-check which gives you a quick overview of all installed packages and their update status:"", 'On windows, you can issue command such as:', 'To do this using Python code:', 'The python function returning just the package version in a machine-readable format:', 'pip show  works in python 3.7:', 'For Windows you can', 'In question, it is not mentioned which OS user is using (Windows/Linux/Mac)', 'The indentations might not be perfect. The reason I am using a Try- Except block is that few library names will throw errors because of parsing the library names to process the versions. even though packages variable will contain all the libraries install in your environment.']"
260,Import a module from a relative path,"How do I import a Python module given its relative path?

For example, if dirFoo contains Foo.py and dirBar, and dirBar contains Bar.py, how do I import Bar.py into Foo.py?

Here's a visual ...",https://stackoverflow.com/questions/279237/import-a-module-from-a-relative-path,"['How do I import a Python module given its relative path?', 'Assuming that both your directories are real Python packages (do have the __init__.py file inside them), here is a safe solution for inclusion of modules relatively to the location of the script.', 'Be sure that dirBar has the __init__.py file -- this makes a directory into a Python package.', 'You could also add the subdirectory to your Python path so that it imports as a normal script.', 'Just do simple things to import the .py file from a different folder.', 'If you structure your project this way:', 'The easiest method is to use sys.path.append().', 'This is the relevant PEP:', 'The easiest way without any modification to your script is to set PYTHONPATH environment variable. Because sys.path is initialized from these locations:', 'In my opinion the best choice is to put __ init __.py in the folder and call the file with', ""If you are just tinkering around and don't care about deployment issues, you can use a symbolic link (assuming your filesystem supports it) to make the module or package directly visible in the folder of the requesting module."", 'instead of:', ""For this case to import Bar.py into Foo.py, first I'd turn these folders into Python packages like so:"", 'Add an __init__.py file:', 'Relative sys.path example:', 'Well, as you mention, usually you want to have access to a folder with your modules relative to where your main script is run, so you just import them.', 'Simply you can use: from Desktop.filename import something', 'Another solution would be to install the py-require package and then use the following in Foo.py', ""Here's a way to import a file from one level above, using the relative path."", ""I'm not experienced about python, so if there is any wrong in my words, just tell me. If your file hierarchy arranged like this:"", 'This also works, and is much simpler than anything with the sys module:', ""Call me overly cautious, but I like to make mine more portable because it's unsafe to assume that files will always be in the same place on every computer. Personally I have the code look up the file path first. I use Linux so mine would look like this:""]"
261,What is the best project structure for a Python application? [closed],"Imagine that you want to develop a non-trivial end-user desktop (not web) application in Python. What is the best way to structure the project's folder hierarchy?

Desirable features are ease of ...",https://stackoverflow.com/questions/193161/what-is-the-best-project-structure-for-a-python-application,"['Want to improve this question? Update the question so it focuses on one problem only by editing this post.', ""Doesn't too much matter.  Whatever makes you happy will work.  There aren't a lot of silly rules because Python projects can be simple."", ""According to Jean-Paul Calderone's Filesystem structure of a Python project:"", 'This blog post by Jean-Paul Calderone is commonly given as an answer in #python on Freenode.', 'Check out Open Sourcing a Python Project the Right Way.', 'The ""Python Packaging Authority"" has a sampleproject:', ""Try starting the project using the python_boilerplate template. It largely follows the best practices (e.g. those here), but is better suited in case you find yourself willing to split your project into more than one egg at some point (and believe me, with anything but the simplest projects, you will. One common situation is where you have to use a locally-modified version of someone else's library)."", ""In my experience, it's just a matter of iteration.  Put your data and code wherever you think they go.  Chances are, you'll be wrong anyway.  But once you get a better idea of exactly how things are going to shape up, you're in a much better position to make these kinds of guesses."", 'Non-python data is best bundled inside your Python modules using the package_data support in setuptools. One thing I strongly recommend is using namespace packages to create shared namespaces which multiple projects can use -- much like the Java convention of putting packages in com.yourcompany.yourproject (and being able to have a shared com.yourcompany.utils namespace).']"
262,How to define a two-dimensional array?,"I want to define a two-dimensional array without an initialized length like this:

Matrix = [][]
but it does not work...

I've tried the code below, but it is wrong too:

Matrix = [5][5]
Error:

...",https://stackoverflow.com/questions/6667201/how-to-define-a-two-dimensional-array,"['I want to define a two-dimensional array without an initialized length like this:', 'You\'re technically trying to index an uninitialized array. You have to first initialize the outer list with lists before adding items; Python calls this\n""list comprehension"".', 'If you really want a matrix, you might be better off using numpy. Matrix operations in numpy most often use an array type with two dimensions. There are many ways to create a new array; one of the most useful is the zeros function, which takes a shape parameter and returns an array of the given shape, with the values initialized to zero:', 'Here is a shorter notation for initializing a list of lists:', 'If you want to create an empty matrix, the correct syntax is', 'If all you want is a two dimensional container to hold some elements, you could conveniently use a dictionary instead:', 'In Python you will be creating a list of lists.  You do not have to declare the dimensions ahead of time, but you can.  For example:', 'Why such a long code, that too in Python you ask?', 'You should make a list of lists, and the best way is to use nested comprehensions:', 'The accepted answer is good and correct, but it took me a while to understand that I could also use it to create a completely empty array.', 'This is how I usually create 2D arrays in python.', 'Use:', 'A rewrite for easy reading:', 'To declare a matrix of zeros (ones):', ""I'm on my first Python script, and I was a little confused by the square matrix example so I hope the below example will help you save some time:"", 'Using NumPy you can initialize empty matrix like this:', 'I read in comma separated files like this:', 'You can define keys and values in two ways:', 'If you want to be able to think it as a 2D array rather than being forced to think in term of a list of lists (much more natural in my opinion), you can do the following:', 'Use:', 'You can create an empty two dimensional list by nesting two or more square bracing or third bracket ([], separated by comma) with a square bracing, just like below:', ""Be careful about this short expression, see full explanation down in @F.J's answer"", 'by using list :', ""If you don't have size information before start then create two one-dimensional lists."", 'Will be faster than:', 'Here is the code snippet for creating a matrix in python:', 'Try this:', 'In case if you need a matrix with predefined numbers you can use the following code:']"
263,How to change a string into uppercase,"I have problem in changing a string into uppercase with Python. In my research, I got string.ascii_uppercase but it doesn't work.

The following code:

 >>s = 'sdsd'
 >>s.ascii_uppercase
...",https://stackoverflow.com/questions/9257094/how-to-change-a-string-into-uppercase,"[""I have problem in changing a string into uppercase with Python. In my research, I got string.ascii_uppercase but it doesn't work."", 'See String Methods.', 'To get upper case version of a string you can use str.upper:', 'to make the string upper case -- just simply type', 'for making uppercase from lowercase to upper\njust use', 'For questions on simple string manipulation the dir built-in function comes in handy. It gives you, among others, a list of methods of the argument, e.g., dir(s) returns a list containing upper.']"
264,Traverse a list in reverse order in Python,"So I can start from len(collection) and end in collection[0].

I also want to be able to access the loop index.",https://stackoverflow.com/questions/529424/traverse-a-list-in-reverse-order-in-python,"['So I can start from len(collection) and end in collection[0].', 'Use the built-in reversed() function:', 'You can do:', ""If you need the loop index, and don't want to traverse the entire list twice, or use extra memory, I'd write a generator."", 'It can be done like this:', 'The reversed builtin function is handy:', 'How about without recreating a new list, you can do by indexing:', 'OR', 'Also, you could use either ""range"" or ""count"" functions. \nAs follows:', 'An approach with no imports:', 'I like the one-liner generator approach:', 'Use list.reverse() and then iterate as you normally would.', 'An expressive way to achieve reverse(enumerate(collection)) in python 3:', ""for what ever it's worth you can do it like this too. very simple."", ""If you need the index and your list is small, the most readable way is to do reversed(list(enumerate(your_list))) like the accepted answer says. But this creates a copy of your list, so if your list is taking up a large portion of your memory you'll have to subtract the index returned by enumerate(reversed()) from len()-1."", 'the reverse function comes in handy here:', 'You can also use a while loop:', 'You can use a negative index in an ordinary for loop:', ""If you don't mind the index being negative, you can do:"", 'I think the most elegant way is to transform enumerate and reversed using the following generator', 'The other answers are good, but if you want to do as \nList comprehension style', 'To use negative indices: start at -1 and step back by -1 at each iteration.', 'A simple way :', 'i think this one is also simple way to do  it... read from end and keep decrementing till the length of list, since we never execute the ""end"" index hence added -1 also', ""Assuming task is to find last element that satisfies some condition in a list (i.e. first when looking backwards), I'm getting following numbers:"", 'you can use a generator:']"
265,"What is a clean, pythonic way to have multiple constructors in Python?","I can't find a definitive answer for this. As far as I know, you can't have multiple __init__ functions in a Python class. So how do I solve this problem? 

Suppose I have a class called Cheese with ...",https://stackoverflow.com/questions/682504/what-is-a-clean-pythonic-way-to-have-multiple-constructors-in-python,"[""I can't find a definitive answer for this. As far as I know, you can't have multiple __init__ functions in a Python class. So how do I solve this problem?"", 'Actually None is much better for ""magic"" values:', 'Using num_holes=None as the default is fine if you are going to have just __init__.', 'One should definitely prefer the solutions already posted, but since no one mentioned this solution yet, I think it is worth mentioning for completeness.', 'All of these answers are excellent if you want to use optional parameters, but another Pythonic possibility is to use a classmethod to generate a factory-style pseudo-constructor:', 'Why do you think your solution is ""clunky""? Personally I would prefer one constructor with default values over multiple overloaded constructors in situations like yours (Python does not support method overloading anyway):', 'Those are good ideas for your implementation, but if you are presenting a cheese making interface to a user.  They don\'t care how many holes the cheese has or what internals go into making cheese.  The user of your code just wants ""gouda"" or ""parmesean"" right?', ""Use num_holes=None as a default, instead. Then check for whether num_holes is None, and if so, randomize. That's what I generally see, anyway."", 'The best answer is the one above about default arguments, but I had fun writing this, and it certainly does fit the bill for ""multiple constructors"". Use at your own risk.', ""I'd use inheritance. Especially if there are going to be more differences than number of holes. Especially if Gouda will need to have different set of members then Parmesan."", 'This is how I solved it for a YearQuarter class I had to create. I created an __init__ which is very tolerant to a wide variety of input.', 'Since my initial answer was criticised on the basis that my special-purpose constructors did not call the (unique) default constructor, I post here a modified version that honours the wishes that all constructors shall call the default one:', 'This is pretty clean way i guess and tricky']"
266,How to fix “Attempted relative import in non-package” even with __init__.py,"I'm trying to follow PEP 328, with the following directory structure:

pkg/
  __init__.py
  components/
    core.py
    __init__.py
  tests/
    core_test.py
    __init__.py
In core_test.py I have ...",https://stackoverflow.com/questions/11536764/how-to-fix-attempted-relative-import-in-non-package-even-with-init-py,"[""I'm trying to follow PEP 328, with the following directory structure:"", ""Yes. You're not using it as a package."", ""To elaborate on Ignacio Vazquez-Abrams's answer:"", 'You can use import components.core directly if you append the current directory to sys.path:', 'It depends on how you want to launch your script.', 'In core_test.py, do the following:', 'If your use case is for running tests, and it seams that it is, then you can do the following. Instead of running your test script as python core_test.py use a testing framework such as pytest. Then on the command line you can enter', 'My quick-fix is to add the directory to the path:', 'Issue is with your testing method,', 'As Paolo said, we have 2 invocation methods:', ""Old thread. I found out that adding an __all__= ['submodule', ...] to the \n__init__.py file and then using the from <CURRENT_MODULE> import * in the target works fine."", 'You can use from pkg.components.core import GameLoopEvents, for example I use pycharm, the below is my project structure image, I just import from the root package, then it works:', 'This approach worked for me and is less cluttered than some solutions:', 'Try this', ""If someone is looking for a workaround, I stumbled upon one.  Here's a bit of context.  I wanted to test out one of the methods I've in a file.  When I run it from within"", ""Here's one way which will piss off everyone but work pretty well. In tests run:"", ""This is very confusing, and if you are using IDE like pycharm, it's little more confusing.\nWhat worked for me:\n1. Make pycharm project settings (if you are running python from a VE or from python directory)\n2. There is no wrong the way you defined. sometime it works with \n    from folder1.file1 import class"", ""As you have already marked everything as a module, there's no need to use the relative reference if you launch as python module."", 'For me only this worked: I had to explicitly set the value of package to the parent directory, and add the parent directory to sys.path', 'Because your code contains if __name__ == ""__main__"", which doesn\'t be imported as a package, you\'d better use sys.path.append() to solve the problem.']"
267,How can I make a Python script standalone executable to run without ANY dependency?,"I'm building a Python application and don't want to force my clients to install Python and modules.
So, is there a way to compile a Python script to be a standalone executable?",https://stackoverflow.com/questions/5458048/how-can-i-make-a-python-script-standalone-executable-to-run-without-any-dependen,"[""I'm building a Python application and don't want to force my clients to install Python and modules."", 'You can use py2exe as already answered and use Cython to convert your key .py files in .pyc, C compiled files, like .dll in Windows and .so on Linux.', 'You can use PyInstaller to package Python programs as standalone executables. It works on Windows, Linux, and Mac.', 'You might wish to investigate Nuitka. It takes Python source code and converts it in to C++ API calls. Then it compiles into an executable binary (ELF on Linux). It has been around for a few years now and supports a wide range of Python versions.', 'I would like to compile some useful information about creating standalone files on Windows using Python 2.7.', 'Yes, it is possible to compile Python scripts into standalone executables.', 'And a third option is cx_Freeze, which is cross-platform.', ""You may like py2exe. You'll also find information in there for doing it on Linux."", 'I like PyInstaller - especially the ""windowed"" variant:', 'Use py2exe.... use the below set up files:', 'This creates a standalone EXE file on Windows.', 'I also recommend  PyInstaller for better backward compatibility such as Python\xa02.3 - 2.7.', ""For Python 3.2 scripts, the only choice is cx_Freeze. Build it from sources; otherwise it won't work."", ""py2exe will make the EXE file you want, but you need to have the same version of MSVCR90.dll on the machine you're going to use your new EXE file."", 'You can find the list of distribution utilities listed at Distribution Utilities.', 'Not exactly a packaging of the Python code, but there is now also Grumpy from Google, which transpiles the code to Go.', ""Using PyInstaller, I found a better method using shortcut to the .exe rather than making --onefile. Anyway, there are probably some data files around and if you're running a site-based app then your program depends on HTML, JavaScript, and CSS files too. There isn't any point in moving all these files somewhere... Instead what if we move the working path up?"", 'Use Cython to convert to C, compile, and link with GCC.', ""I'm told that PyRun is also an option."", 'Since it seems to be missing from the current list of answers, I think it is worth mentioning that the standard library includes a zipapp module that can be used for this purpose. Its basic usage is just compressing a bunch of Python files into a zip file with extension .pyz than can be directly executed as python myapp.pyz, but you can also make a self-contained package from a requirements.txt file:']"
268,About catching ANY exception,How can I write a try/except block that catches all exceptions?,https://stackoverflow.com/questions/4990718/about-catching-any-exception,"['How can I write a try/except block that catches all exceptions?', ""You can but you probably shouldn't:"", ""Apart from a bare except: clause (which as others have said you shouldn't use), you can simply catch Exception:"", 'You can do this to handle general exceptions', ""To catch all possible exceptions, catch BaseException. It's on top of the Exception hierarchy:"", 'Very simple example, similar to the one found here:', 'There are multiple ways to do this in particular with Python 3.0 and above', ""I've just found out this little trick for testing if exception names in Python 2.7 . Sometimes i have handled specific exceptions in the code, so i needed a test to see if that name is within a list of handled exceptions."", 'It is worth mentioning this is not proper Python coding. This will catch also many errors you might not want to catch.']"
269,Running unittest with typical test directory structure,"The very common directory structure for even a simple Python module seems to be to separate the unit tests into their own test directory:

new_project/
    antigravity/
        antigravity.py
    test/...",https://stackoverflow.com/questions/1896918/running-unittest-with-typical-test-directory-structure,"['The very common directory structure for even a simple Python module seems to be to separate the unit tests into their own test directory:', ""The best solution in my opinion is to use the unittest command line interface which will add the directory to the sys.path so you don't have to (done in the TestLoader class)."", ""The simplest solution for your users is to provide an executable script (runtests.py or some such) which bootstraps the necessary test environment, including, if needed, adding your root project directory to sys.path temporarily. This doesn't require users to set environment variables, something like this works fine in a bootstrap script:"", 'I generally create a ""run tests"" script in the project directory (the one that is common to both the source directory and test) that loads my ""All Tests"" suite. This is usually boilerplate code, so I can reuse it from project to project.', 'From the article you linked to:', 'I had the same problem, with a separate unit tests folder. From the mentioned suggestions I add the absolute source path to sys.path.', 'if you run ""python setup.py develop"" then the package will be in the path. But you may not want to do that because you could infect your system python installation, which is why tools like virtualenv and buildout exist.', 'Solution/Example for Python unittest module', ""I've had the same problem for a long time. What I recently chose is the following directory structure:"", 'Use setup.py develop to make your working directory be part of the installed Python environment, then run the tests.', 'I noticed that if you run the unittest command line interface from your ""src"" directory, then imports work correctly without modification.', ""If you use VS Code and your tests are located on the same level as your project then running and debug your code doesn't work out of the box. What you can do is change your launch.json file:"", 'Following is my project structure:', ""What's the usual way of actually running the tests"", ""It's possible to use wrapper which runs selected or all tests."", 'Adding to @Pierre', ""You can't import from the parent directory without some voodoo. Here's yet another way that works with at least Python 3.6."", 'If you have multiple directories in your test directory, then you have to add to each directory an __init__.py file.', 'You should really use the pip tool.', 'This BASH script will execute the python unittest test directory from anywhere in the file system, no matter what working directory you are in.', 'This way will let you run the test scripts from wherever you want without messing around with system variables from the command line.', 'If you are looking for a command line-only solution:']"
270,Using @property versus getters and setters,"Here is a pure Python-specific design question: 

class MyClass(object):
    ...
    def get_my_attr(self):
        ...

    def set_my_attr(self, value):
        ...
and 

class MyClass(object):
    ...",https://stackoverflow.com/questions/6618002/using-property-versus-getters-and-setters,"['Here is a pure Python-specific design question:', ""Prefer properties. It's what they're there for."", ""In Python you don't use getters or setters or properties just for the fun of it. You first just use attributes and then later, only if needed, eventually migrate to a property without having to change the code using your classes."", 'Using properties lets you begin with normal attribute accesses and then back them up with getters and setters afterwards as necessary.', 'The short answer is: properties wins hands down. Always.', '[TL;DR?  You can skip to the end for a code example.]', 'I think both have their place. One issue with using @property is that it is hard to extend the behaviour of getters or setters in subclasses using standard class mechanisms. The problem is that the actual getter/setter functions are hidden in the property.', 'Using properties is to me more intuitive and fits better into most code.', 'I would prefer to use neither in most cases. The problem with properties is that they make the class less transparent. Especially, this is an issue if you were to raise an exception from a setter. For example, if you have an Account.email property:', 'I feel like properties are about letting you get the overhead of writing getters and setters only when you actually need them.', 'I am surprised that nobody has mentioned that properties are bound methods of a descriptor class, Adam Donohue and NeilenMarais get at exactly this idea in their posts -- that getters and setters are functions and can be used to:', 'In complex projects I prefer using read-only properties (or getters) with explicit setter function:', 'Both @property and traditional getters and setters have their advantages. It depends on your use case.', 'Here is an excerpts from ""Effective Python: 90 Specific Ways to Write Better Python"" (Amazing book. I highly recommend it).']"
271,How do I determine the size of an object in Python?,"I want to know how to get size of objects like a string, integer, etc. in Python.

Related question: How many bytes per element are there in a Python list (tuple)?

I am using an XML file which ...",https://stackoverflow.com/questions/449560/how-do-i-determine-the-size-of-an-object-in-python,"['I want to know how to get size of objects like a string, integer, etc. in Python.', 'Just use the sys.getsizeof function defined in the sys module.', 'The answer, ""Just use sys.getsizeof"", is not a complete answer.', ""The Pympler package's asizeof module can do this."", ""For numpy arrays, getsizeof doesn't work - for me it always returns 40 for some reason:"", 'Python 3.8 (Q1 2019) will change some of the results of sys.getsizeof, as announced here by Raymond Hettinger:', 'This can be more complicated than it looks depending on how you want to count things.  For instance, if you have a list of ints, do you want the size of the list containing the references to the ints? (ie. list only, not what is contained in it), or do you want to include the actual data pointed to, in which case you need to deal with duplicate references, and how to prevent double-counting when two objects contain references to the same object.', 'You can serialize the object to derive a measure that is closely related to the size of the object:', ""Having run into this problem many times myself, I wrote up a small function (inspired by @aaron-hall's answer) & tests that does what I would have expected sys.getsizeof to do:"", 'Here is a quick script I  wrote based on the previous answers to list sizes of all variables', ""Use sys.getsizeof() if you DON'T want to include sizes of linked (nested) objects."", ""If you don't need the exact size of the object but roughly to know how big it is, one quick (and dirty) way is to let the program run, sleep for an extended period of time, and check the memory usage (ex: Mac's activity monitor) by this particular python process. This would be effective when you are trying to find the size of one single large object in a python process. For example, I recently wanted to check the memory usage of a new data structure and compare it with that of Python's set data structure. First I wrote the elements (words from a large public domain book) to a set, then checked the size of the process, and then did the same thing with the other data structure. I found out the Python process with a set is taking twice as much memory as the new data structure. Again, you wouldn't be able to exactly say the memory used by the process is equal to the size of the object. As the size of the object gets large, this becomes close as the memory consumed by the rest of the process becomes negligible compared to the size of the object you are trying to monitor."", 'You can make use of getSizeof() as mentioned below to determine the size of an object', ""I use this trick... May won't be accurate on small objects, but I think it's much more accurate for a complex object (like pygame surface) rather than sys.getsizeof()""]"
272,"What is __future__ in Python used for and how/when to use it, and how it works","__future__ frequently appears in Python modules. I do not understand what __future__ is for and how/when to use it even after reading the Python's __future__ doc. 

Can anyone explain with examples?

...",https://stackoverflow.com/questions/7075082/what-is-future-in-python-used-for-and-how-when-to-use-it-and-how-it-works,"[""__future__ frequently appears in Python modules. I do not understand what __future__ is for and how/when to use it even after reading the Python's __future__ doc."", ""With __future__ module's inclusion, you can slowly be accustomed to incompatible changes or to such ones introducing new keywords."", 'When you do', '__future__ is a pseudo-module which programmers can use to enable new language features which are not compatible with the current interpreter. For example, the expression 11/4 currently evaluates to 2. If the module in which it is executed had enabled true division by executing:', 'It can be used to use features which will appear in newer versions while having an older release of Python.', 'There are some great answers already, but none of them address a complete list of what the __future__ statement currently supports.', 'Or is it like saying ""Since this is python v2.7, use that different \'print\' function that has also been added to python v2.7, after it was added in python 3. So my \'print\' will no longer be statements (eg print ""message"" ) but functions (eg, print(""message"", options). That way when my code is run in python 3, \'print\' will not break.""', 'One of the uses which I found to be very useful is the print_function from __future__ module.', 'After Python 3.0 onward, print is no longer just a statement, its a function instead. and is included in PEP 3105.']"
273,What is the difference between range and xrange functions in Python 2.X?,"Apparently xrange is faster but I have no idea why it's faster (and no proof besides the anecdotal so far that it is faster) or what besides that is different about

for i in range(0, 20):
for i in ...",https://stackoverflow.com/questions/94935/what-is-the-difference-between-range-and-xrange-functions-in-python-2-x,"[""Apparently xrange is faster but I have no idea why it's faster (and no proof besides the anecdotal so far that it is faster) or what besides that is different about"", 'In Python 2.x:', 'range creates a list, so if you do range(1, 10000000) it creates a list in memory with 9999999 elements.', 'Remember, use the timeit module to test which of small snippets of code is faster!', 'xrange only stores the range params and generates the numbers on demand. However the C implementation of Python currently restricts its args to C longs:', 'xrange returns an iterator and only keeps one number in memory at a time.  range keeps the entire list of numbers in memory.', 'Do spend some time with the Library Reference. The more familiar you are with it, the faster you can find answers to questions like this. Especially important are the first few chapters about builtin objects and types.', 'I am shocked nobody read doc:', 'range creates a list, so if you do range(1, 10000000) it creates a list in memory with 10000000 elements.\n  xrange is a generator, so it evaluates lazily.', 'You will find the advantage of xrange over range in this simple example:', 'It is for optimization reasons.', 'range(x,y) returns a list of each number in between x and y if you use a for loop, then range is slower. In fact, range has a bigger Index range. range(x.y) will print out a list of all the numbers in between x and y', 'range(): range(1, 10) returns a list from 1 to 10 numbers & hold whole list in memory.', ""Some of the other answers mention that Python 3 eliminated 2.x's range and renamed 2.x's xrange to range. However, unless you're using 3.0 or 3.1 (which nobody should be), it's actually a somewhat different type."", 'In python 2.x', 'When testing range against xrange in a loop (I know I should use timeit, but this was swiftly hacked up from memory using a simple list comprehension example) I found the following:', 'xrange() and range() in python works similarly as for the user , but the difference comes when we are talking about how the memory is allocated in using both the function.', 'range generates the entire list and returns it.  xrange does not -- it generates the numbers in the list on demand.', 'xrange uses an iterator (generates values on the fly), range returns a list.', ""What?\nrange returns a static list at runtime.\nxrange returns an object (which acts like a generator, although it's certainly not one) from which values are generated as and when required."", 'Everyone has explained it greatly. But I wanted it to see it for myself. I use python3. So, I opened the resource monitor (in Windows!), and first, executed the following command first:', 'From the help docs.', 'range() in Python 2.x', 'On a requirement for scanning/printing of 0-N items , range and xrange works as follows.', 'Range returns a list while xrange returns an xrange object which takes the same memory irrespective of the range size,as in this case,only one element is generated and available per iteration whereas in case of using range, all the elements are generated at once and are available in the memory.', 'The difference decreases for smaller arguments to range(..) / xrange(..):', 'range :-range will populate everything at once.which means every number of the range will occupy the memory.', 'Additionally, if do list(xrange(...)) will be equivalent to range(...).', 'See this post to find difference between range and xrange:']"
274,How to check version of python modules?,"I just installed the python modules: construct and statlib with setuptools like this:

# Install setuptools to be able to download the following
sudo apt-get install python-setuptools

# Install ...",https://stackoverflow.com/questions/20180543/how-to-check-version-of-python-modules,"['I just installed the python modules: construct and statlib with setuptools like this:', 'I suggest using pip in place of easy_install. With pip, you can list all installed packages and their versions with', 'You can try', 'Python >= 3.8:', 'I think this can help but first install show package in order to run pip show then use show to find the version!', 'The Better way to do that is:', 'In python3 with brackets around print', ""module.__version__ is a good first thing to try, but it doesn't always work."", 'The previous answers did not solve my problem, but this code did:', 'Use dir() to find out if the module has a __version__ attribute at all.', 'If the above methods do not work, it is worth trying the following in python:', 'first add python, pip to your environment variables. so that you can execute your commands from command prompt. then simply give python command.\nthen import the package', 'Assuming we are using Jupyter Notebook (if using Terminal, drop the exclamation marks):', 'In Python 3.8 version there is a  new metadata module in importlib package, which can do that as well.', ""Some modules don't have __version__ attribute, so the easiest way is check in the terminal: pip list"", 'I suggest opening a python shell in terminal (in the python version you are interested), importing the library, and getting its __version__ attribute.', 'Writing this answer for windows users. As suggested in all other answers, you can use the statements as:', 'You can try this:', 'This works in Jupyter Notebook on Windows, too! As long as Jupyter is launched from a bash-compliant command line such as Git Bash (MingW64), the solutions given in many of the answers can be used in Jupyter Notebook on Windows systems with one tiny tweak.', 'Quick python program to list all packges (you can copy it to requirements.txt)', '(see also https://stackoverflow.com/a/56912280/7262247)', 'In Summary:', 'To get a list of non-standard (pip) modules imported in the current module:', ""Building on Jakub Kukul's answer I found a more reliable way to solve this problem."", 'You can simply use subprocess.getoutput(python3 --version)', 'you can first install some package like this and then check its version']"
275,pip install from git repo branch,"Trying to pip install a repo's specific branch. Google tells me to
pip install git+https://github.com/user/repo.git@branch

The branch's name is issue/34/oscar-0.6 so I did pip  install https://github....",https://stackoverflow.com/questions/20101834/pip-install-from-git-repo-branch,"[""Trying to pip install a repo's specific branch. Google tells me to"", 'Prepend the url prefix git+ (See VCS Support):', ""Using pip with git+ to clone a repository can be extremely slow (test with https://github.com/django/django@stable/1.6.x for example, it will take a few minutes). The fastest thing I've found, which works with GitHub and BitBucket, is:"", 'Instructions to install from private repo using ssh credentials:', 'Just to add an extra, if you want to install it in your pip file it can be added like this:', 'You used the egg files install procedure.\nThis procedure supports installing over git, git+http, git+https, git+ssh, git+git and git+file. Some of these are mentioned.', 'This worked like charm:']"
276,How to create a GUID/UUID in Python,How do I create a GUID in Python that is platform independent? I hear there is a method using ActivePython on Windows but it's Windows only because it uses COM. Is there a method using plain Python?,https://stackoverflow.com/questions/534839/how-to-create-a-guid-uuid-in-python,"[""How do I create a GUID in Python that is platform independent? I hear there is a method using ActivePython on Windows but it's Windows only because it uses COM. Is there a method using plain Python?"", 'The uuid module, in Python 2.5 and up,  provides RFC compliant UUID\n  generation. See the module docs and the RFC for details. [source]', ""If you're using Python 2.5 or later, the uuid module is already included with the Python standard distribution."", 'Copied from : https://docs.python.org/2/library/uuid.html (Since the links posted were not active and they keep updating)', 'I use GUIDs as random keys for database type operations.', 'If you need to pass UUID for a primary key for your model or unique field then below code returns the UUID object -', 'This function is fully configurable and generates unique uid based on the format specified', '2019 Answer (for Windows):', 'Check this post, helped me a lot. In short, the best option for me was:']"
277,How can I force division to be floating point? Division keeps rounding down to 0?,"I have two integer values a and b, but I need their ratio in floating point.  I know that a < b and I want to calculate a / b, so if I use integer division I'll always get 0 with a remainder of a.

...",https://stackoverflow.com/questions/1267869/how-can-i-force-division-to-be-floating-point-division-keeps-rounding-down-to-0,"[""I have two integer values a and b, but I need their ratio in floating point.  I know that a < b and I want to calculate a / b, so if I use integer division I'll always get 0 with a remainder of a."", 'In Python 2, division of two ints produces an int. In Python 3, it produces a float. We can get the new behaviour by importing from __future__.', 'You can cast to float by doing c = a / float(b). If the numerator or denominator is a float, then the result will be also.', ""I have two integer values a and b, but I need their ratio in floating point. I know that a < b and I want to calculate a/b, so if I use integer division I'll always get 0 with a remainder of a."", 'In Python 3.x, the single slash (/) always means true (non-truncating) division. (The // operator is used for truncating division.) In Python 2.x (2.2 and above), you can get this same behavior by putting a', 'Just making any of the parameters for division in floating-point format also produces the output in floating-point.', 'Add a dot (.) to indicate floating point numbers', 'This will also work', 'If you want to use ""true"" (floating point) division by default, there is a command line flag:', 'where a is dividend and b is the divisor.\nThis function is handy when quotient after division  of two integers is a float.']"
278,How do I detect whether a Python variable is a function?,"I have a variable, x, and I want to know whether it is pointing to a function or not.

I had hoped I could do something like:

>>> isinstance(x, function)
But that gives me:

Traceback (most ...",https://stackoverflow.com/questions/624926/how-do-i-detect-whether-a-python-variable-is-a-function,"['I have a variable, x, and I want to know whether it is pointing to a function or not.', 'If this is for Python 2.x or for Python 3.2+, you can also use callable(). It used to be deprecated, but is now undeprecated, so you can use it again. You can read the discussion here: http://bugs.python.org/issue10518. You can do this with:', ""Builtin types that don't have constructors in the built-in namespace (e.g. functions, generators, methods) are in the types module. You can use types.FunctionType in an isinstance call:"", 'Since Python 2.1 you can import isfunction from the inspect module.', 'The accepted answer was at the time it was offered thought to be correct. As it\nturns out, there is no substitute for callable(), which is back in Python\n3.2: Specifically, callable() checks the tp_call field of the object being\ntested. There is no plain Python equivalent.  Most of the suggested tests are\ncorrect most of the time:', 'The following should return a boolean:', ""Python's 2to3 tool (http://docs.python.org/dev/library/2to3.html) suggests:"", 'callable(x) will return true if the object passed can be called in Python, but the function does not exist in Python 3.0, and properly speaking will not distinguish between:', 'If you want to detect everything that syntactically looks like a function: a function, method, built-in fun/meth, lambda ... but exclude callable objects (objects with __call__ method defined), then try this one:', 'Try using callable(x).', 'If you have learned C++, you must be familiar with function object or functor, means any object that can be called as if it is a function.', 'As the accepted answer, John Feminella stated that:', 'A function is just a class with a __call__ method, so you can do', ""Here's a couple of other ways:"", ""Instead of checking for '__call__' (which is not exclusive to functions), you can check whether a user-defined function has attributes func_name, func_doc, etc. This does not work for methods."", 'Since classes also have __call__ method, I recommend another solution:', 'Note that Python classes are also callable.', 'Whatever function is a class so you can take the name of the class of instance x and compare:', ""The solutions using hasattr(obj, '__call__') and callable(.) mentioned in some of the answers have a main drawback: both also return True for classes and instances of classes with a __call__() method. Eg."", 'callable is a very good solution. However, I wanted to treat this the opposite way  of John Feminella. Instead of treating it like this saying:', ""In Python3 I came up with type (f) == type (lambda x:x) which yields True if f is a function and False if it is not. But I think I prefer isinstance (f, types.FunctionType), which feels less ad hoc. I wanted to do type (f) is function, but that doesn't work."", 'Following previous replies, I came up with this:', 'You could try this:', 'If the code will go on to perform the call if the value is callable, just perform the call and catch TypeError.', 'The following is a ""repr way"" to check it. Also it works with lambda.', 'This works for me:']"
279,Is arr.__len__() the preferred way to get the length of an array in Python?,"In Python, is the following the only way to get the number of elements?

arr.__len__()
If so, why the strange syntax?",https://stackoverflow.com/questions/518021/is-arr-len-the-preferred-way-to-get-the-length-of-an-array-in-python,"['In Python, is the following the only way to get the number of elements?', 'The same works for tuples:', 'The way you take a length of anything for which that makes sense (a list, dictionary, tuple, string, ...) is to call len on it.', ""Python uses duck typing: it doesn't care about what an object is, as long as it has the appropriate interface for the situation at hand. When you call the built-in function len() on an object, you are actually calling its internal __len__ method. A custom object can implement this interface and len() will return the answer, even if the object is not conceptually a sequence."", 'The preferred way to get the length of any python object is to pass it as an argument to the len function.  Internally, python will then try to call the special __len__ method of the object that was passed.', 'Just use len(arr):', 'you can use len(arr) \nas suggested in previous answers to get the length of the array. In case you want the dimensions of a 2D array you could use arr.shape returns height and width', ""len(list_name) function takes  list as a parameter and it calls list's __len__() function."", ""Python suggests users use len() instead of __len__() for consistency, just like other guys said. However, There're some other benefits:""]"
280,Remove empty strings from a list of strings,"I want to remove all empty strings from a list of strings in python.

My idea looks like this:

while '' in str_list:
    str_list.remove('')
Is there any more pythonic way to do this?",https://stackoverflow.com/questions/3845423/remove-empty-strings-from-a-list-of-strings,"['I want to remove all empty strings from a list of strings in python.', 'I would use filter:', 'Using a list comprehension is the most Pythonic way:', 'filter actually has a special option for this:', 'Compare time', 'Reply from @Ib33X is awesome. If you want to remove every empty string, after stripped. you need to use the strip method too. Otherwise, it will return the empty string too if it has white spaces. Like, "" "" will be valid too for that answer. So, can be achieved by.', ""Instead of if x, I would use if X != '' in order to just eliminate empty strings. Like this:"", 'Depending on the size of your list, it may be most efficient if you use list.remove() rather than create a new list:', 'Keep in mind that if you want to keep the white spaces within a string, you may remove them unintentionally using some approaches.\nIf you have this list', 'Use filter:', ""As reported by Aziz Alto filter(None, lstr) does not remove empty strings with a space ' ' but if you are sure lstr contains only string you can use filter(str.strip, lstr)"", 'That is, all-space strings are retained:', 'For a list with a combination of spaces and empty values, use simple list comprehension -']"
281,How do I change the working directory in Python?,"cd is the shell command to change the working directory.

How do I change the current working directory in Python?",https://stackoverflow.com/questions/431684/how-do-i-change-the-working-directory-in-python,"['cd is the shell command to change the working directory.', 'You can change the working directory with:', ""Here's an example of a context manager to change the working directory. It is simpler than an ActiveState version referred to elsewhere, but this gets the job done."", 'I would use os.chdir like this:', 'cd() is easy to write using a generator and a decorator.', ""If you're using a relatively new version of Python, you can also use a context manager, such as this one:"", 'As already pointed out by others, all the solutions above only change the working directory of the current process. This is lost when you exit back to the Unix shell. If desperate you can change the parent shell directory on Unix with this horrible hack:', 'os.chdir() is the right way.', 'os.chdir() is the Pythonic version of cd.', ""You can use both with os.chdir(abs_path) or os.chdir(rel_path), there's no need to call os.getcwd() to use a relative path."", 'Further into direction pointed out by Brian and based on sh (1.0.8+)', 'If You would like to perform something like ""cd.."" option, just type:', 'The Path objects in path library offer both a context manager and a chdir method for this purpose:', 'If you use spyder and love GUI, you can simply click on the folder button on the upper right corner of your screen and navigate through folders/directories you want as current directory.\nAfter doing so you can go to the file explorer tab of the window in spyder IDE and you can see all the files/folders present there.\nto check your current working directory\ngo to the console of spyder IDE and simply type', ""Changing the current directory of the script process is trivial. I think the question is actually how to change the current directory of the command window from which a python script is invoked, which is very difficult. A Bat script in Windows or a Bash script in a Bash shell can do this with an ordinary cd command because the shell itself is the interpreter. In both Windows and Linux Python is a program and no program can directly change its parent's environment. However the combination of a simple shell script with a Python script doing most of the hard stuff can achieve the desired result. For example, to make an extended cd command with traversal history for backward/forward/select revisit, I wrote a relatively complex Python script invoked by a simple bat script. The traversal list is stored in a file, with the target directory on the first line. When the python script returns, the bat script reads the first line of the file and makes it the argument to cd. The complete bat script (minus comments for brevity) is:""]"
282,Is there a list of Pytz Timezones?,"I would like to know what are all the possible values for the timezone argument in the Python library pytz. How to do it?
SOLUTION
for tz in pytz.all_timezones:
    print tz
Africa/Abidjan
Africa/...",https://stackoverflow.com/questions/13866926/is-there-a-list-of-pytz-timezones,"['I would like to know what are all the possible values for the timezone argument in the Python library pytz. How to do it?', 'You can list all the available timezones with pytz.all_timezones:', ""Don't create your own list - pytz has a built-in set:"", 'The timezone name is the only reliable way to specify the timezone.', 'Here, Python list of country codes, names, continents, capitals, and pytz timezones.', 'EDIT: I would appreciate it if you do not downvote this answer further. This answer is wrong, but I would rather retain it as a historical note. While it is arguable whether the pytz interface is error-prone, it can do things that dateutil.tz cannot do, especially regarding daylight-saving in the past or in the future. I have honestly recorded my experience in an article ""Time zones in Python"".', 'They appear to be populated by the tz database time zones found here.', 'Available from Python3.9:', 'In my opinion this is a design flaw of pytz library. It should be more reliable to specify a timezone using the offset, e.g.']"
283,Convert list of dictionaries to a pandas DataFrame,"I have a list of dictionaries like this:

[{'points': 50, 'time': '5:00', 'year': 2010}, 
{'points': 25, 'time': '6:00', 'month': ""february""}, 
{'points':90, 'time': '9:00', 'month': 'january'}, 
{'...",https://stackoverflow.com/questions/20638006/convert-list-of-dictionaries-to-a-pandas-dataframe,"['I have a list of dictionaries like this:', 'Supposing d is your list of dicts, simply:', 'The other answers are correct, but not much has been explained in terms of advantages and limitations of these methods. The aim of this post will be to show examples of these methods under different situations, discuss when to use (and when not to use), and suggest alternatives.', 'In pandas 16.2, I had to do pd.DataFrame.from_records(d) to get this to work.', 'You can also use pd.DataFrame.from_dict(d) as :', 'Pyhton3:\nMost of the solutions listed previously work. However, there are instances when row_number of the dataframe is not required and the each row (record) has to be written individually.', 'For converting a list of dictionaries to a pandas DataFrame, you can use ""append"":', 'The easiest way I have found to do it is like this:']"
284,Pretty-print an entire Pandas Series / DataFrame,"I work with Series and DataFrames on the terminal a lot. The default __repr__ for a Series returns a reduced sample, with some head and tail values, but the rest missing.

Is there a builtin way to ...",https://stackoverflow.com/questions/19124601/pretty-print-an-entire-pandas-series-dataframe,"['I work with Series and DataFrames on the terminal a lot. The default __repr__ for a Series returns a reduced sample, with some head and tail values, but the rest missing.', 'You can also use the option_context, with one or more options:', 'No need to hack settings. There is a simple way:', 'Sure, if this comes up a lot, make a function like this one. You can even configure it to load every time you start IPython: https://ipython.org/ipython-doc/1/config/overview.html', 'After importing pandas, as an alternative to using the context manager, set such options for displaying entire dataframes:', 'Use the tabulate package:', 'This answer is a variation of the prior answer by lucidyan. It makes the code more readable by avoiding the use of set_option.', 'If you are using Ipython Notebook (Jupyter). You can use HTML', 'Try this', 'You can achieve this using below method. just pass the total no. of columns present in the DataFrame as arg to', 'Nobody has proposed this simple plain-text solution:', 'Try using display() function. This would automatically use Horizontal and vertical scroll bars and with this you can display different datasets easily instead of using print().']"
285,What is the difference between dict.items() and dict.iteritems() in Python2?,"Are there any applicable differences between dict.items() and dict.iteritems()?

From the Python docs:
  dict.items(): Return a copy of the dictionary’s list of (key, value) pairs.
  
  dict....",https://stackoverflow.com/questions/10458437/what-is-the-difference-between-dict-items-and-dict-iteritems-in-python2,"['Are there any applicable differences between dict.items() and dict.iteritems()?', ""It's part of an evolution."", 'dict.items() returns a list of 2-tuples ([(key, value), (key, value), ...]), whereas dict.iteritems() is a generator that yields 2-tuples. The former takes more space and time initially, but accessing each element is fast, whereas the second takes less space and time initially, but a bit more time in generating each element.', ""The commands dict.items(), dict.keys() and dict.values() return a copy of the dictionary's list of (k, v) pair, keys and values.\nThis could take a lot of memory if the copied list is very large."", ""You asked: 'Are there any applicable differences between dict.items() and dict.iteritems()'"", 'dict.items() return list of tuples, and dict.iteritems() return iterator object of tuple in dictionary as (key,value). The tuples are the same, but container is different.', 'dict.iteritems is gone in Python3.x So use iter(dict.items()) to get the same output and memory alocation', 'If you have', 'If you want a way to iterate the item pairs of a dictionary that works with both Python 2 and 3, try something like this:', 'dict.iteritems(): gives you an iterator. You may use the iterator in other patterns outside of the loop.', 'dict.iteritems() in python 2 is equivalent to dict.items() in python 3.']"
286,How to import the class within the same directory or sub directory?,"I have a directory that stores all the .py files.

bin/
   main.py
   user.py # where class User resides
   dir.py # where class Dir resides
I want to use classes from user.py and dir.py in main.py.
...",https://stackoverflow.com/questions/4142151/how-to-import-the-class-within-the-same-directory-or-sub-directory,"['I have a directory that stores all the .py files.', 'Make an empty file called __init__.py in the same directory as the files. That will signify to Python that it\'s ""ok to import from this directory"".', ""I just learned (thanks to martineau's comment) that, in order to import classes from files within the same directory, you would now write in Python 3:"", 'In your main.py:', 'In python3, __init__.py is no longer necessary. If the current directory of the console is the directory where the python script is located, everything works fine with', ""You can import the module and have access through its name if you don't want to mix functions and classes with yours"", 'If user.py and dir.py are not including classes then', 'To make it more simple to understand:', 'Python 3', ""I'm not sure why this work but using Pycharm build from file_in_same_dir import class_name"", 'Just too brief,\nCreate a file __init__.py is classes directory and then import it to your script like following (Import all case)', 'Python3', 'to import from the same directory']"
287,Why is [] faster than list()?,I recently compared the processing speeds of [] and list() and was surprised to discover that [] runs more than three times faster than list(). I ran the same test with {} and dict() and the results ...,https://stackoverflow.com/questions/30216000/why-is-faster-than-list,"['I recently compared the processing speeds of [] and list() and was surprised to discover that [] runs more than three times faster than list(). I ran the same test with {} and dict() and the results were practically identical: [] and {} both took around 0.128sec / million cycles, while list() and dict() took roughly 0.428sec / million cycles each.', 'Because [] and {} are literal syntax. Python can create bytecode just to create the list or dictionary objects:', 'list() requires a global lookup and a function call but [] compiles to a single instruction. See:', 'Because list is a function to convert say a string to a list object, while [] is used to create a list off the bat. Try this (might make more sense to you):', ""The answers here are great, to the point and fully cover this question. I'll drop a further step down from byte-code for those interested. I'm using the most recent repo of CPython; older versions behave similar in this regard but slight changes might be in place."", 'The biggest reason is that Python treats list() just like a user-defined function, which means you can intercept it by aliasing something else to list and do something different (like use your own subclassed list or perhaps a deque).']"
288,How can I use Python to get the system hostname?,I'm writing a chat program for a local network. I would like be able to identify computers and get the user-set computer name with Python.,https://stackoverflow.com/questions/4271740/how-can-i-use-python-to-get-the-system-hostname,"[""I'm writing a chat program for a local network. I would like be able to identify computers and get the user-set computer name with Python."", 'Use socket and its gethostname() functionality. This will get the hostname of the computer where the Python interpreter is running:', 'Both of these are pretty portable:', 'You will probably load the os module anyway, so another suggestion would be:', 'What about :', ""os.getenv('HOSTNAME') and os.environ['HOSTNAME'] don't always work. In cron jobs and WSDL, HTTP HOSTNAME isn't set. Use this instead:"", ""If I'm correct, you're looking for the socket.gethostname function:"", 'From at least python >= 3.3:', 'socket.gethostname() could do', 'On some systems, the hostname is set in the environment. If that is the case for you, the os module can pull it out of the environment via os.getenv. For example, if HOSTNAME is the environment variable containing what you want, the following will get it:', 'I needed the name of the PC to use in my PyLog conf file, and the socket library is not available, but os library is.', 'You have to execute this line of code']"
289,How to deal with SettingWithCopyWarning in Pandas,"Background
I just upgraded my Pandas from 0.11 to 0.13.0rc1. Now, the application is popping out many new warnings. One of them like this:
E:\FinReporter\FM_EXT.py:449: SettingWithCopyWarning: A value ...",https://stackoverflow.com/questions/20625582/how-to-deal-with-settingwithcopywarning-in-pandas,"['I just upgraded my Pandas from 0.11 to 0.13.0rc1. Now, the application is popping out many new warnings. One of them like this:', 'The SettingWithCopyWarning was created to flag potentially confusing ""chained"" assignments, such as the following, which does not always work as expected, particularly when the first selection returns a copy.  [see GH5390 and GH5597 for background discussion.]', 'This post is meant for readers who,', 'In general the point of the SettingWithCopyWarning is to show users (and especially new users) that they may be operating on a copy and not the original as they think. There are false positives (IOW if you know what you are doing it could be ok). One possibility is simply to turn off the (by default warn) warning as @Garrett suggest.', 'When you go and do something like this:', 'Here I answer the question directly. How to deal with it?', 'This topic is really confusing with Pandas. Luckily, it has a relatively simple solution.', 'To remove any doubt, my solution was to make a deep copy of the slice instead of a regular copy.\nThis may not be applicable depending on your context (Memory constraints / size of the slice, potential for performance degradation - especially if the copy occurs in a loop like it did for me, etc...)', 'This should work:', 'Some may want to simply suppress the warning:', ""I had been getting this issue with .apply() when assigning a new dataframe from a pre-existing dataframe on which i've used the .query() method. For instance:"", 'If you have assigned the slice to a variable and want to set using the variable as in the following:', 'You could avoid the whole problem like this, I believe:', 'For me this issue occured in a following >simplified< example. And I was also able to solve it (hopefully with a correct solution):', 'Followup beginner question / remark', 'As this question is already fully explained and discussed in existing answers I will just provide a neat pandas approach to the context manager using pandas.option_context (links to docs and example) - there is absolutely no need to create a custom class with all the dunder methods and other bells and whistles.']"
290,not None test in Python [duplicate],"Out of these not None tests.

if val != None:

if not (val is None):

if val is not None:
Which one is preferable, and why?",https://stackoverflow.com/questions/3965104/not-none-test-in-python,"['Out of these not None tests.', 'is the Pythonic idiom for testing that a variable is not set to None. This idiom has particular uses in the case of declaring keyword functions with default parameters. is tests identity in Python. Because there is one and only one instance of None present in a running Python script/program, is is the optimal test for this. As Johnsyweb points out, this is discussed in PEP 8 under ""Programming Recommendations"".', 'From, Programming Recommendations, PEP 8:', 'The best bet with these types of questions is to see exactly what python does. The dis module is incredibly informative:', 'Either of the latter two, since val could potentially be of a type that defines __eq__() to return true when passed None.']"
291,Single quotes vs. double quotes in Python [closed],"According to the documentation, they're pretty much interchangeable.  Is there a stylistic reason to use one over the other?",https://stackoverflow.com/questions/56011/single-quotes-vs-double-quotes-in-python,"[""According to the documentation, they're pretty much interchangeable.  Is there a stylistic reason to use one over the other?"", ""I like to use double quotes around strings that are used for interpolation or that are natural language messages, and single quotes for small symbol-like strings, but will break the rules if the strings contain quotes, or if I forget. I use triple double quotes for docstrings and raw string literals for regular expressions even if they aren't needed."", 'Quoting the official docs at https://docs.python.org/2.0/ref/strings.html:', 'I used to prefer \', especially for \'\'\'docstrings\'\'\', as I find """"""this creates some fluff"""""". Also, \' can be typed without the Shift key on my Swiss German keyboard.', ""I'm with Will:"", 'If the string you have contains one, then you should use the other.  For example, ""You\'re able to do this"", or \'He said ""Hi!""\'.  Other than that, you should simply be as consistent as you can (within a module, within a package, within a project, within an organisation).', 'Triple quoted comments are an interesting subtopic of this question. PEP 257 specifies triple quotes for doc strings. I did a quick check using Google Code Search and found that triple double quotes in Python are about 10x as popular as triple single quotes -- 1.3M vs 131K occurrences in the code Google indexes. So in the multi line case your code is probably going to be more familiar to people if it uses triple double quotes.', 'For that simple reason, I always use double quotes on the outside. Always', 'Python uses quotes something like this:', 'I use double quotes in general, but not for any specific reason - Probably just out of habit from Java.', ""Personally I stick with one or the other. It doesn't matter. And providing your own meaning to either quote is just to confuse other people when you collaborate."", ""It's probably a stylistic preference more than anything.  I just checked PEP 8 and didn't see any mention of single versus double quotes."", ""In Perl you want to use single quotes when you have a string which doesn't need to interpolate variables or escaped characters like \\n, \\t, \\r, etc."", 'I chose to use double quotes because they are easier to see.', ""I just use whatever strikes my fancy at the time; it's convenient to be able to switch between the two at a whim!"", ""Your team's taste or your project's coding guidelines."", 'None as far as I know. Although if you look at some code, "" "" is commonly used for strings of text (I guess \' is more common inside text than ""), and \' \' appears in hashkeys and things like that.', 'I aim to minimize both pixels and surprise. I typically prefer \' in order to minimize pixels, but "" instead if the string has an apostrophe, again to minimize pixels. For a docstring, however, I prefer """""" over \'\'\' because the latter is non-standard, uncommon, and therefore surprising. If now I have a bunch of strings where I used "" per the above logic, but also one that can get away with a \', I may still use "" in it to preserve consistency, only to minimize surprise.', ""I use double quotes because I have been doing so for years in most languages (C++, Java, VB…) except Bash, because I also use double quotes in normal text and because I'm using a (modified) non-English keyboard where both characters require the shift key."", '\' = ""']"
292,What is __pycache__?,"From what I understand, a cache is an encrypted file of similar files.

What do we do with the __pycache__ folder? Is it what we give to people instead of our source code? Is it just my input data? ...",https://stackoverflow.com/questions/16869024/what-is-pycache,"['From what I understand, a cache is an encrypted file of similar files.', ""When you run a program in python, the interpreter compiles it to bytecode first (this is an oversimplification) and stores it in the __pycache__ folder. If you look in there you will find a bunch of files sharing the names of the .py files in your project's folder, only their extensions will be either .pyc or .pyo. These are bytecode-compiled and optimized bytecode-compiled versions of your program's files, respectively."", '__pycache__ is a folder containing Python 3 bytecode compiled and ready to be executed.', 'A __pycache__ folder is created when you use the line:', 'Updated answer from 3.7+ docs:', 'from the official python tutorial Modules', ""Execution of a python script would cause the byte code to be generated in memory and kept until the program is shutdown.\nIn case a module is imported, for faster reusability, Python would create a cache .pyc (PYC is 'Python' 'Compiled') file where the byte code of the module being imported is cached.\nIdea is to speed up loading of python modules by avoiding re-compilation ( compile once, run multiple times policy ) when they are re-imported."", 'When you import a module,', 'Python Version 2.x will have .pyc when interpreter compiles the code.', 'The python interpreter compiles the *.py script file and saves the results of the compilation to the __pycache__ directory.', 'In 3.2 and later, Python saves .pyc compiled byte code files in a sub-directory named __pycache__ located in the directory where your source files reside with filenames that identify the Python version that created them (e.g. script.cpython-33.pyc)']"
293,Writing a list to a file with Python,"Is this the cleanest way to write a list to a file, since writelines() doesn't insert newline characters?

file.writelines([""%s\n"" % item  for item in list])
It seems like there would be a standard ...",https://stackoverflow.com/questions/899103/writing-a-list-to-a-file-with-python,"[""Is this the cleanest way to write a list to a file, since writelines() doesn't insert newline characters?"", 'You can use a loop:', 'What are you going to do with the file? Does this file exist for humans, or other programs with clear interoperability requirements?', 'The simpler way is:', 'Using Python 3 and Python 2.6+ syntax:', 'Yet another way.  Serialize to json using simplejson (included as json in python 2.6):', ""I thought it would be interesting to explore the benefits of using a genexp, so here's my take."", ""Because i'm lazy...."", 'Serialize list into text file with comma sepparated value', 'Following is the syntax for writelines() method', ""You can also use the print function if you're on python3 as follows."", 'In python>3 you can use print and * for argument unpacking:', ""Why don't you try"", 'This logic will first convert the items in list to string(str). Sometimes the list contains a tuple like', 'Another way of iterating and adding newline:', 'Using numpy.savetxt is also an option:', 'Redirecting stdout to a file might also be useful for this purpose:', 'Let avg be the list, then:', 'In Python3 You Can use this loop', 'How It Works:\nFirst, open a ﬁle by using the built-in open function and specifying the name of\nthe ﬁle and the mode in which we want to open the ﬁle. The mode can be a\nread mode (’r’), write mode (’w’) or append mode (’a’). We can also specify\nwhether we are reading, writing, or appending in text mode (’t’) or binary\nmode (’b’). There are actually many more modes available and help(open)\nwill give you more details about them. By default, open() considers the ﬁle to\nbe a ’t’ext ﬁle and opens it in ’r’ead mode.\nIn our example, we ﬁrst open the ﬁle in write text mode and use the write\nmethod of the ﬁle object to write to the ﬁle and then we ﬁnally close the ﬁle.']"
294,Why dict.get(key) instead of dict[key]?,"Today, I came across the dict method get which, given a key in the dictionary, returns the associated value.

For what purpose is this function useful? If I wanted to find a value associated with a ...",https://stackoverflow.com/questions/11041405/why-dict-getkey-instead-of-dictkey,"['Today, I came across the dict method get which, given a key in the dictionary, returns the associated value.', 'It allows you to provide a default value if the key is missing:', 'What is the dict.get() method?', 'get takes a second optional value.  If the specified key does not exist in your dictionary, then this value will be returned.', ""I will give a practical example in scraping web data using python, a lot of the times you will get keys with no values, in those cases you will get errors if you use dictionary['key'], whereas dictionary.get('key', 'return_otherwise') has no problems."", 'The purpose is that you can give a default value if the key is not found, which is very useful', 'A gotcha to be aware of when using .get():', 'For what purpose is this function useful?', 'Why dict.get(key) instead of dict[key]?', ""One difference, that can be an advantage, is that if we are looking for a key that doesn't exist we will get None, not like when we use the brackets notation, in which case we will get an error thrown:"", 'Based on usage should use this get method.']"
295,Reverse / invert a dictionary mapping,"Given a dictionary like so:

my_map = {'a': 1, 'b': 2}
How can one invert this map to get:

inv_map = {1: 'a', 2: 'b'}",https://stackoverflow.com/questions/483666/reverse-invert-a-dictionary-mapping,"['Given a dictionary like so:', 'Python 3+:', 'Assuming that the values in the dict are unique:', ""If the values in my_map aren't unique:"", 'To do this while preserving the type of your mapping (assuming that it is a dict or a dict subclass):', 'Try this:', 'Another, more functional, way:', ""This expands upon the answer by Robert, applying to when the values in the dict aren't unique."", 'We can also reverse a dictionary with duplicate keys using defaultdict:', 'Combination of list and dictionary comprehension. Can handle duplicate keys', 'For instance, you have the following dictionary:', ""If the values aren't unique, and you're a little hardcore:"", 'This handles non-unique values and retains much of the look of the unique case.', 'In addition to the other functions suggested above, if you like lambdas:', 'I think the best way to do this is to define a class. Here is an implementation of a ""symmetric dictionary"":', 'I found that this version is more than 10% faster than the accepted version of a dictionary with 10000 keys.', 'Function is symmetric for values of type list; Tuples are coverted to lists when performing reverse_dict(reverse_dict(dictionary))', 'Since dictionaries require one unique key within the dictionary unlike values, we have to append the reversed values into a list of sort to be included within the new specific keys.', 'Fast functional solution for non-bijective maps (values not unique):', 'Try this for python 2.7/3.x', 'A lambda solution for current python 3.x versions:', 'I would do it that way in python 2.', ""This will provide output as : {1: ['a', 'd'], 2: ['b'], 3: ['c']}"", 'this code do like this:', ""Not something completely different, just a bit rewritten recipe from Cookbook. It's futhermore optimized by retaining setdefault method, instead of each time getting it through the instance:"", ""I wrote this with the help of cycle 'for' and method '.get()' and I changed the name 'map' of the dictionary to 'map1' because 'map' is a function."", ""If values aren't unique AND may be a hash (one dimension):""]"
296,Styling multi-line conditions in 'if' statements? [closed],"Sometimes I break long conditions in ifs onto several lines. The most obvious way to do this is:

  if (cond1 == 'val1' and cond2 == 'val2' and
      cond3 == 'val3' and cond4 == 'val4'):
      ...",https://stackoverflow.com/questions/181530/styling-multi-line-conditions-in-if-statements,"['Want to improve this question? Update the question so it can be answered with facts and citations by editing this post.', ""You don't need to use 4 spaces on your second conditional line.  Maybe use:"", ""I've resorted to the following in the degenerate case where it's simply AND's or OR's."", 'Someone has to champion use of vertical whitespace here! :)', 'I prefer this style when I have a terribly large if-condition:', ""Here's my very personal take: long conditions are (in my view) a code smell that suggests refactoring into a boolean-returning function/method. For example:"", ""This doesn't improve so much but..."", 'I suggest moving the and keyword to the second line and indenting all lines containing conditions with two spaces instead of four:', ""It seems worth quoting PEP 0008 (Python's official style guide), since it comments upon this issue at modest length:"", 'Here\'s what I do, remember that ""all"" and ""any"" accepts an iterable, so I just put a long condition in a list and let ""all"" do the work.', 'Adding to what @krawyoti said... Long conditions smell because they are difficult to read and difficult to understand. Using a function or a variable makes the code clearer. In Python, I prefer to use vertical space, enclose parenthesis, and place the logical operators at the beginning of each line so the expressions don\'t look like ""floating"".', ""I'm surprised not to see my preferred solution,"", ""Personally, I like to add meaning to long if-statements. I would have to search through code to find an appropriate example, but here's the first example that comes to mind: let's say I happen to run into some quirky logic where I want to display a certain page depending on many variables."", '""all"" and ""any"" are nice for the many conditions of same type case. BUT they always evaluates all conditions. As shown in this example:', ""(I've lightly modified the identifiers as fixed-width names aren't representative of real code – at least not real code that I encounter – and will belie an example's readability.)"", 'Plain and simple, also passes pep8 checks:', 'What if we only insert an additional blank line between the condition and the body and do the rest in the canonical way?', 'What I usually do is:', ""All respondents that also provide multi-conditionals for the if statement is just as ugly as the problem presented. You don't solve this problem by doing the same thing.."", ""I think @zkanda's solution would be good with a minor twist. If you had your conditions and values in their own respective lists, you could use a list comprehension to do the comparison, which would make things a bit more general for adding condition/value pairs."", ""Just a few other random ideas for completeness's sake.  If they work for you, use them.  Otherwise, you're probably better off trying something else."", ""I've been struggling to find a decent way to do this as well, so I just came up with an idea (not a silver bullet, since this is mainly a matter of taste)."", 'You could split it into two lines', 'I know this thread is old, but I have some Python 2.7 code and PyCharm (4.5) still complains about this case:', 'Pack your conditions into a list, then do smth. like:', 'I find that when I have long conditions, I often have a short code body.  In that case, I just double-indent the body, thus:', 'or if this is clearer:', ""Here's another approach:"", 'I usually use:', 'if our if & an else condition has to execute multiple statement inside of it than we can write like below.\nEvery when we have if else example with one statement inside of it .', ""Pardon my noobness, but it happens that I'm not as knowledgeable of #Python as anyone of you here, but it happens that I have found something similar when scripting my own objects in a 3D BIM modeling, so I will adapt my algorithm to that of python.""]"
297,How to set environment variables in Python?,"I need to set some environment variables in the Python script and I want all the other scripts that are called from Python to see the environment variables' set.
If I do,
os.environ[""DEBUSSY""...",https://stackoverflow.com/questions/5971312/how-to-set-environment-variables-in-python,"[""I need to set some environment variables in the Python script and I want all the other scripts that are called from Python to see the environment variables' set."", 'Environment variables must be strings, so use', 'You may need to consider some further aspects for code robustness;', 'os.environ behaves like a python dictionary, so all the common dictionary operations can be performed. In addition to the get and set operations mentioned in the other answers, we can also simply check if a key exists. The keys and values should be stored as strings.', 'if i do os.environ[""DEBUSSY""] = 1, it\n  complains saying that 1 has to be\n  string.', 'I have been trying to add environment variables. My goal was to store some user information to system variables such that I can use those variables for future solutions, as an alternative to config files. \nHowever, the method described in the code below did not help me at all.', 'to Set Variable:', 'You should assign string value to environment variable.', 'What about os.environ[""DEBUSSY""] = \'1\'? Environment variables are always strings.', ""It should be noted that if you try to set the environment variable to a bash evaluation it won't store what you expect. Example:"", 'You can use the os.environ dictionary to access your environment variables.', 'When you play with environment variables (add/modify/remove variables), a good practice is to restore the previous state at function completion.']"
298,How to print a date in a regular format?,"This is my code:

import datetime
today = datetime.date.today()
print(today)
This prints: 2008-11-22 which is exactly what I want.

But, I have a list I'm appending this to and then suddenly ...",https://stackoverflow.com/questions/311627/how-to-print-a-date-in-a-regular-format,"['This is my code:', 'In Python, dates are objects. Therefore, when you manipulate them, you manipulate objects, not strings or timestamps.', 'Edit:', 'The date, datetime, and time objects all support a strftime(format) method, \nto create a string representing the time under the control of an explicit format\nstring.', 'Use date.strftime. The formatting arguments are described in the documentation.', 'This is shorter:', 'OUTPUT', 'Or even', 'Simple answer -', ""With type-specific datetime string formatting (see nk9's answer using str.format().) in a Formatted string literal (since Python 3.6, 2016-12-23):"", 'I hate the idea of importing too many modules for convenience. I would rather work with available module which in this case is datetime rather than calling a new module time.', 'You need to convert the date time object to a string.', 'You can do:', 'Considering the fact you asked for something simple to do what you wanted, you could just:', 'For those wanting locale-based date and not including time, use:', 'You may want to append it as a string?', ""Since the print today returns what you want this means that the today object's __str__ function returns the string you are looking for."", 'You can use easy_date to make it easy:', ""A quick disclaimer for my answer - I've only been learning Python for about 2 weeks, so I am by no means an expert; therefore, my explanation may not be the best and I may use incorrect terminology. Anyway, here it goes."", 'Here is how to display the date as (year/month/day) :', ""this will print 6-23-2018 if that's what you want :)"", 'In this way you can get Date formatted like this example: 22-Jun-2017', ""I don't fully understand but, can use pandas for getting times in right format:""]"
299,How do I remove packages installed with Python's easy_install?,"Python's easy_install makes installing new packages extremely convenient. However, as far as I can tell, it doesn't implement the other common features of a dependency manager - listing and removing ...",https://stackoverflow.com/questions/1231688/how-do-i-remove-packages-installed-with-pythons-easy-install,"[""Python's easy_install makes installing new packages extremely convenient. However, as far as I can tell, it doesn't implement the other common features of a dependency manager - listing and removing installed packages."", 'pip, an alternative to setuptools/easy_install, provides an ""uninstall"" command.', 'To uninstall an .egg you need to rm -rf the egg (it might be a directory) and remove the matching line from site-packages/easy-install.pth', 'First you have to run this command:', 'All the info is in the other answers, but none summarizes both your requests or seem to make things needlessly complex:', 'There are several sources on the net suggesting a hack by reinstalling the package with the -m option and then just removing the .egg file in lib/ and the binaries in bin/. Also, discussion about this setuptools issue can be found on the python bug tracker as setuptools issue 21.', ""If the problem is a serious-enough annoyance to you, you might consider virtualenv. It allows you to create an environment that encapsulates python libraries. You install packages there rather than in the global site-packages directory. Any scripts you run in that environment have access to those packages (and optionally, your global ones as well). I use this a lot when evaluating packages that I am not sure I want/need to install globally. If you decide you don't need the package, it's easy enough to just blow that virtual environment away. It's pretty easy to use. Make a new env:"", 'Official(?) instructions: http://peak.telecommunity.com/DevCenter/EasyInstall#uninstalling-packages', 'try', ""To list installed Python packages, you can use yolk -l. You'll need to use easy_install yolk first though."", 'Came across this question, while trying to uninstall the many random Python packages installed over time.', 'I ran into the same problem on my MacOS X Leopard 10.6.blah.', 'For me only deleting this file : easy-install.pth \nworked, rest pip install django==1.3.7', ""This worked for me.  It's similar to previous answers but the path to the packages is different.""]"
300,Why shouldn't I use PyPy over CPython if PyPy is 6.3 times faster?,"I've been hearing a lot about the PyPy project. They claim it is 6.3 times faster than the CPython interpreter on their site.

Whenever we talk about dynamic languages like Python, speed is one of the ...",https://stackoverflow.com/questions/18946662/why-shouldnt-i-use-pypy-over-cpython-if-pypy-is-6-3-times-faster,"[""I've been hearing a lot about the PyPy project. They claim it is 6.3 times faster than the CPython interpreter on their site."", 'NOTE: PyPy is more mature and better supported now than it was in 2013, when this question was asked. Avoid drawing conclusions from out-of-date information.', 'That site does not claim PyPy is 6.3 times faster than CPython. To quote:', ""Because pypy is not 100% compatible, takes 8 gigs of ram to compile, is a moving target, and highly experimental, where cpython is stable, the default target for module builders for 2 decades (including c extensions that don't work on pypy), and already widely deployed."", 'The second question is easier to answer: you basically can use PyPy as a drop-in replacement if all your code is pure Python.  However, many widely used libraries (including some of the standard library) are written in C and compiled as Python extensions.  Some of these can be made to work with PyPy, some can\'t.  PyPy provides the same ""forward-facing"" tool as Python --- that is, it is Python --- but its innards are different, so tools that interface with those innards won\'t work.', ""I did a small benchmark on this topic. While many of the other posters have made good points about compatibility, my experience has been that PyPy isn't that much faster for just moving around bits. For many uses of Python, it really only exists to translate bits between two or more services. For example, not many web applications are performing CPU intensive analysis of datasets. Instead, they take some bytes from a client, store them in some sort of database, and later return them to other clients. Sometimes the format of the data is changed."", 'Q: If PyPy can solve these great challenges (speed, memory consumption, parallelism) in comparison to CPython, what are its weaknesses that are preventing wider adoption?', 'CPython has reference counting and garbage collection, PyPy has garbage collection only.', ""I've found examples, where PyPy is slower than Python.\nBut: Only on Windows."", 'For a lot of projects, there is actually 0% difference between the different pythons in terms of speed. That is those that are dominated by engineering time and where all pythons have the same amount of library support.', 'To make this simple: PyPy provides the speed that\'s lacked by CPython but sacrifices its compatibility. Most people, however, choose Python for its flexibility and its ""battery-included"" feature (high compatibility), not for its speed (it\'s still preferred though).', 'PyPy has had Python 3 support for a while, but according to this HackerNoon post by Anthony Shaw from April 2nd, 2018, PyPy3 is still several times slower than PyPy (Python 2).', 'To cite the Zen of Python:']"
